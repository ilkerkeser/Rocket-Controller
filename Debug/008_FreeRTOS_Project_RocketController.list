
008_FreeRTOS_Project_RocketController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011014  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b0  080111a8  080111a8  000211a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011a58  08011a58  000300c8  2**0
                  CONTENTS
  4 .ARM          00000008  08011a58  08011a58  00021a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011a60  08011a60  000300c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011a60  08011a60  00021a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011a64  08011a64  00021a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08011a68  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300c8  2**0
                  CONTENTS
 10 .bss          000138a8  200000c8  200000c8  000300c8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20013970  20013970  000300c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022ac8  00000000  00000000  000300f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000049fe  00000000  00000000  00052bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f48  00000000  00000000  000575c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d88  00000000  00000000  00059508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a2e  00000000  00000000  0005b290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002618f  00000000  00000000  00082cbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3311  00000000  00000000  000a8e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018c15e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009388  00000000  00000000  0018c1b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c8 	.word	0x200000c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801118c 	.word	0x0801118c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000cc 	.word	0x200000cc
 80001cc:	0801118c 	.word	0x0801118c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2f>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b80:	bf24      	itt	cs
 8000b82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8a:	d90d      	bls.n	8000ba8 <__aeabi_d2f+0x30>
 8000b8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba0:	bf08      	it	eq
 8000ba2:	f020 0001 	biceq.w	r0, r0, #1
 8000ba6:	4770      	bx	lr
 8000ba8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bac:	d121      	bne.n	8000bf2 <__aeabi_d2f+0x7a>
 8000bae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb2:	bfbc      	itt	lt
 8000bb4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	4770      	bxlt	lr
 8000bba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bbe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc2:	f1c2 0218 	rsb	r2, r2, #24
 8000bc6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bce:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	f040 0001 	orrne.w	r0, r0, #1
 8000bd8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bdc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be4:	ea40 000c 	orr.w	r0, r0, ip
 8000be8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf0:	e7cc      	b.n	8000b8c <__aeabi_d2f+0x14>
 8000bf2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bf6:	d107      	bne.n	8000c08 <__aeabi_d2f+0x90>
 8000bf8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bfc:	bf1e      	ittt	ne
 8000bfe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c06:	4770      	bxne	lr
 8000c08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_ldivmod>:
 8000c18:	b97b      	cbnz	r3, 8000c3a <__aeabi_ldivmod+0x22>
 8000c1a:	b972      	cbnz	r2, 8000c3a <__aeabi_ldivmod+0x22>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bfbe      	ittt	lt
 8000c20:	2000      	movlt	r0, #0
 8000c22:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c26:	e006      	blt.n	8000c36 <__aeabi_ldivmod+0x1e>
 8000c28:	bf08      	it	eq
 8000c2a:	2800      	cmpeq	r0, #0
 8000c2c:	bf1c      	itt	ne
 8000c2e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c32:	f04f 30ff 	movne.w	r0, #4294967295
 8000c36:	f000 b9bf 	b.w	8000fb8 <__aeabi_idiv0>
 8000c3a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c3e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c42:	2900      	cmp	r1, #0
 8000c44:	db09      	blt.n	8000c5a <__aeabi_ldivmod+0x42>
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	db1a      	blt.n	8000c80 <__aeabi_ldivmod+0x68>
 8000c4a:	f000 f84d 	bl	8000ce8 <__udivmoddi4>
 8000c4e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c56:	b004      	add	sp, #16
 8000c58:	4770      	bx	lr
 8000c5a:	4240      	negs	r0, r0
 8000c5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db1b      	blt.n	8000c9c <__aeabi_ldivmod+0x84>
 8000c64:	f000 f840 	bl	8000ce8 <__udivmoddi4>
 8000c68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c70:	b004      	add	sp, #16
 8000c72:	4240      	negs	r0, r0
 8000c74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c78:	4252      	negs	r2, r2
 8000c7a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c7e:	4770      	bx	lr
 8000c80:	4252      	negs	r2, r2
 8000c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c86:	f000 f82f 	bl	8000ce8 <__udivmoddi4>
 8000c8a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c92:	b004      	add	sp, #16
 8000c94:	4240      	negs	r0, r0
 8000c96:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c9a:	4770      	bx	lr
 8000c9c:	4252      	negs	r2, r2
 8000c9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca2:	f000 f821 	bl	8000ce8 <__udivmoddi4>
 8000ca6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000caa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cae:	b004      	add	sp, #16
 8000cb0:	4252      	negs	r2, r2
 8000cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b974 	b.w	8000fb8 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	468e      	mov	lr, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14d      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4694      	mov	ip, r2
 8000cfa:	d969      	bls.n	8000dd0 <__udivmoddi4+0xe8>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b152      	cbz	r2, 8000d18 <__udivmoddi4+0x30>
 8000d02:	fa01 f302 	lsl.w	r3, r1, r2
 8000d06:	f1c2 0120 	rsb	r1, r2, #32
 8000d0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d12:	ea41 0e03 	orr.w	lr, r1, r3
 8000d16:	4094      	lsls	r4, r2
 8000d18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d1c:	0c21      	lsrs	r1, r4, #16
 8000d1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d22:	fa1f f78c 	uxth.w	r7, ip
 8000d26:	fb08 e316 	mls	r3, r8, r6, lr
 8000d2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d2e:	fb06 f107 	mul.w	r1, r6, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d3e:	f080 811f 	bcs.w	8000f80 <__udivmoddi4+0x298>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 811c 	bls.w	8000f80 <__udivmoddi4+0x298>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3310 	mls	r3, r8, r0, r3
 8000d58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d5c:	fb00 f707 	mul.w	r7, r0, r7
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	d90a      	bls.n	8000d7a <__udivmoddi4+0x92>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6c:	f080 810a 	bcs.w	8000f84 <__udivmoddi4+0x29c>
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	f240 8107 	bls.w	8000f84 <__udivmoddi4+0x29c>
 8000d76:	4464      	add	r4, ip
 8000d78:	3802      	subs	r0, #2
 8000d7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7e:	1be4      	subs	r4, r4, r7
 8000d80:	2600      	movs	r6, #0
 8000d82:	b11d      	cbz	r5, 8000d8c <__udivmoddi4+0xa4>
 8000d84:	40d4      	lsrs	r4, r2
 8000d86:	2300      	movs	r3, #0
 8000d88:	e9c5 4300 	strd	r4, r3, [r5]
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d909      	bls.n	8000daa <__udivmoddi4+0xc2>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	f000 80ef 	beq.w	8000f7a <__udivmoddi4+0x292>
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000da2:	4630      	mov	r0, r6
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	fab3 f683 	clz	r6, r3
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d14a      	bne.n	8000e48 <__udivmoddi4+0x160>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0xd4>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80f9 	bhi.w	8000fae <__udivmoddi4+0x2c6>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	469e      	mov	lr, r3
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d0e0      	beq.n	8000d8c <__udivmoddi4+0xa4>
 8000dca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dce:	e7dd      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000dd0:	b902      	cbnz	r2, 8000dd4 <__udivmoddi4+0xec>
 8000dd2:	deff      	udf	#255	; 0xff
 8000dd4:	fab2 f282 	clz	r2, r2
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	f040 8092 	bne.w	8000f02 <__udivmoddi4+0x21a>
 8000dde:	eba1 010c 	sub.w	r1, r1, ip
 8000de2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de6:	fa1f fe8c 	uxth.w	lr, ip
 8000dea:	2601      	movs	r6, #1
 8000dec:	0c20      	lsrs	r0, r4, #16
 8000dee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000df2:	fb07 1113 	mls	r1, r7, r3, r1
 8000df6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dfa:	fb0e f003 	mul.w	r0, lr, r3
 8000dfe:	4288      	cmp	r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x12c>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x12a>
 8000e0c:	4288      	cmp	r0, r1
 8000e0e:	f200 80cb 	bhi.w	8000fa8 <__udivmoddi4+0x2c0>
 8000e12:	4643      	mov	r3, r8
 8000e14:	1a09      	subs	r1, r1, r0
 8000e16:	b2a4      	uxth	r4, r4
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e24:	fb0e fe00 	mul.w	lr, lr, r0
 8000e28:	45a6      	cmp	lr, r4
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x156>
 8000e2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e34:	d202      	bcs.n	8000e3c <__udivmoddi4+0x154>
 8000e36:	45a6      	cmp	lr, r4
 8000e38:	f200 80bb 	bhi.w	8000fb2 <__udivmoddi4+0x2ca>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	eba4 040e 	sub.w	r4, r4, lr
 8000e42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e46:	e79c      	b.n	8000d82 <__udivmoddi4+0x9a>
 8000e48:	f1c6 0720 	rsb	r7, r6, #32
 8000e4c:	40b3      	lsls	r3, r6
 8000e4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e56:	fa20 f407 	lsr.w	r4, r0, r7
 8000e5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5e:	431c      	orrs	r4, r3
 8000e60:	40f9      	lsrs	r1, r7
 8000e62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e66:	fa00 f306 	lsl.w	r3, r0, r6
 8000e6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e6e:	0c20      	lsrs	r0, r4, #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fb09 1118 	mls	r1, r9, r8, r1
 8000e78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e80:	4288      	cmp	r0, r1
 8000e82:	fa02 f206 	lsl.w	r2, r2, r6
 8000e86:	d90b      	bls.n	8000ea0 <__udivmoddi4+0x1b8>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e90:	f080 8088 	bcs.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e94:	4288      	cmp	r0, r1
 8000e96:	f240 8085 	bls.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ea8:	fb09 1110 	mls	r1, r9, r0, r1
 8000eac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eb0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eb4:	458e      	cmp	lr, r1
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x1e2>
 8000eb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ebc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ec0:	d26c      	bcs.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec2:	458e      	cmp	lr, r1
 8000ec4:	d96a      	bls.n	8000f9c <__udivmoddi4+0x2b4>
 8000ec6:	3802      	subs	r0, #2
 8000ec8:	4461      	add	r1, ip
 8000eca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ece:	fba0 9402 	umull	r9, r4, r0, r2
 8000ed2:	eba1 010e 	sub.w	r1, r1, lr
 8000ed6:	42a1      	cmp	r1, r4
 8000ed8:	46c8      	mov	r8, r9
 8000eda:	46a6      	mov	lr, r4
 8000edc:	d356      	bcc.n	8000f8c <__udivmoddi4+0x2a4>
 8000ede:	d053      	beq.n	8000f88 <__udivmoddi4+0x2a0>
 8000ee0:	b15d      	cbz	r5, 8000efa <__udivmoddi4+0x212>
 8000ee2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ee6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eea:	fa01 f707 	lsl.w	r7, r1, r7
 8000eee:	fa22 f306 	lsr.w	r3, r2, r6
 8000ef2:	40f1      	lsrs	r1, r6
 8000ef4:	431f      	orrs	r7, r3
 8000ef6:	e9c5 7100 	strd	r7, r1, [r5]
 8000efa:	2600      	movs	r6, #0
 8000efc:	4631      	mov	r1, r6
 8000efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f02:	f1c2 0320 	rsb	r3, r2, #32
 8000f06:	40d8      	lsrs	r0, r3
 8000f08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f10:	4091      	lsls	r1, r2
 8000f12:	4301      	orrs	r1, r0
 8000f14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f18:	fa1f fe8c 	uxth.w	lr, ip
 8000f1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f20:	fb07 3610 	mls	r6, r7, r0, r3
 8000f24:	0c0b      	lsrs	r3, r1, #16
 8000f26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f2e:	429e      	cmp	r6, r3
 8000f30:	fa04 f402 	lsl.w	r4, r4, r2
 8000f34:	d908      	bls.n	8000f48 <__udivmoddi4+0x260>
 8000f36:	eb1c 0303 	adds.w	r3, ip, r3
 8000f3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f3e:	d22f      	bcs.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f40:	429e      	cmp	r6, r3
 8000f42:	d92d      	bls.n	8000fa0 <__udivmoddi4+0x2b8>
 8000f44:	3802      	subs	r0, #2
 8000f46:	4463      	add	r3, ip
 8000f48:	1b9b      	subs	r3, r3, r6
 8000f4a:	b289      	uxth	r1, r1
 8000f4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f50:	fb07 3316 	mls	r3, r7, r6, r3
 8000f54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f58:	fb06 f30e 	mul.w	r3, r6, lr
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	d908      	bls.n	8000f72 <__udivmoddi4+0x28a>
 8000f60:	eb1c 0101 	adds.w	r1, ip, r1
 8000f64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f68:	d216      	bcs.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	d914      	bls.n	8000f98 <__udivmoddi4+0x2b0>
 8000f6e:	3e02      	subs	r6, #2
 8000f70:	4461      	add	r1, ip
 8000f72:	1ac9      	subs	r1, r1, r3
 8000f74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f78:	e738      	b.n	8000dec <__udivmoddi4+0x104>
 8000f7a:	462e      	mov	r6, r5
 8000f7c:	4628      	mov	r0, r5
 8000f7e:	e705      	b.n	8000d8c <__udivmoddi4+0xa4>
 8000f80:	4606      	mov	r6, r0
 8000f82:	e6e3      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f84:	4618      	mov	r0, r3
 8000f86:	e6f8      	b.n	8000d7a <__udivmoddi4+0x92>
 8000f88:	454b      	cmp	r3, r9
 8000f8a:	d2a9      	bcs.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f94:	3801      	subs	r0, #1
 8000f96:	e7a3      	b.n	8000ee0 <__udivmoddi4+0x1f8>
 8000f98:	4646      	mov	r6, r8
 8000f9a:	e7ea      	b.n	8000f72 <__udivmoddi4+0x28a>
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	e794      	b.n	8000eca <__udivmoddi4+0x1e2>
 8000fa0:	4640      	mov	r0, r8
 8000fa2:	e7d1      	b.n	8000f48 <__udivmoddi4+0x260>
 8000fa4:	46d0      	mov	r8, sl
 8000fa6:	e77b      	b.n	8000ea0 <__udivmoddi4+0x1b8>
 8000fa8:	3b02      	subs	r3, #2
 8000faa:	4461      	add	r1, ip
 8000fac:	e732      	b.n	8000e14 <__udivmoddi4+0x12c>
 8000fae:	4630      	mov	r0, r6
 8000fb0:	e709      	b.n	8000dc6 <__udivmoddi4+0xde>
 8000fb2:	4464      	add	r4, ip
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	e742      	b.n	8000e3e <__udivmoddi4+0x156>

08000fb8 <__aeabi_idiv0>:
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop

08000fbc <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff f90d 	bl	80001e4 <strlen>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <Send_Uart+0x28>)
 8000fd6:	f007 ff9c 	bl	8008f12 <HAL_UART_Transmit>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200007f0 	.word	0x200007f0

08000fe8 <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	480a      	ldr	r0, [pc, #40]	; (8001020 <Mount_SD+0x38>)
 8000ff6:	f00b f819 	bl	800c02c <f_mount>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <Mount_SD+0x3c>)
 8001000:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
 8001002:	4b08      	ldr	r3, [pc, #32]	; (8001024 <Mount_SD+0x3c>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <Mount_SD+0x2a>
 800100a:	4807      	ldr	r0, [pc, #28]	; (8001028 <Mount_SD+0x40>)
 800100c:	f7ff ffd6 	bl	8000fbc <Send_Uart>
	else Send_Uart("SD CARD mounted successfully...\n");
}
 8001010:	e002      	b.n	8001018 <Mount_SD+0x30>
	else Send_Uart("SD CARD mounted successfully...\n");
 8001012:	4806      	ldr	r0, [pc, #24]	; (800102c <Mount_SD+0x44>)
 8001014:	f7ff ffd2 	bl	8000fbc <Send_Uart>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	200000e4 	.word	0x200000e4
 8001024:	2000055c 	.word	0x2000055c
 8001028:	080111a8 	.word	0x080111a8
 800102c:	080111cc 	.word	0x080111cc

08001030 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8001038:	2201      	movs	r2, #1
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	2000      	movs	r0, #0
 800103e:	f00a fff5 	bl	800c02c <f_mount>
 8001042:	4603      	mov	r3, r0
 8001044:	461a      	mov	r2, r3
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <Unmount_SD+0x38>)
 8001048:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\n\n\n");
 800104a:	4b07      	ldr	r3, [pc, #28]	; (8001068 <Unmount_SD+0x38>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d103      	bne.n	800105a <Unmount_SD+0x2a>
 8001052:	4806      	ldr	r0, [pc, #24]	; (800106c <Unmount_SD+0x3c>)
 8001054:	f7ff ffb2 	bl	8000fbc <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 8001058:	e002      	b.n	8001060 <Unmount_SD+0x30>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <Unmount_SD+0x40>)
 800105c:	f7ff ffae 	bl	8000fbc <Send_Uart>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2000055c 	.word	0x2000055c
 800106c:	080111f0 	.word	0x080111f0
 8001070:	08011218 	.word	0x08011218

08001074 <Format_SD>:
    return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD (void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08e      	sub	sp, #56	; 0x38
 8001078:	af00      	add	r7, sp, #0
    DIR dir;
    char *path = malloc(20*sizeof (char));
 800107a:	2014      	movs	r0, #20
 800107c:	f00d ff46 	bl	800ef0c <malloc>
 8001080:	4603      	mov	r3, r0
 8001082:	637b      	str	r3, [r7, #52]	; 0x34
    sprintf (path, "%s","/");
 8001084:	4a28      	ldr	r2, [pc, #160]	; (8001128 <Format_SD+0xb4>)
 8001086:	4929      	ldr	r1, [pc, #164]	; (800112c <Format_SD+0xb8>)
 8001088:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800108a:	f00e f8e3 	bl	800f254 <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001092:	4618      	mov	r0, r3
 8001094:	f00b fbeb 	bl	800c86e <f_opendir>
 8001098:	4603      	mov	r3, r0
 800109a:	461a      	mov	r2, r3
 800109c:	4b24      	ldr	r3, [pc, #144]	; (8001130 <Format_SD+0xbc>)
 800109e:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80010a0:	4b23      	ldr	r3, [pc, #140]	; (8001130 <Format_SD+0xbc>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d136      	bne.n	8001116 <Format_SD+0xa2>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	4922      	ldr	r1, [pc, #136]	; (8001134 <Format_SD+0xc0>)
 80010ac:	4618      	mov	r0, r3
 80010ae:	f00b fc77 	bl	800c9a0 <f_readdir>
 80010b2:	4603      	mov	r3, r0
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <Format_SD+0xbc>)
 80010b8:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 80010ba:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <Format_SD+0xbc>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d125      	bne.n	800110e <Format_SD+0x9a>
 80010c2:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <Format_SD+0xc0>)
 80010c4:	7a5b      	ldrb	r3, [r3, #9]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d021      	beq.n	800110e <Format_SD+0x9a>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 80010ca:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <Format_SD+0xc0>)
 80010cc:	7a1b      	ldrb	r3, [r3, #8]
 80010ce:	f003 0310 	and.w	r3, r3, #16
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d011      	beq.n	80010fa <Format_SD+0x86>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 80010d6:	4918      	ldr	r1, [pc, #96]	; (8001138 <Format_SD+0xc4>)
 80010d8:	4818      	ldr	r0, [pc, #96]	; (800113c <Format_SD+0xc8>)
 80010da:	f7ff f879 	bl	80001d0 <strcmp>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d012      	beq.n	800110a <Format_SD+0x96>
            	fresult = f_unlink(fno.fname);
 80010e4:	4814      	ldr	r0, [pc, #80]	; (8001138 <Format_SD+0xc4>)
 80010e6:	f00b fcd1 	bl	800ca8c <f_unlink>
 80010ea:	4603      	mov	r3, r0
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <Format_SD+0xbc>)
 80010f0:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <Format_SD+0xbc>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b07      	cmp	r3, #7
 80010f8:	e7d6      	b.n	80010a8 <Format_SD+0x34>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 80010fa:	480f      	ldr	r0, [pc, #60]	; (8001138 <Format_SD+0xc4>)
 80010fc:	f00b fcc6 	bl	800ca8c <f_unlink>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <Format_SD+0xbc>)
 8001106:	701a      	strb	r2, [r3, #0]
 8001108:	e7ce      	b.n	80010a8 <Format_SD+0x34>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 800110a:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 800110c:	e7cc      	b.n	80010a8 <Format_SD+0x34>
            }
        }
        f_closedir(&dir);
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	4618      	mov	r0, r3
 8001112:	f00b fc1f 	bl	800c954 <f_closedir>
    }
    free(path);
 8001116:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001118:	f00d ff00 	bl	800ef1c <free>
    return fresult;
 800111c:	4b04      	ldr	r3, [pc, #16]	; (8001130 <Format_SD+0xbc>)
 800111e:	781b      	ldrb	r3, [r3, #0]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3738      	adds	r7, #56	; 0x38
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	0801126c 	.word	0x0801126c
 800112c:	0801123c 	.word	0x0801123c
 8001130:	2000055c 	.word	0x2000055c
 8001134:	20000544 	.word	0x20000544
 8001138:	2000054d 	.word	0x2000054d
 800113c:	08011240 	.word	0x08011240

08001140 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8001148:	4943      	ldr	r1, [pc, #268]	; (8001258 <Create_File+0x118>)
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f00b fc65 	bl	800ca1a <f_stat>
 8001150:	4603      	mov	r3, r0
 8001152:	461a      	mov	r2, r3
 8001154:	4b41      	ldr	r3, [pc, #260]	; (800125c <Create_File+0x11c>)
 8001156:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001158:	4b40      	ldr	r3, [pc, #256]	; (800125c <Create_File+0x11c>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d112      	bne.n	8001186 <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 8001160:	2064      	movs	r0, #100	; 0x64
 8001162:	f00d fed3 	bl	800ef0c <malloc>
 8001166:	4603      	mov	r3, r0
 8001168:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	493c      	ldr	r1, [pc, #240]	; (8001260 <Create_File+0x120>)
 800116e:	68f8      	ldr	r0, [r7, #12]
 8001170:	f00e f870 	bl	800f254 <siprintf>
		Send_Uart(buf);
 8001174:	68f8      	ldr	r0, [r7, #12]
 8001176:	f7ff ff21 	bl	8000fbc <Send_Uart>
		free(buf);
 800117a:	68f8      	ldr	r0, [r7, #12]
 800117c:	f00d fece 	bl	800ef1c <free>
	    return fresult;
 8001180:	4b36      	ldr	r3, [pc, #216]	; (800125c <Create_File+0x11c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	e063      	b.n	800124e <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8001186:	220b      	movs	r2, #11
 8001188:	6879      	ldr	r1, [r7, #4]
 800118a:	4836      	ldr	r0, [pc, #216]	; (8001264 <Create_File+0x124>)
 800118c:	f00a ff94 	bl	800c0b8 <f_open>
 8001190:	4603      	mov	r3, r0
 8001192:	461a      	mov	r2, r3
 8001194:	4b31      	ldr	r3, [pc, #196]	; (800125c <Create_File+0x11c>)
 8001196:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001198:	4b30      	ldr	r3, [pc, #192]	; (800125c <Create_File+0x11c>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d015      	beq.n	80011cc <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 80011a0:	2064      	movs	r0, #100	; 0x64
 80011a2:	f00d feb3 	bl	800ef0c <malloc>
 80011a6:	4603      	mov	r3, r0
 80011a8:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 80011aa:	4b2c      	ldr	r3, [pc, #176]	; (800125c <Create_File+0x11c>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	461a      	mov	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	492d      	ldr	r1, [pc, #180]	; (8001268 <Create_File+0x128>)
 80011b4:	6938      	ldr	r0, [r7, #16]
 80011b6:	f00e f84d 	bl	800f254 <siprintf>
			Send_Uart(buf);
 80011ba:	6938      	ldr	r0, [r7, #16]
 80011bc:	f7ff fefe 	bl	8000fbc <Send_Uart>
			free(buf);
 80011c0:	6938      	ldr	r0, [r7, #16]
 80011c2:	f00d feab 	bl	800ef1c <free>
		    return fresult;
 80011c6:	4b25      	ldr	r3, [pc, #148]	; (800125c <Create_File+0x11c>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	e040      	b.n	800124e <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 80011cc:	2064      	movs	r0, #100	; 0x64
 80011ce:	f00d fe9d 	bl	800ef0c <malloc>
 80011d2:	4603      	mov	r3, r0
 80011d4:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	4924      	ldr	r1, [pc, #144]	; (800126c <Create_File+0x12c>)
 80011da:	69f8      	ldr	r0, [r7, #28]
 80011dc:	f00e f83a 	bl	800f254 <siprintf>
			Send_Uart(buf);
 80011e0:	69f8      	ldr	r0, [r7, #28]
 80011e2:	f7ff feeb 	bl	8000fbc <Send_Uart>
			free(buf);
 80011e6:	69f8      	ldr	r0, [r7, #28]
 80011e8:	f00d fe98 	bl	800ef1c <free>
		}

		fresult = f_close(&fil);
 80011ec:	481d      	ldr	r0, [pc, #116]	; (8001264 <Create_File+0x124>)
 80011ee:	f00b fb14 	bl	800c81a <f_close>
 80011f2:	4603      	mov	r3, r0
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b19      	ldr	r3, [pc, #100]	; (800125c <Create_File+0x11c>)
 80011f8:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <Create_File+0x11c>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d013      	beq.n	800122a <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 8001202:	2064      	movs	r0, #100	; 0x64
 8001204:	f00d fe82 	bl	800ef0c <malloc>
 8001208:	4603      	mov	r3, r0
 800120a:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 800120c:	4b13      	ldr	r3, [pc, #76]	; (800125c <Create_File+0x11c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4916      	ldr	r1, [pc, #88]	; (8001270 <Create_File+0x130>)
 8001216:	6978      	ldr	r0, [r7, #20]
 8001218:	f00e f81c 	bl	800f254 <siprintf>
			Send_Uart(buf);
 800121c:	6978      	ldr	r0, [r7, #20]
 800121e:	f7ff fecd 	bl	8000fbc <Send_Uart>
			free(buf);
 8001222:	6978      	ldr	r0, [r7, #20]
 8001224:	f00d fe7a 	bl	800ef1c <free>
 8001228:	e00f      	b.n	800124a <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 800122a:	2064      	movs	r0, #100	; 0x64
 800122c:	f00d fe6e 	bl	800ef0c <malloc>
 8001230:	4603      	mov	r3, r0
 8001232:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	490f      	ldr	r1, [pc, #60]	; (8001274 <Create_File+0x134>)
 8001238:	69b8      	ldr	r0, [r7, #24]
 800123a:	f00e f80b 	bl	800f254 <siprintf>
			Send_Uart(buf);
 800123e:	69b8      	ldr	r0, [r7, #24]
 8001240:	f7ff febc 	bl	8000fbc <Send_Uart>
			free(buf);
 8001244:	69b8      	ldr	r0, [r7, #24]
 8001246:	f00d fe69 	bl	800ef1c <free>
		}
	}
    return fresult;
 800124a:	4b04      	ldr	r3, [pc, #16]	; (800125c <Create_File+0x11c>)
 800124c:	781b      	ldrb	r3, [r3, #0]
}
 800124e:	4618      	mov	r0, r3
 8001250:	3720      	adds	r7, #32
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000544 	.word	0x20000544
 800125c:	2000055c 	.word	0x2000055c
 8001260:	080113e8 	.word	0x080113e8
 8001264:	20000314 	.word	0x20000314
 8001268:	08011420 	.word	0x08011420
 800126c:	08011448 	.word	0x08011448
 8001270:	08011488 	.word	0x08011488
 8001274:	080113c8 	.word	0x080113c8

08001278 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8001282:	4956      	ldr	r1, [pc, #344]	; (80013dc <Update_File+0x164>)
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f00b fbc8 	bl	800ca1a <f_stat>
 800128a:	4603      	mov	r3, r0
 800128c:	461a      	mov	r2, r3
 800128e:	4b54      	ldr	r3, [pc, #336]	; (80013e0 <Update_File+0x168>)
 8001290:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001292:	4b53      	ldr	r3, [pc, #332]	; (80013e0 <Update_File+0x168>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d012      	beq.n	80012c0 <Update_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 800129a:	2064      	movs	r0, #100	; 0x64
 800129c:	f00d fe36 	bl	800ef0c <malloc>
 80012a0:	4603      	mov	r3, r0
 80012a2:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	494f      	ldr	r1, [pc, #316]	; (80013e4 <Update_File+0x16c>)
 80012a8:	68b8      	ldr	r0, [r7, #8]
 80012aa:	f00d ffd3 	bl	800f254 <siprintf>
		Send_Uart (buf);
 80012ae:	68b8      	ldr	r0, [r7, #8]
 80012b0:	f7ff fe84 	bl	8000fbc <Send_Uart>
		free(buf);
 80012b4:	68b8      	ldr	r0, [r7, #8]
 80012b6:	f00d fe31 	bl	800ef1c <free>
	    return fresult;
 80012ba:	4b49      	ldr	r3, [pc, #292]	; (80013e0 <Update_File+0x168>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	e088      	b.n	80013d2 <Update_File+0x15a>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 80012c0:	2232      	movs	r2, #50	; 0x32
 80012c2:	6879      	ldr	r1, [r7, #4]
 80012c4:	4848      	ldr	r0, [pc, #288]	; (80013e8 <Update_File+0x170>)
 80012c6:	f00a fef7 	bl	800c0b8 <f_open>
 80012ca:	4603      	mov	r3, r0
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b44      	ldr	r3, [pc, #272]	; (80013e0 <Update_File+0x168>)
 80012d0:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80012d2:	4b43      	ldr	r3, [pc, #268]	; (80013e0 <Update_File+0x168>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d015      	beq.n	8001306 <Update_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80012da:	2064      	movs	r0, #100	; 0x64
 80012dc:	f00d fe16 	bl	800ef0c <malloc>
 80012e0:	4603      	mov	r3, r0
 80012e2:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 80012e4:	4b3e      	ldr	r3, [pc, #248]	; (80013e0 <Update_File+0x168>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	461a      	mov	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	493f      	ldr	r1, [pc, #252]	; (80013ec <Update_File+0x174>)
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	f00d ffb0 	bl	800f254 <siprintf>
	    	Send_Uart(buf);
 80012f4:	68f8      	ldr	r0, [r7, #12]
 80012f6:	f7ff fe61 	bl	8000fbc <Send_Uart>
	        free(buf);
 80012fa:	68f8      	ldr	r0, [r7, #12]
 80012fc:	f00d fe0e 	bl	800ef1c <free>
	        return fresult;
 8001300:	4b37      	ldr	r3, [pc, #220]	; (80013e0 <Update_File+0x168>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	e065      	b.n	80013d2 <Update_File+0x15a>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 8001306:	6838      	ldr	r0, [r7, #0]
 8001308:	f7fe ff6c 	bl	80001e4 <strlen>
 800130c:	4602      	mov	r2, r0
 800130e:	4b38      	ldr	r3, [pc, #224]	; (80013f0 <Update_File+0x178>)
 8001310:	6839      	ldr	r1, [r7, #0]
 8001312:	4835      	ldr	r0, [pc, #212]	; (80013e8 <Update_File+0x170>)
 8001314:	f00b f88e 	bl	800c434 <f_write>
 8001318:	4603      	mov	r3, r0
 800131a:	461a      	mov	r2, r3
 800131c:	4b30      	ldr	r3, [pc, #192]	; (80013e0 <Update_File+0x168>)
 800131e:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001320:	4b2f      	ldr	r3, [pc, #188]	; (80013e0 <Update_File+0x168>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d013      	beq.n	8001350 <Update_File+0xd8>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001328:	2064      	movs	r0, #100	; 0x64
 800132a:	f00d fdef 	bl	800ef0c <malloc>
 800132e:	4603      	mov	r3, r0
 8001330:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 8001332:	4b2b      	ldr	r3, [pc, #172]	; (80013e0 <Update_File+0x168>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	492e      	ldr	r1, [pc, #184]	; (80013f4 <Update_File+0x17c>)
 800133c:	69b8      	ldr	r0, [r7, #24]
 800133e:	f00d ff89 	bl	800f254 <siprintf>
	    	Send_Uart(buf);
 8001342:	69b8      	ldr	r0, [r7, #24]
 8001344:	f7ff fe3a 	bl	8000fbc <Send_Uart>
	    	free(buf);
 8001348:	69b8      	ldr	r0, [r7, #24]
 800134a:	f00d fde7 	bl	800ef1c <free>
 800134e:	e00f      	b.n	8001370 <Update_File+0xf8>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001350:	2064      	movs	r0, #100	; 0x64
 8001352:	f00d fddb 	bl	800ef0c <malloc>
 8001356:	4603      	mov	r3, r0
 8001358:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	4926      	ldr	r1, [pc, #152]	; (80013f8 <Update_File+0x180>)
 800135e:	69f8      	ldr	r0, [r7, #28]
 8001360:	f00d ff78 	bl	800f254 <siprintf>
	    	Send_Uart(buf);
 8001364:	69f8      	ldr	r0, [r7, #28]
 8001366:	f7ff fe29 	bl	8000fbc <Send_Uart>
	    	free(buf);
 800136a:	69f8      	ldr	r0, [r7, #28]
 800136c:	f00d fdd6 	bl	800ef1c <free>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8001370:	481d      	ldr	r0, [pc, #116]	; (80013e8 <Update_File+0x170>)
 8001372:	f00b fa52 	bl	800c81a <f_close>
 8001376:	4603      	mov	r3, r0
 8001378:	461a      	mov	r2, r3
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <Update_File+0x168>)
 800137c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800137e:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <Update_File+0x168>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d013      	beq.n	80013ae <Update_File+0x136>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001386:	2064      	movs	r0, #100	; 0x64
 8001388:	f00d fdc0 	bl	800ef0c <malloc>
 800138c:	4603      	mov	r3, r0
 800138e:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8001390:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <Update_File+0x168>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4918      	ldr	r1, [pc, #96]	; (80013fc <Update_File+0x184>)
 800139a:	6938      	ldr	r0, [r7, #16]
 800139c:	f00d ff5a 	bl	800f254 <siprintf>
	    	Send_Uart(buf);
 80013a0:	6938      	ldr	r0, [r7, #16]
 80013a2:	f7ff fe0b 	bl	8000fbc <Send_Uart>
	    	free(buf);
 80013a6:	6938      	ldr	r0, [r7, #16]
 80013a8:	f00d fdb8 	bl	800ef1c <free>
 80013ac:	e00f      	b.n	80013ce <Update_File+0x156>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 80013ae:	2064      	movs	r0, #100	; 0x64
 80013b0:	f00d fdac 	bl	800ef0c <malloc>
 80013b4:	4603      	mov	r3, r0
 80013b6:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	4911      	ldr	r1, [pc, #68]	; (8001400 <Update_File+0x188>)
 80013bc:	6978      	ldr	r0, [r7, #20]
 80013be:	f00d ff49 	bl	800f254 <siprintf>
	    	Send_Uart(buf);
 80013c2:	6978      	ldr	r0, [r7, #20]
 80013c4:	f7ff fdfa 	bl	8000fbc <Send_Uart>
	    	free(buf);
 80013c8:	6978      	ldr	r0, [r7, #20]
 80013ca:	f00d fda7 	bl	800ef1c <free>
	     }
	}
    return fresult;
 80013ce:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <Update_File+0x168>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3720      	adds	r7, #32
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000544 	.word	0x20000544
 80013e0:	2000055c 	.word	0x2000055c
 80013e4:	08011270 	.word	0x08011270
 80013e8:	20000314 	.word	0x20000314
 80013ec:	08011290 	.word	0x08011290
 80013f0:	20000560 	.word	0x20000560
 80013f4:	080114ac 	.word	0x080114ac
 80013f8:	080114d4 	.word	0x080114d4
 80013fc:	080113a0 	.word	0x080113a0
 8001400:	080113c8 	.word	0x080113c8

08001404 <KalmanFilter_Init>:
//

#include "KalmanFilter.h"
#include <math.h>

void  KalmanFilter_Init(KalmanFilter_t *kalman,float mea_e,float est_e, float q){
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001410:	edc7 0a01 	vstr	s1, [r7, #4]
 8001414:	ed87 1a00 	vstr	s2, [r7]
    kalman->_err_measure = mea_e;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	601a      	str	r2, [r3, #0]
    kalman->_err_estimate = est_e;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	605a      	str	r2, [r3, #4]
    kalman->_q = q;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	609a      	str	r2, [r3, #8]

    kalman->_current_estimate =0.0f;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f04f 0200 	mov.w	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
    kalman->_last_estimate =0.0f;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f04f 0200 	mov.w	r2, #0
 8001438:	611a      	str	r2, [r3, #16]
    kalman->_kalman_gain =0.0f;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	615a      	str	r2, [r3, #20]
}
 8001442:	bf00      	nop
 8001444:	3714      	adds	r7, #20
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <updateEstimate>:

float updateEstimate(KalmanFilter_t *kalman,float mea){
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
 8001456:	ed87 0a00 	vstr	s0, [r7]
    kalman->_kalman_gain = kalman->_err_estimate /(kalman->_err_estimate + kalman->_err_measure);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	ed93 7a01 	vldr	s14, [r3, #4]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	edd3 7a00 	vldr	s15, [r3]
 800146c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001470:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	edc3 7a05 	vstr	s15, [r3, #20]
    kalman->_current_estimate = kalman->_last_estimate + kalman->_kalman_gain * (mea - kalman->_last_estimate);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	edd3 6a05 	vldr	s13, [r3, #20]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	edd3 7a04 	vldr	s15, [r3, #16]
 800148c:	ed97 6a00 	vldr	s12, [r7]
 8001490:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001494:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001498:	ee77 7a27 	vadd.f32	s15, s14, s15
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	edc3 7a03 	vstr	s15, [r3, #12]
    kalman->_err_estimate = (1.0f - kalman->_kalman_gain) * kalman->_err_estimate +
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	edd3 7a05 	vldr	s15, [r3, #20]
 80014a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80014b6:	ee27 7a27 	vmul.f32	s14, s14, s15
                            fabsf(kalman->_last_estimate - kalman->_current_estimate)*kalman->_q;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	edd3 6a04 	vldr	s13, [r3, #16]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80014c6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80014ca:	eef0 6ae7 	vabs.f32	s13, s15
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80014d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    kalman->_err_estimate = (1.0f - kalman->_kalman_gain) * kalman->_err_estimate +
 80014d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	edc3 7a01 	vstr	s15, [r3, #4]
    kalman->_last_estimate = kalman->_current_estimate;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68da      	ldr	r2, [r3, #12]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	611a      	str	r2, [r3, #16]

    return kalman->_current_estimate;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	ee07 3a90 	vmov	s15, r3
}
 80014f2:	eeb0 0a67 	vmov.f32	s0, s15
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <TrimRead>:
float SeaLevel = 1013.25;

//Read the Trimming parameters saved in the NVM ROM of the device
//This function came from datasheet page 24
void TrimRead(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af04      	add	r7, sp, #16
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 8001506:	f04f 33ff 	mov.w	r3, #4294967295
 800150a:	9302      	str	r3, [sp, #8]
 800150c:	2319      	movs	r3, #25
 800150e:	9301      	str	r3, [sp, #4]
 8001510:	4b69      	ldr	r3, [pc, #420]	; (80016b8 <TrimRead+0x1b8>)
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	2301      	movs	r3, #1
 8001516:	2288      	movs	r2, #136	; 0x88
 8001518:	21ec      	movs	r1, #236	; 0xec
 800151a:	4868      	ldr	r0, [pc, #416]	; (80016bc <TrimRead+0x1bc>)
 800151c:	f004 fc74 	bl	8005e08 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 8001520:	4b67      	ldr	r3, [pc, #412]	; (80016c0 <TrimRead+0x1c0>)
 8001522:	f04f 32ff 	mov.w	r2, #4294967295
 8001526:	9202      	str	r2, [sp, #8]
 8001528:	2207      	movs	r2, #7
 800152a:	9201      	str	r2, [sp, #4]
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	2301      	movs	r3, #1
 8001530:	22e1      	movs	r2, #225	; 0xe1
 8001532:	21ec      	movs	r1, #236	; 0xec
 8001534:	4861      	ldr	r0, [pc, #388]	; (80016bc <TrimRead+0x1bc>)
 8001536:	f004 fc67 	bl	8005e08 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 800153a:	4b5f      	ldr	r3, [pc, #380]	; (80016b8 <TrimRead+0x1b8>)
 800153c:	785b      	ldrb	r3, [r3, #1]
 800153e:	021b      	lsls	r3, r3, #8
 8001540:	b21a      	sxth	r2, r3
 8001542:	4b5d      	ldr	r3, [pc, #372]	; (80016b8 <TrimRead+0x1b8>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	b21b      	sxth	r3, r3
 8001548:	4313      	orrs	r3, r2
 800154a:	b21b      	sxth	r3, r3
 800154c:	b29a      	uxth	r2, r3
 800154e:	4b5d      	ldr	r3, [pc, #372]	; (80016c4 <TrimRead+0x1c4>)
 8001550:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8001552:	4b59      	ldr	r3, [pc, #356]	; (80016b8 <TrimRead+0x1b8>)
 8001554:	78db      	ldrb	r3, [r3, #3]
 8001556:	021b      	lsls	r3, r3, #8
 8001558:	b21a      	sxth	r2, r3
 800155a:	4b57      	ldr	r3, [pc, #348]	; (80016b8 <TrimRead+0x1b8>)
 800155c:	789b      	ldrb	r3, [r3, #2]
 800155e:	b21b      	sxth	r3, r3
 8001560:	4313      	orrs	r3, r2
 8001562:	b21a      	sxth	r2, r3
 8001564:	4b58      	ldr	r3, [pc, #352]	; (80016c8 <TrimRead+0x1c8>)
 8001566:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8001568:	4b53      	ldr	r3, [pc, #332]	; (80016b8 <TrimRead+0x1b8>)
 800156a:	795b      	ldrb	r3, [r3, #5]
 800156c:	021b      	lsls	r3, r3, #8
 800156e:	b21a      	sxth	r2, r3
 8001570:	4b51      	ldr	r3, [pc, #324]	; (80016b8 <TrimRead+0x1b8>)
 8001572:	791b      	ldrb	r3, [r3, #4]
 8001574:	b21b      	sxth	r3, r3
 8001576:	4313      	orrs	r3, r2
 8001578:	b21a      	sxth	r2, r3
 800157a:	4b54      	ldr	r3, [pc, #336]	; (80016cc <TrimRead+0x1cc>)
 800157c:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 800157e:	4b4e      	ldr	r3, [pc, #312]	; (80016b8 <TrimRead+0x1b8>)
 8001580:	79db      	ldrb	r3, [r3, #7]
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	b21a      	sxth	r2, r3
 8001586:	4b4c      	ldr	r3, [pc, #304]	; (80016b8 <TrimRead+0x1b8>)
 8001588:	795b      	ldrb	r3, [r3, #5]
 800158a:	b21b      	sxth	r3, r3
 800158c:	4313      	orrs	r3, r2
 800158e:	b21b      	sxth	r3, r3
 8001590:	b29a      	uxth	r2, r3
 8001592:	4b4f      	ldr	r3, [pc, #316]	; (80016d0 <TrimRead+0x1d0>)
 8001594:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001596:	4b48      	ldr	r3, [pc, #288]	; (80016b8 <TrimRead+0x1b8>)
 8001598:	7a5b      	ldrb	r3, [r3, #9]
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	b21a      	sxth	r2, r3
 800159e:	4b46      	ldr	r3, [pc, #280]	; (80016b8 <TrimRead+0x1b8>)
 80015a0:	799b      	ldrb	r3, [r3, #6]
 80015a2:	b21b      	sxth	r3, r3
 80015a4:	4313      	orrs	r3, r2
 80015a6:	b21a      	sxth	r2, r3
 80015a8:	4b4a      	ldr	r3, [pc, #296]	; (80016d4 <TrimRead+0x1d4>)
 80015aa:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 80015ac:	4b42      	ldr	r3, [pc, #264]	; (80016b8 <TrimRead+0x1b8>)
 80015ae:	7adb      	ldrb	r3, [r3, #11]
 80015b0:	021b      	lsls	r3, r3, #8
 80015b2:	b21a      	sxth	r2, r3
 80015b4:	4b40      	ldr	r3, [pc, #256]	; (80016b8 <TrimRead+0x1b8>)
 80015b6:	7a9b      	ldrb	r3, [r3, #10]
 80015b8:	b21b      	sxth	r3, r3
 80015ba:	4313      	orrs	r3, r2
 80015bc:	b21a      	sxth	r2, r3
 80015be:	4b46      	ldr	r3, [pc, #280]	; (80016d8 <TrimRead+0x1d8>)
 80015c0:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 80015c2:	4b3d      	ldr	r3, [pc, #244]	; (80016b8 <TrimRead+0x1b8>)
 80015c4:	7b5b      	ldrb	r3, [r3, #13]
 80015c6:	021b      	lsls	r3, r3, #8
 80015c8:	b21a      	sxth	r2, r3
 80015ca:	4b3b      	ldr	r3, [pc, #236]	; (80016b8 <TrimRead+0x1b8>)
 80015cc:	7b1b      	ldrb	r3, [r3, #12]
 80015ce:	b21b      	sxth	r3, r3
 80015d0:	4313      	orrs	r3, r2
 80015d2:	b21a      	sxth	r2, r3
 80015d4:	4b41      	ldr	r3, [pc, #260]	; (80016dc <TrimRead+0x1dc>)
 80015d6:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 80015d8:	4b37      	ldr	r3, [pc, #220]	; (80016b8 <TrimRead+0x1b8>)
 80015da:	7bdb      	ldrb	r3, [r3, #15]
 80015dc:	021b      	lsls	r3, r3, #8
 80015de:	b21a      	sxth	r2, r3
 80015e0:	4b35      	ldr	r3, [pc, #212]	; (80016b8 <TrimRead+0x1b8>)
 80015e2:	7b9b      	ldrb	r3, [r3, #14]
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	4313      	orrs	r3, r2
 80015e8:	b21a      	sxth	r2, r3
 80015ea:	4b3d      	ldr	r3, [pc, #244]	; (80016e0 <TrimRead+0x1e0>)
 80015ec:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80015ee:	4b32      	ldr	r3, [pc, #200]	; (80016b8 <TrimRead+0x1b8>)
 80015f0:	7c5b      	ldrb	r3, [r3, #17]
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	b21a      	sxth	r2, r3
 80015f6:	4b30      	ldr	r3, [pc, #192]	; (80016b8 <TrimRead+0x1b8>)
 80015f8:	7c1b      	ldrb	r3, [r3, #16]
 80015fa:	b21b      	sxth	r3, r3
 80015fc:	4313      	orrs	r3, r2
 80015fe:	b21a      	sxth	r2, r3
 8001600:	4b38      	ldr	r3, [pc, #224]	; (80016e4 <TrimRead+0x1e4>)
 8001602:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8001604:	4b2c      	ldr	r3, [pc, #176]	; (80016b8 <TrimRead+0x1b8>)
 8001606:	7cdb      	ldrb	r3, [r3, #19]
 8001608:	021b      	lsls	r3, r3, #8
 800160a:	b21a      	sxth	r2, r3
 800160c:	4b2a      	ldr	r3, [pc, #168]	; (80016b8 <TrimRead+0x1b8>)
 800160e:	7c9b      	ldrb	r3, [r3, #18]
 8001610:	b21b      	sxth	r3, r3
 8001612:	4313      	orrs	r3, r2
 8001614:	b21a      	sxth	r2, r3
 8001616:	4b34      	ldr	r3, [pc, #208]	; (80016e8 <TrimRead+0x1e8>)
 8001618:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 800161a:	4b27      	ldr	r3, [pc, #156]	; (80016b8 <TrimRead+0x1b8>)
 800161c:	7d5b      	ldrb	r3, [r3, #21]
 800161e:	021b      	lsls	r3, r3, #8
 8001620:	b21a      	sxth	r2, r3
 8001622:	4b25      	ldr	r3, [pc, #148]	; (80016b8 <TrimRead+0x1b8>)
 8001624:	7d1b      	ldrb	r3, [r3, #20]
 8001626:	b21b      	sxth	r3, r3
 8001628:	4313      	orrs	r3, r2
 800162a:	b21a      	sxth	r2, r3
 800162c:	4b2f      	ldr	r3, [pc, #188]	; (80016ec <TrimRead+0x1ec>)
 800162e:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 8001630:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <TrimRead+0x1b8>)
 8001632:	7ddb      	ldrb	r3, [r3, #23]
 8001634:	021b      	lsls	r3, r3, #8
 8001636:	b21a      	sxth	r2, r3
 8001638:	4b1f      	ldr	r3, [pc, #124]	; (80016b8 <TrimRead+0x1b8>)
 800163a:	7d9b      	ldrb	r3, [r3, #22]
 800163c:	b21b      	sxth	r3, r3
 800163e:	4313      	orrs	r3, r2
 8001640:	b21a      	sxth	r2, r3
 8001642:	4b2b      	ldr	r3, [pc, #172]	; (80016f0 <TrimRead+0x1f0>)
 8001644:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 8001646:	4b1c      	ldr	r3, [pc, #112]	; (80016b8 <TrimRead+0x1b8>)
 8001648:	7e1b      	ldrb	r3, [r3, #24]
 800164a:	b29a      	uxth	r2, r3
 800164c:	4b29      	ldr	r3, [pc, #164]	; (80016f4 <TrimRead+0x1f4>)
 800164e:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 8001650:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <TrimRead+0x1b8>)
 8001652:	7e9b      	ldrb	r3, [r3, #26]
 8001654:	021b      	lsls	r3, r3, #8
 8001656:	b21a      	sxth	r2, r3
 8001658:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <TrimRead+0x1b8>)
 800165a:	7e5b      	ldrb	r3, [r3, #25]
 800165c:	b21b      	sxth	r3, r3
 800165e:	4313      	orrs	r3, r2
 8001660:	b21a      	sxth	r2, r3
 8001662:	4b25      	ldr	r3, [pc, #148]	; (80016f8 <TrimRead+0x1f8>)
 8001664:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 8001666:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <TrimRead+0x1b8>)
 8001668:	7edb      	ldrb	r3, [r3, #27]
 800166a:	b29a      	uxth	r2, r3
 800166c:	4b23      	ldr	r3, [pc, #140]	; (80016fc <TrimRead+0x1fc>)
 800166e:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <TrimRead+0x1b8>)
 8001672:	7f1b      	ldrb	r3, [r3, #28]
 8001674:	011b      	lsls	r3, r3, #4
 8001676:	b21a      	sxth	r2, r3
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <TrimRead+0x1b8>)
 800167a:	7f5b      	ldrb	r3, [r3, #29]
 800167c:	b21b      	sxth	r3, r3
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	b21b      	sxth	r3, r3
 8001684:	4313      	orrs	r3, r2
 8001686:	b21a      	sxth	r2, r3
 8001688:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <TrimRead+0x200>)
 800168a:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 800168c:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <TrimRead+0x1b8>)
 800168e:	7f9b      	ldrb	r3, [r3, #30]
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	b21a      	sxth	r2, r3
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <TrimRead+0x1b8>)
 8001696:	7f5b      	ldrb	r3, [r3, #29]
 8001698:	091b      	lsrs	r3, r3, #4
 800169a:	b2db      	uxtb	r3, r3
 800169c:	b21b      	sxth	r3, r3
 800169e:	4313      	orrs	r3, r2
 80016a0:	b21a      	sxth	r2, r3
 80016a2:	4b18      	ldr	r3, [pc, #96]	; (8001704 <TrimRead+0x204>)
 80016a4:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 80016a6:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <TrimRead+0x1b8>)
 80016a8:	7fdb      	ldrb	r3, [r3, #31]
 80016aa:	b21a      	sxth	r2, r3
 80016ac:	4b16      	ldr	r3, [pc, #88]	; (8001708 <TrimRead+0x208>)
 80016ae:	801a      	strh	r2, [r3, #0]
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000568 	.word	0x20000568
 80016bc:	20000668 	.word	0x20000668
 80016c0:	20000581 	.word	0x20000581
 80016c4:	20000588 	.word	0x20000588
 80016c8:	20000590 	.word	0x20000590
 80016cc:	20000592 	.word	0x20000592
 80016d0:	2000058a 	.word	0x2000058a
 80016d4:	20000594 	.word	0x20000594
 80016d8:	20000596 	.word	0x20000596
 80016dc:	20000598 	.word	0x20000598
 80016e0:	2000059a 	.word	0x2000059a
 80016e4:	2000059c 	.word	0x2000059c
 80016e8:	2000059e 	.word	0x2000059e
 80016ec:	200005a0 	.word	0x200005a0
 80016f0:	200005a2 	.word	0x200005a2
 80016f4:	2000058c 	.word	0x2000058c
 80016f8:	200005a4 	.word	0x200005a4
 80016fc:	2000058e 	.word	0x2000058e
 8001700:	200005a6 	.word	0x200005a6
 8001704:	200005a8 	.word	0x200005a8
 8001708:	200005aa 	.word	0x200005aa

0800170c <BME280_Config>:

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 800170c:	b590      	push	{r4, r7, lr}
 800170e:	b089      	sub	sp, #36	; 0x24
 8001710:	af04      	add	r7, sp, #16
 8001712:	4604      	mov	r4, r0
 8001714:	4608      	mov	r0, r1
 8001716:	4611      	mov	r1, r2
 8001718:	461a      	mov	r2, r3
 800171a:	4623      	mov	r3, r4
 800171c:	71fb      	strb	r3, [r7, #7]
 800171e:	4603      	mov	r3, r0
 8001720:	71bb      	strb	r3, [r7, #6]
 8001722:	460b      	mov	r3, r1
 8001724:	717b      	strb	r3, [r7, #5]
 8001726:	4613      	mov	r3, r2
 8001728:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 800172a:	f7ff fee9 	bl	8001500 <TrimRead>

	uint8_t datatowrite = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 8001736:	23b6      	movs	r3, #182	; 0xb6
 8001738:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800173a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173e:	9302      	str	r3, [sp, #8]
 8001740:	2301      	movs	r3, #1
 8001742:	9301      	str	r3, [sp, #4]
 8001744:	f107 030f 	add.w	r3, r7, #15
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	2301      	movs	r3, #1
 800174c:	22e0      	movs	r2, #224	; 0xe0
 800174e:	21ec      	movs	r1, #236	; 0xec
 8001750:	4858      	ldr	r0, [pc, #352]	; (80018b4 <BME280_Config+0x1a8>)
 8001752:	f004 fa5f 	bl	8005c14 <HAL_I2C_Mem_Write>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d002      	beq.n	8001762 <BME280_Config+0x56>
	{
		return -1;
 800175c:	f04f 33ff 	mov.w	r3, #4294967295
 8001760:	e0a3      	b.n	80018aa <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001762:	2064      	movs	r0, #100	; 0x64
 8001764:	f003 f848 	bl	80047f8 <HAL_Delay>

	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 8001768:	797b      	ldrb	r3, [r7, #5]
 800176a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800176c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001770:	9302      	str	r3, [sp, #8]
 8001772:	2301      	movs	r3, #1
 8001774:	9301      	str	r3, [sp, #4]
 8001776:	f107 030f 	add.w	r3, r7, #15
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	2301      	movs	r3, #1
 800177e:	22f2      	movs	r2, #242	; 0xf2
 8001780:	21ec      	movs	r1, #236	; 0xec
 8001782:	484c      	ldr	r0, [pc, #304]	; (80018b4 <BME280_Config+0x1a8>)
 8001784:	f004 fa46 	bl	8005c14 <HAL_I2C_Mem_Write>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d002      	beq.n	8001794 <BME280_Config+0x88>
	{
		return -1;
 800178e:	f04f 33ff 	mov.w	r3, #4294967295
 8001792:	e08a      	b.n	80018aa <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001794:	2064      	movs	r0, #100	; 0x64
 8001796:	f003 f82f 	bl	80047f8 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 800179a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179e:	9302      	str	r3, [sp, #8]
 80017a0:	2301      	movs	r3, #1
 80017a2:	9301      	str	r3, [sp, #4]
 80017a4:	f107 030e 	add.w	r3, r7, #14
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	2301      	movs	r3, #1
 80017ac:	22f2      	movs	r2, #242	; 0xf2
 80017ae:	21ec      	movs	r1, #236	; 0xec
 80017b0:	4840      	ldr	r0, [pc, #256]	; (80018b4 <BME280_Config+0x1a8>)
 80017b2:	f004 fb29 	bl	8005e08 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80017b6:	7bba      	ldrb	r2, [r7, #14]
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d002      	beq.n	80017c4 <BME280_Config+0xb8>
	{
		return -1;
 80017be:	f04f 33ff 	mov.w	r3, #4294967295
 80017c2:	e072      	b.n	80018aa <BME280_Config+0x19e>
	}

	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 80017c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017c8:	015b      	lsls	r3, r3, #5
 80017ca:	b25a      	sxtb	r2, r3
 80017cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	b25b      	sxtb	r3, r3
 80017d4:	4313      	orrs	r3, r2
 80017d6:	b25b      	sxtb	r3, r3
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80017dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e0:	9302      	str	r3, [sp, #8]
 80017e2:	2301      	movs	r3, #1
 80017e4:	9301      	str	r3, [sp, #4]
 80017e6:	f107 030f 	add.w	r3, r7, #15
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	2301      	movs	r3, #1
 80017ee:	22f5      	movs	r2, #245	; 0xf5
 80017f0:	21ec      	movs	r1, #236	; 0xec
 80017f2:	4830      	ldr	r0, [pc, #192]	; (80018b4 <BME280_Config+0x1a8>)
 80017f4:	f004 fa0e 	bl	8005c14 <HAL_I2C_Mem_Write>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d002      	beq.n	8001804 <BME280_Config+0xf8>
	{
		return -1;
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001802:	e052      	b.n	80018aa <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001804:	2064      	movs	r0, #100	; 0x64
 8001806:	f002 fff7 	bl	80047f8 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 800180a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800180e:	9302      	str	r3, [sp, #8]
 8001810:	2301      	movs	r3, #1
 8001812:	9301      	str	r3, [sp, #4]
 8001814:	f107 030e 	add.w	r3, r7, #14
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	2301      	movs	r3, #1
 800181c:	22f5      	movs	r2, #245	; 0xf5
 800181e:	21ec      	movs	r1, #236	; 0xec
 8001820:	4824      	ldr	r0, [pc, #144]	; (80018b4 <BME280_Config+0x1a8>)
 8001822:	f004 faf1 	bl	8005e08 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001826:	7bba      	ldrb	r2, [r7, #14]
 8001828:	7bfb      	ldrb	r3, [r7, #15]
 800182a:	429a      	cmp	r2, r3
 800182c:	d002      	beq.n	8001834 <BME280_Config+0x128>
	{
		return -1;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295
 8001832:	e03a      	b.n	80018aa <BME280_Config+0x19e>
	}
	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	015b      	lsls	r3, r3, #5
 8001838:	b25a      	sxtb	r2, r3
 800183a:	79bb      	ldrb	r3, [r7, #6]
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	b25b      	sxtb	r3, r3
 8001840:	4313      	orrs	r3, r2
 8001842:	b25a      	sxtb	r2, r3
 8001844:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001848:	4313      	orrs	r3, r2
 800184a:	b25b      	sxtb	r3, r3
 800184c:	b2db      	uxtb	r3, r3
 800184e:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001850:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001854:	9302      	str	r3, [sp, #8]
 8001856:	2301      	movs	r3, #1
 8001858:	9301      	str	r3, [sp, #4]
 800185a:	f107 030f 	add.w	r3, r7, #15
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	2301      	movs	r3, #1
 8001862:	22f4      	movs	r2, #244	; 0xf4
 8001864:	21ec      	movs	r1, #236	; 0xec
 8001866:	4813      	ldr	r0, [pc, #76]	; (80018b4 <BME280_Config+0x1a8>)
 8001868:	f004 f9d4 	bl	8005c14 <HAL_I2C_Mem_Write>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d002      	beq.n	8001878 <BME280_Config+0x16c>
	{
		return -1;
 8001872:	f04f 33ff 	mov.w	r3, #4294967295
 8001876:	e018      	b.n	80018aa <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001878:	2064      	movs	r0, #100	; 0x64
 800187a:	f002 ffbd 	bl	80047f8 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 800187e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001882:	9302      	str	r3, [sp, #8]
 8001884:	2301      	movs	r3, #1
 8001886:	9301      	str	r3, [sp, #4]
 8001888:	f107 030e 	add.w	r3, r7, #14
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	2301      	movs	r3, #1
 8001890:	22f4      	movs	r2, #244	; 0xf4
 8001892:	21ec      	movs	r1, #236	; 0xec
 8001894:	4807      	ldr	r0, [pc, #28]	; (80018b4 <BME280_Config+0x1a8>)
 8001896:	f004 fab7 	bl	8005e08 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800189a:	7bba      	ldrb	r2, [r7, #14]
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d002      	beq.n	80018a8 <BME280_Config+0x19c>
	{
		return -1;
 80018a2:	f04f 33ff 	mov.w	r3, #4294967295
 80018a6:	e000      	b.n	80018aa <BME280_Config+0x19e>
	}
	return 0;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd90      	pop	{r4, r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000668 	.word	0x20000668

080018b8 <BMEReadRaw>:

int BMEReadRaw(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c2, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 80018be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c2:	9302      	str	r3, [sp, #8]
 80018c4:	2301      	movs	r3, #1
 80018c6:	9301      	str	r3, [sp, #4]
 80018c8:	4b1e      	ldr	r3, [pc, #120]	; (8001944 <BMEReadRaw+0x8c>)
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	2301      	movs	r3, #1
 80018ce:	22d0      	movs	r2, #208	; 0xd0
 80018d0:	21ec      	movs	r1, #236	; 0xec
 80018d2:	481d      	ldr	r0, [pc, #116]	; (8001948 <BMEReadRaw+0x90>)
 80018d4:	f004 fa98 	bl	8005e08 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 80018d8:	4b1a      	ldr	r3, [pc, #104]	; (8001944 <BMEReadRaw+0x8c>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b60      	cmp	r3, #96	; 0x60
 80018de:	d12a      	bne.n	8001936 <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 80018e0:	f04f 33ff 	mov.w	r3, #4294967295
 80018e4:	9302      	str	r3, [sp, #8]
 80018e6:	2308      	movs	r3, #8
 80018e8:	9301      	str	r3, [sp, #4]
 80018ea:	463b      	mov	r3, r7
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	2301      	movs	r3, #1
 80018f0:	22f7      	movs	r2, #247	; 0xf7
 80018f2:	21ec      	movs	r1, #236	; 0xec
 80018f4:	4814      	ldr	r0, [pc, #80]	; (8001948 <BMEReadRaw+0x90>)
 80018f6:	f004 fa87 	bl	8005e08 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 80018fa:	783b      	ldrb	r3, [r7, #0]
 80018fc:	031a      	lsls	r2, r3, #12
 80018fe:	787b      	ldrb	r3, [r7, #1]
 8001900:	011b      	lsls	r3, r3, #4
 8001902:	4313      	orrs	r3, r2
 8001904:	78ba      	ldrb	r2, [r7, #2]
 8001906:	0912      	lsrs	r2, r2, #4
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	4313      	orrs	r3, r2
 800190c:	4a0f      	ldr	r2, [pc, #60]	; (800194c <BMEReadRaw+0x94>)
 800190e:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8001910:	78fb      	ldrb	r3, [r7, #3]
 8001912:	031a      	lsls	r2, r3, #12
 8001914:	793b      	ldrb	r3, [r7, #4]
 8001916:	011b      	lsls	r3, r3, #4
 8001918:	4313      	orrs	r3, r2
 800191a:	797a      	ldrb	r2, [r7, #5]
 800191c:	0912      	lsrs	r2, r2, #4
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	4313      	orrs	r3, r2
 8001922:	4a0b      	ldr	r2, [pc, #44]	; (8001950 <BMEReadRaw+0x98>)
 8001924:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 8001926:	79bb      	ldrb	r3, [r7, #6]
 8001928:	021b      	lsls	r3, r3, #8
 800192a:	79fa      	ldrb	r2, [r7, #7]
 800192c:	4313      	orrs	r3, r2
 800192e:	4a09      	ldr	r2, [pc, #36]	; (8001954 <BMEReadRaw+0x9c>)
 8001930:	6013      	str	r3, [r2, #0]

		return 0;
 8001932:	2300      	movs	r3, #0
 8001934:	e001      	b.n	800193a <BMEReadRaw+0x82>
	}
	else return -1;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000564 	.word	0x20000564
 8001948:	20000668 	.word	0x20000668
 800194c:	200005b0 	.word	0x200005b0
 8001950:	200005ac 	.word	0x200005ac
 8001954:	200005b4 	.word	0x200005b4

08001958 <BME280_compensate_T_int32>:
	HAL_Delay (100);
}

int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 8001958:	b480      	push	{r7}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	10da      	asrs	r2, r3, #3
 8001964:	4b19      	ldr	r3, [pc, #100]	; (80019cc <BME280_compensate_T_int32+0x74>)
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	4a18      	ldr	r2, [pc, #96]	; (80019d0 <BME280_compensate_T_int32+0x78>)
 800196e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001972:	fb02 f303 	mul.w	r3, r2, r3
 8001976:	12db      	asrs	r3, r3, #11
 8001978:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	111b      	asrs	r3, r3, #4
 800197e:	4a13      	ldr	r2, [pc, #76]	; (80019cc <BME280_compensate_T_int32+0x74>)
 8001980:	8812      	ldrh	r2, [r2, #0]
 8001982:	1a9b      	subs	r3, r3, r2
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	1112      	asrs	r2, r2, #4
 8001988:	4910      	ldr	r1, [pc, #64]	; (80019cc <BME280_compensate_T_int32+0x74>)
 800198a:	8809      	ldrh	r1, [r1, #0]
 800198c:	1a52      	subs	r2, r2, r1
 800198e:	fb02 f303 	mul.w	r3, r2, r3
 8001992:	131b      	asrs	r3, r3, #12
 8001994:	4a0f      	ldr	r2, [pc, #60]	; (80019d4 <BME280_compensate_T_int32+0x7c>)
 8001996:	f9b2 2000 	ldrsh.w	r2, [r2]
 800199a:	fb02 f303 	mul.w	r3, r2, r3
 800199e:	139b      	asrs	r3, r3, #14
 80019a0:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	4413      	add	r3, r2
 80019a8:	4a0b      	ldr	r2, [pc, #44]	; (80019d8 <BME280_compensate_T_int32+0x80>)
 80019aa:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80019ac:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <BME280_compensate_T_int32+0x80>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4613      	mov	r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4413      	add	r3, r2
 80019b6:	3380      	adds	r3, #128	; 0x80
 80019b8:	121b      	asrs	r3, r3, #8
 80019ba:	60fb      	str	r3, [r7, #12]
	return T;
 80019bc:	68fb      	ldr	r3, [r7, #12]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	371c      	adds	r7, #28
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	20000588 	.word	0x20000588
 80019d0:	20000590 	.word	0x20000590
 80019d4:	20000592 	.word	0x20000592
 80019d8:	200005c0 	.word	0x200005c0

080019dc <BME280_compensate_P_int64>:

uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 80019dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019e0:	b0ca      	sub	sp, #296	; 0x128
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80019e8:	4baf      	ldr	r3, [pc, #700]	; (8001ca8 <BME280_compensate_P_int64+0x2cc>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	17da      	asrs	r2, r3, #31
 80019ee:	461c      	mov	r4, r3
 80019f0:	4615      	mov	r5, r2
 80019f2:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80019f6:	f145 3bff 	adc.w	fp, r5, #4294967295
 80019fa:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80019fe:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001a02:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a06:	fb03 f102 	mul.w	r1, r3, r2
 8001a0a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001a0e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a12:	fb02 f303 	mul.w	r3, r2, r3
 8001a16:	18ca      	adds	r2, r1, r3
 8001a18:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a1c:	fba3 8903 	umull	r8, r9, r3, r3
 8001a20:	eb02 0309 	add.w	r3, r2, r9
 8001a24:	4699      	mov	r9, r3
 8001a26:	4ba1      	ldr	r3, [pc, #644]	; (8001cac <BME280_compensate_P_int64+0x2d0>)
 8001a28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a2c:	b21b      	sxth	r3, r3
 8001a2e:	17da      	asrs	r2, r3, #31
 8001a30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001a34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001a38:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	fb03 f209 	mul.w	r2, r3, r9
 8001a42:	460b      	mov	r3, r1
 8001a44:	fb08 f303 	mul.w	r3, r8, r3
 8001a48:	4413      	add	r3, r2
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	fba8 1202 	umull	r1, r2, r8, r2
 8001a50:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001a54:	460a      	mov	r2, r1
 8001a56:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001a5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001a5e:	4413      	add	r3, r2
 8001a60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001a64:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001a68:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 8001a6c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8001a70:	4b8f      	ldr	r3, [pc, #572]	; (8001cb0 <BME280_compensate_P_int64+0x2d4>)
 8001a72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a76:	b21b      	sxth	r3, r3
 8001a78:	17da      	asrs	r2, r3, #31
 8001a7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001a7e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001a82:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a86:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 8001a8a:	462a      	mov	r2, r5
 8001a8c:	fb02 f203 	mul.w	r2, r2, r3
 8001a90:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001a94:	4621      	mov	r1, r4
 8001a96:	fb01 f303 	mul.w	r3, r1, r3
 8001a9a:	441a      	add	r2, r3
 8001a9c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001aa0:	4621      	mov	r1, r4
 8001aa2:	fba3 1301 	umull	r1, r3, r3, r1
 8001aa6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001aaa:	460b      	mov	r3, r1
 8001aac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001ab4:	18d3      	adds	r3, r2, r3
 8001ab6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001aba:	f04f 0000 	mov.w	r0, #0
 8001abe:	f04f 0100 	mov.w	r1, #0
 8001ac2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001ac6:	462b      	mov	r3, r5
 8001ac8:	0459      	lsls	r1, r3, #17
 8001aca:	4623      	mov	r3, r4
 8001acc:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001ad0:	4623      	mov	r3, r4
 8001ad2:	0458      	lsls	r0, r3, #17
 8001ad4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001ad8:	1814      	adds	r4, r2, r0
 8001ada:	643c      	str	r4, [r7, #64]	; 0x40
 8001adc:	414b      	adcs	r3, r1
 8001ade:	647b      	str	r3, [r7, #68]	; 0x44
 8001ae0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001ae4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001ae8:	4b72      	ldr	r3, [pc, #456]	; (8001cb4 <BME280_compensate_P_int64+0x2d8>)
 8001aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aee:	b21b      	sxth	r3, r3
 8001af0:	17da      	asrs	r2, r3, #31
 8001af2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001af6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001afa:	f04f 0000 	mov.w	r0, #0
 8001afe:	f04f 0100 	mov.w	r1, #0
 8001b02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b06:	00d9      	lsls	r1, r3, #3
 8001b08:	2000      	movs	r0, #0
 8001b0a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001b0e:	1814      	adds	r4, r2, r0
 8001b10:	63bc      	str	r4, [r7, #56]	; 0x38
 8001b12:	414b      	adcs	r3, r1
 8001b14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b16:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001b1a:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8001b1e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001b22:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001b26:	fb03 f102 	mul.w	r1, r3, r2
 8001b2a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001b2e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001b32:	fb02 f303 	mul.w	r3, r2, r3
 8001b36:	18ca      	adds	r2, r1, r3
 8001b38:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001b3c:	fba3 1303 	umull	r1, r3, r3, r3
 8001b40:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001b44:	460b      	mov	r3, r1
 8001b46:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b4e:	18d3      	adds	r3, r2, r3
 8001b50:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001b54:	4b58      	ldr	r3, [pc, #352]	; (8001cb8 <BME280_compensate_P_int64+0x2dc>)
 8001b56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b5a:	b21b      	sxth	r3, r3
 8001b5c:	17da      	asrs	r2, r3, #31
 8001b5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001b62:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001b66:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001b6a:	462b      	mov	r3, r5
 8001b6c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001b70:	4642      	mov	r2, r8
 8001b72:	fb02 f203 	mul.w	r2, r2, r3
 8001b76:	464b      	mov	r3, r9
 8001b78:	4621      	mov	r1, r4
 8001b7a:	fb01 f303 	mul.w	r3, r1, r3
 8001b7e:	4413      	add	r3, r2
 8001b80:	4622      	mov	r2, r4
 8001b82:	4641      	mov	r1, r8
 8001b84:	fba2 1201 	umull	r1, r2, r2, r1
 8001b88:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8001b8c:	460a      	mov	r2, r1
 8001b8e:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001b92:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001b96:	4413      	add	r3, r2
 8001b98:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001b9c:	f04f 0000 	mov.w	r0, #0
 8001ba0:	f04f 0100 	mov.w	r1, #0
 8001ba4:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001ba8:	4623      	mov	r3, r4
 8001baa:	0a18      	lsrs	r0, r3, #8
 8001bac:	462b      	mov	r3, r5
 8001bae:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001bb2:	462b      	mov	r3, r5
 8001bb4:	1219      	asrs	r1, r3, #8
 8001bb6:	4b41      	ldr	r3, [pc, #260]	; (8001cbc <BME280_compensate_P_int64+0x2e0>)
 8001bb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bbc:	b21b      	sxth	r3, r3
 8001bbe:	17da      	asrs	r2, r3, #31
 8001bc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001bc4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001bc8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001bcc:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001bd0:	464a      	mov	r2, r9
 8001bd2:	fb02 f203 	mul.w	r2, r2, r3
 8001bd6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001bda:	4644      	mov	r4, r8
 8001bdc:	fb04 f303 	mul.w	r3, r4, r3
 8001be0:	441a      	add	r2, r3
 8001be2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001be6:	4644      	mov	r4, r8
 8001be8:	fba3 4304 	umull	r4, r3, r3, r4
 8001bec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001bf0:	4623      	mov	r3, r4
 8001bf2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001bf6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001bfa:	18d3      	adds	r3, r2, r3
 8001bfc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001c00:	f04f 0200 	mov.w	r2, #0
 8001c04:	f04f 0300 	mov.w	r3, #0
 8001c08:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001c0c:	464c      	mov	r4, r9
 8001c0e:	0323      	lsls	r3, r4, #12
 8001c10:	4644      	mov	r4, r8
 8001c12:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001c16:	4644      	mov	r4, r8
 8001c18:	0322      	lsls	r2, r4, #12
 8001c1a:	1884      	adds	r4, r0, r2
 8001c1c:	633c      	str	r4, [r7, #48]	; 0x30
 8001c1e:	eb41 0303 	adc.w	r3, r1, r3
 8001c22:	637b      	str	r3, [r7, #52]	; 0x34
 8001c24:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001c28:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8001c2c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001c30:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001c34:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001c38:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001c3c:	4b20      	ldr	r3, [pc, #128]	; (8001cc0 <BME280_compensate_P_int64+0x2e4>)
 8001c3e:	881b      	ldrh	r3, [r3, #0]
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	2200      	movs	r2, #0
 8001c44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001c48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001c4c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001c50:	462b      	mov	r3, r5
 8001c52:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001c56:	4642      	mov	r2, r8
 8001c58:	fb02 f203 	mul.w	r2, r2, r3
 8001c5c:	464b      	mov	r3, r9
 8001c5e:	4621      	mov	r1, r4
 8001c60:	fb01 f303 	mul.w	r3, r1, r3
 8001c64:	4413      	add	r3, r2
 8001c66:	4622      	mov	r2, r4
 8001c68:	4641      	mov	r1, r8
 8001c6a:	fba2 1201 	umull	r1, r2, r2, r1
 8001c6e:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001c72:	460a      	mov	r2, r1
 8001c74:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001c78:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001c7c:	4413      	add	r3, r2
 8001c7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	f04f 0300 	mov.w	r3, #0
 8001c8a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001c8e:	4629      	mov	r1, r5
 8001c90:	104a      	asrs	r2, r1, #1
 8001c92:	4629      	mov	r1, r5
 8001c94:	17cb      	asrs	r3, r1, #31
 8001c96:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 8001c9a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	d110      	bne.n	8001cc4 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	e154      	b.n	8001f50 <BME280_compensate_P_int64+0x574>
 8001ca6:	bf00      	nop
 8001ca8:	200005c0 	.word	0x200005c0
 8001cac:	2000059c 	.word	0x2000059c
 8001cb0:	2000059a 	.word	0x2000059a
 8001cb4:	20000598 	.word	0x20000598
 8001cb8:	20000596 	.word	0x20000596
 8001cbc:	20000594 	.word	0x20000594
 8001cc0:	2000058a 	.word	0x2000058a
	}
	p = 1048576-adc_P;
 8001cc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001cc8:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001ccc:	17da      	asrs	r2, r3, #31
 8001cce:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cd2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001cd6:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8001cda:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001cde:	105b      	asrs	r3, r3, #1
 8001ce0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001ce4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001ce8:	07db      	lsls	r3, r3, #31
 8001cea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001cee:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001cf2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001cf6:	4621      	mov	r1, r4
 8001cf8:	1a89      	subs	r1, r1, r2
 8001cfa:	67b9      	str	r1, [r7, #120]	; 0x78
 8001cfc:	4629      	mov	r1, r5
 8001cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8001d02:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001d04:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001d08:	4622      	mov	r2, r4
 8001d0a:	462b      	mov	r3, r5
 8001d0c:	1891      	adds	r1, r2, r2
 8001d0e:	6239      	str	r1, [r7, #32]
 8001d10:	415b      	adcs	r3, r3
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
 8001d14:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d18:	4621      	mov	r1, r4
 8001d1a:	1851      	adds	r1, r2, r1
 8001d1c:	61b9      	str	r1, [r7, #24]
 8001d1e:	4629      	mov	r1, r5
 8001d20:	414b      	adcs	r3, r1
 8001d22:	61fb      	str	r3, [r7, #28]
 8001d24:	f04f 0200 	mov.w	r2, #0
 8001d28:	f04f 0300 	mov.w	r3, #0
 8001d2c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001d30:	4649      	mov	r1, r9
 8001d32:	018b      	lsls	r3, r1, #6
 8001d34:	4641      	mov	r1, r8
 8001d36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d3a:	4641      	mov	r1, r8
 8001d3c:	018a      	lsls	r2, r1, #6
 8001d3e:	4641      	mov	r1, r8
 8001d40:	1889      	adds	r1, r1, r2
 8001d42:	6139      	str	r1, [r7, #16]
 8001d44:	4649      	mov	r1, r9
 8001d46:	eb43 0101 	adc.w	r1, r3, r1
 8001d4a:	6179      	str	r1, [r7, #20]
 8001d4c:	f04f 0200 	mov.w	r2, #0
 8001d50:	f04f 0300 	mov.w	r3, #0
 8001d54:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001d58:	4649      	mov	r1, r9
 8001d5a:	008b      	lsls	r3, r1, #2
 8001d5c:	4641      	mov	r1, r8
 8001d5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d62:	4641      	mov	r1, r8
 8001d64:	008a      	lsls	r2, r1, #2
 8001d66:	4610      	mov	r0, r2
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	4622      	mov	r2, r4
 8001d6e:	189b      	adds	r3, r3, r2
 8001d70:	60bb      	str	r3, [r7, #8]
 8001d72:	460b      	mov	r3, r1
 8001d74:	462a      	mov	r2, r5
 8001d76:	eb42 0303 	adc.w	r3, r2, r3
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	f04f 0200 	mov.w	r2, #0
 8001d80:	f04f 0300 	mov.w	r3, #0
 8001d84:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001d88:	4649      	mov	r1, r9
 8001d8a:	008b      	lsls	r3, r1, #2
 8001d8c:	4641      	mov	r1, r8
 8001d8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d92:	4641      	mov	r1, r8
 8001d94:	008a      	lsls	r2, r1, #2
 8001d96:	4610      	mov	r0, r2
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4622      	mov	r2, r4
 8001d9e:	189b      	adds	r3, r3, r2
 8001da0:	673b      	str	r3, [r7, #112]	; 0x70
 8001da2:	462b      	mov	r3, r5
 8001da4:	460a      	mov	r2, r1
 8001da6:	eb42 0303 	adc.w	r3, r2, r3
 8001daa:	677b      	str	r3, [r7, #116]	; 0x74
 8001dac:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001db0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001db4:	f7fe ff30 	bl	8000c18 <__aeabi_ldivmod>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001dc0:	4b66      	ldr	r3, [pc, #408]	; (8001f5c <BME280_compensate_P_int64+0x580>)
 8001dc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc6:	b21b      	sxth	r3, r3
 8001dc8:	17da      	asrs	r2, r3, #31
 8001dca:	66bb      	str	r3, [r7, #104]	; 0x68
 8001dcc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001dce:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001dd2:	f04f 0000 	mov.w	r0, #0
 8001dd6:	f04f 0100 	mov.w	r1, #0
 8001dda:	0b50      	lsrs	r0, r2, #13
 8001ddc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001de0:	1359      	asrs	r1, r3, #13
 8001de2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001de6:	462b      	mov	r3, r5
 8001de8:	fb00 f203 	mul.w	r2, r0, r3
 8001dec:	4623      	mov	r3, r4
 8001dee:	fb03 f301 	mul.w	r3, r3, r1
 8001df2:	4413      	add	r3, r2
 8001df4:	4622      	mov	r2, r4
 8001df6:	fba2 1200 	umull	r1, r2, r2, r0
 8001dfa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001dfe:	460a      	mov	r2, r1
 8001e00:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001e04:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001e08:	4413      	add	r3, r2
 8001e0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001e0e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001e12:	f04f 0000 	mov.w	r0, #0
 8001e16:	f04f 0100 	mov.w	r1, #0
 8001e1a:	0b50      	lsrs	r0, r2, #13
 8001e1c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001e20:	1359      	asrs	r1, r3, #13
 8001e22:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001e26:	462b      	mov	r3, r5
 8001e28:	fb00 f203 	mul.w	r2, r0, r3
 8001e2c:	4623      	mov	r3, r4
 8001e2e:	fb03 f301 	mul.w	r3, r3, r1
 8001e32:	4413      	add	r3, r2
 8001e34:	4622      	mov	r2, r4
 8001e36:	fba2 1200 	umull	r1, r2, r2, r0
 8001e3a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001e3e:	460a      	mov	r2, r1
 8001e40:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001e44:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001e48:	4413      	add	r3, r2
 8001e4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	f04f 0300 	mov.w	r3, #0
 8001e56:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001e5a:	4621      	mov	r1, r4
 8001e5c:	0e4a      	lsrs	r2, r1, #25
 8001e5e:	4629      	mov	r1, r5
 8001e60:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001e64:	4629      	mov	r1, r5
 8001e66:	164b      	asrs	r3, r1, #25
 8001e68:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001e6c:	4b3c      	ldr	r3, [pc, #240]	; (8001f60 <BME280_compensate_P_int64+0x584>)
 8001e6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e72:	b21b      	sxth	r3, r3
 8001e74:	17da      	asrs	r2, r3, #31
 8001e76:	663b      	str	r3, [r7, #96]	; 0x60
 8001e78:	667a      	str	r2, [r7, #100]	; 0x64
 8001e7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001e7e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001e82:	462a      	mov	r2, r5
 8001e84:	fb02 f203 	mul.w	r2, r2, r3
 8001e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001e8c:	4621      	mov	r1, r4
 8001e8e:	fb01 f303 	mul.w	r3, r1, r3
 8001e92:	4413      	add	r3, r2
 8001e94:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001e98:	4621      	mov	r1, r4
 8001e9a:	fba2 1201 	umull	r1, r2, r2, r1
 8001e9e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001ea2:	460a      	mov	r2, r1
 8001ea4:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001ea8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001eac:	4413      	add	r3, r2
 8001eae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001eb2:	f04f 0200 	mov.w	r2, #0
 8001eb6:	f04f 0300 	mov.w	r3, #0
 8001eba:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001ebe:	4621      	mov	r1, r4
 8001ec0:	0cca      	lsrs	r2, r1, #19
 8001ec2:	4629      	mov	r1, r5
 8001ec4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001ec8:	4629      	mov	r1, r5
 8001eca:	14cb      	asrs	r3, r1, #19
 8001ecc:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001ed0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001ed4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001ed8:	1884      	adds	r4, r0, r2
 8001eda:	65bc      	str	r4, [r7, #88]	; 0x58
 8001edc:	eb41 0303 	adc.w	r3, r1, r3
 8001ee0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ee2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001ee6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001eea:	4621      	mov	r1, r4
 8001eec:	1889      	adds	r1, r1, r2
 8001eee:	6539      	str	r1, [r7, #80]	; 0x50
 8001ef0:	4629      	mov	r1, r5
 8001ef2:	eb43 0101 	adc.w	r1, r3, r1
 8001ef6:	6579      	str	r1, [r7, #84]	; 0x54
 8001ef8:	f04f 0000 	mov.w	r0, #0
 8001efc:	f04f 0100 	mov.w	r1, #0
 8001f00:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001f04:	4623      	mov	r3, r4
 8001f06:	0a18      	lsrs	r0, r3, #8
 8001f08:	462b      	mov	r3, r5
 8001f0a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001f0e:	462b      	mov	r3, r5
 8001f10:	1219      	asrs	r1, r3, #8
 8001f12:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <BME280_compensate_P_int64+0x588>)
 8001f14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f18:	b21b      	sxth	r3, r3
 8001f1a:	17da      	asrs	r2, r3, #31
 8001f1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f1e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001f20:	f04f 0200 	mov.w	r2, #0
 8001f24:	f04f 0300 	mov.w	r3, #0
 8001f28:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001f2c:	464c      	mov	r4, r9
 8001f2e:	0123      	lsls	r3, r4, #4
 8001f30:	4644      	mov	r4, r8
 8001f32:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001f36:	4644      	mov	r4, r8
 8001f38:	0122      	lsls	r2, r4, #4
 8001f3a:	1884      	adds	r4, r0, r2
 8001f3c:	603c      	str	r4, [r7, #0]
 8001f3e:	eb41 0303 	adc.w	r3, r1, r3
 8001f42:	607b      	str	r3, [r7, #4]
 8001f44:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001f48:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8001f4c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001f56:	46bd      	mov	sp, r7
 8001f58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f5c:	200005a2 	.word	0x200005a2
 8001f60:	200005a0 	.word	0x200005a0
 8001f64:	2000059e 	.word	0x2000059e

08001f68 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of â€œ47445â€ represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001f70:	4b2c      	ldr	r3, [pc, #176]	; (8002024 <bme280_compensate_H_int32+0xbc>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001f78:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	039a      	lsls	r2, r3, #14
 8001f7e:	4b2a      	ldr	r3, [pc, #168]	; (8002028 <bme280_compensate_H_int32+0xc0>)
 8001f80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f84:	051b      	lsls	r3, r3, #20
 8001f86:	1ad2      	subs	r2, r2, r3
 8001f88:	4b28      	ldr	r3, [pc, #160]	; (800202c <bme280_compensate_H_int32+0xc4>)
 8001f8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f8e:	4619      	mov	r1, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	fb01 f303 	mul.w	r3, r1, r3
 8001f96:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001f98:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001f9c:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001f9e:	4a24      	ldr	r2, [pc, #144]	; (8002030 <bme280_compensate_H_int32+0xc8>)
 8001fa0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001fa4:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001fac:	1292      	asrs	r2, r2, #10
 8001fae:	4921      	ldr	r1, [pc, #132]	; (8002034 <bme280_compensate_H_int32+0xcc>)
 8001fb0:	8809      	ldrh	r1, [r1, #0]
 8001fb2:	4608      	mov	r0, r1
 8001fb4:	68f9      	ldr	r1, [r7, #12]
 8001fb6:	fb00 f101 	mul.w	r1, r0, r1
 8001fba:	12c9      	asrs	r1, r1, #11
 8001fbc:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001fc0:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001fc4:	1292      	asrs	r2, r2, #10
 8001fc6:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8001fca:	491b      	ldr	r1, [pc, #108]	; (8002038 <bme280_compensate_H_int32+0xd0>)
 8001fcc:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001fd0:	fb01 f202 	mul.w	r2, r1, r2
 8001fd4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001fd8:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001fda:	fb02 f303 	mul.w	r3, r2, r3
 8001fde:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	13db      	asrs	r3, r3, #15
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	13d2      	asrs	r2, r2, #15
 8001fe8:	fb02 f303 	mul.w	r3, r2, r3
 8001fec:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001fee:	4a13      	ldr	r2, [pc, #76]	; (800203c <bme280_compensate_H_int32+0xd4>)
 8001ff0:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001ff2:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001ff6:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002004:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 800200c:	bfa8      	it	ge
 800200e:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8002012:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	131b      	asrs	r3, r3, #12
}
 8002018:	4618      	mov	r0, r3
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	200005c0 	.word	0x200005c0
 8002028:	200005a6 	.word	0x200005a6
 800202c:	200005a8 	.word	0x200005a8
 8002030:	200005aa 	.word	0x200005aa
 8002034:	2000058e 	.word	0x2000058e
 8002038:	200005a4 	.word	0x200005a4
 800203c:	2000058c 	.word	0x2000058c

08002040 <BME280_Pressure>:

//Pressure Measurment
double BME280_Pressure (void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8002044:	f7ff fc38 	bl	80018b8 <BMEReadRaw>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d121      	bne.n	8002092 <BME280_Pressure+0x52>
	{
		  if (pRaw == 0x800000)
 800204e:	4b1a      	ldr	r3, [pc, #104]	; (80020b8 <BME280_Pressure+0x78>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002056:	d104      	bne.n	8002062 <BME280_Pressure+0x22>
		  {
			  Pressure = 0; // value in case temp measurement was disabled
 8002058:	4b18      	ldr	r3, [pc, #96]	; (80020bc <BME280_Pressure+0x7c>)
 800205a:	f04f 0200 	mov.w	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	e01b      	b.n	800209a <BME280_Pressure+0x5a>
		  }
		  else
		  {
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8002062:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <BME280_Pressure+0x78>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fcb8 	bl	80019dc <BME280_compensate_P_int64>
 800206c:	4603      	mov	r3, r0
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fa58 	bl	8000524 <__aeabi_ui2d>
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <BME280_Pressure+0x80>)
 800207a:	f7fe fbf7 	bl	800086c <__aeabi_ddiv>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	4610      	mov	r0, r2
 8002084:	4619      	mov	r1, r3
 8002086:	f7fe fd77 	bl	8000b78 <__aeabi_d2f>
 800208a:	4603      	mov	r3, r0
 800208c:	4a0b      	ldr	r2, [pc, #44]	; (80020bc <BME280_Pressure+0x7c>)
 800208e:	6013      	str	r3, [r2, #0]
 8002090:	e003      	b.n	800209a <BME280_Pressure+0x5a>
		  }
	}
	else
	{
		Pressure = 0;
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <BME280_Pressure+0x7c>)
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
	}
	return Pressure;
 800209a:	4b08      	ldr	r3, [pc, #32]	; (80020bc <BME280_Pressure+0x7c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe fa62 	bl	8000568 <__aeabi_f2d>
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	ec43 2b17 	vmov	d7, r2, r3
}
 80020ac:	eeb0 0a47 	vmov.f32	s0, s14
 80020b0:	eef0 0a67 	vmov.f32	s1, s15
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	200005b0 	.word	0x200005b0
 80020bc:	20000a7c 	.word	0x20000a7c
 80020c0:	40700000 	.word	0x40700000

080020c4 <BME280_Humidity>:

//Humidity Measurment
double BME280_Humidity (void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 80020c8:	f7ff fbf6 	bl	80018b8 <BMEReadRaw>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d121      	bne.n	8002116 <BME280_Humidity+0x52>
	{
		if (hRaw == 0x8000)
 80020d2:	4b1a      	ldr	r3, [pc, #104]	; (800213c <BME280_Humidity+0x78>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020da:	d104      	bne.n	80020e6 <BME280_Humidity+0x22>
		{
			Humidity = 0; // value in case temp measurement was disabled
 80020dc:	4b18      	ldr	r3, [pc, #96]	; (8002140 <BME280_Humidity+0x7c>)
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	e01b      	b.n	800211e <BME280_Humidity+0x5a>
		}
		else
		{
			Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 80020e6:	4b15      	ldr	r3, [pc, #84]	; (800213c <BME280_Humidity+0x78>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff ff3c 	bl	8001f68 <bme280_compensate_H_int32>
 80020f0:	4603      	mov	r3, r0
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe fa16 	bl	8000524 <__aeabi_ui2d>
 80020f8:	f04f 0200 	mov.w	r2, #0
 80020fc:	4b11      	ldr	r3, [pc, #68]	; (8002144 <BME280_Humidity+0x80>)
 80020fe:	f7fe fbb5 	bl	800086c <__aeabi_ddiv>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4610      	mov	r0, r2
 8002108:	4619      	mov	r1, r3
 800210a:	f7fe fd35 	bl	8000b78 <__aeabi_d2f>
 800210e:	4603      	mov	r3, r0
 8002110:	4a0b      	ldr	r2, [pc, #44]	; (8002140 <BME280_Humidity+0x7c>)
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	e003      	b.n	800211e <BME280_Humidity+0x5a>
		}
	}
	else
	{
		Humidity = 0;
 8002116:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <BME280_Humidity+0x7c>)
 8002118:	f04f 0200 	mov.w	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
	}

	return Humidity;
 800211e:	4b08      	ldr	r3, [pc, #32]	; (8002140 <BME280_Humidity+0x7c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe fa20 	bl	8000568 <__aeabi_f2d>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	ec43 2b17 	vmov	d7, r2, r3
}
 8002130:	eeb0 0a47 	vmov.f32	s0, s14
 8002134:	eef0 0a67 	vmov.f32	s1, s15
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	200005b4 	.word	0x200005b4
 8002140:	20000a80 	.word	0x20000a80
 8002144:	40900000 	.word	0x40900000

08002148 <BME280_Temperature>:

//Temperature Measurment
double BME280_Temperature(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 800214c:	f7ff fbb4 	bl	80018b8 <BMEReadRaw>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d121      	bne.n	800219a <BME280_Temperature+0x52>
	{
		if (tRaw == 0x800000)
 8002156:	4b1a      	ldr	r3, [pc, #104]	; (80021c0 <BME280_Temperature+0x78>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800215e:	d104      	bne.n	800216a <BME280_Temperature+0x22>
		{
			Temperature = 0; // value in case temp measurement was disabled
 8002160:	4b18      	ldr	r3, [pc, #96]	; (80021c4 <BME280_Temperature+0x7c>)
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	e01b      	b.n	80021a2 <BME280_Temperature+0x5a>
		}
		else
		{
			Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 800216a:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <BME280_Temperature+0x78>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fbf2 	bl	8001958 <BME280_compensate_T_int32>
 8002174:	4603      	mov	r3, r0
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe f9e4 	bl	8000544 <__aeabi_i2d>
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <BME280_Temperature+0x80>)
 8002182:	f7fe fb73 	bl	800086c <__aeabi_ddiv>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4610      	mov	r0, r2
 800218c:	4619      	mov	r1, r3
 800218e:	f7fe fcf3 	bl	8000b78 <__aeabi_d2f>
 8002192:	4603      	mov	r3, r0
 8002194:	4a0b      	ldr	r2, [pc, #44]	; (80021c4 <BME280_Temperature+0x7c>)
 8002196:	6013      	str	r3, [r2, #0]
 8002198:	e003      	b.n	80021a2 <BME280_Temperature+0x5a>
		}
	}
	else
	{
		Temperature = 0;
 800219a:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <BME280_Temperature+0x7c>)
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
	}
	return Temperature;
 80021a2:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <BME280_Temperature+0x7c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe f9de 	bl	8000568 <__aeabi_f2d>
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	ec43 2b17 	vmov	d7, r2, r3
}
 80021b4:	eeb0 0a47 	vmov.f32	s0, s14
 80021b8:	eef0 0a67 	vmov.f32	s1, s15
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	200005ac 	.word	0x200005ac
 80021c4:	20000a78 	.word	0x20000a78
 80021c8:	40590000 	.word	0x40590000
 80021cc:	00000000 	.word	0x00000000

080021d0 <BME280_Altitude>:

float BME280_Altitude(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
	PressValue = BME280_Pressure();
 80021d4:	f7ff ff34 	bl	8002040 <BME280_Pressure>
 80021d8:	ec53 2b10 	vmov	r2, r3, d0
 80021dc:	4610      	mov	r0, r2
 80021de:	4619      	mov	r1, r3
 80021e0:	f7fe fcca 	bl	8000b78 <__aeabi_d2f>
 80021e4:	4603      	mov	r3, r0
 80021e6:	4a24      	ldr	r2, [pc, #144]	; (8002278 <BME280_Altitude+0xa8>)
 80021e8:	6013      	str	r3, [r2, #0]
	PressValue = PressValue/100;
 80021ea:	4b23      	ldr	r3, [pc, #140]	; (8002278 <BME280_Altitude+0xa8>)
 80021ec:	ed93 7a00 	vldr	s14, [r3]
 80021f0:	eddf 6a22 	vldr	s13, [pc, #136]	; 800227c <BME280_Altitude+0xac>
 80021f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021f8:	4b1f      	ldr	r3, [pc, #124]	; (8002278 <BME280_Altitude+0xa8>)
 80021fa:	edc3 7a00 	vstr	s15, [r3]
	Altitude = 44330*(1.0-pow(PressValue/SeaLevel, 0.19029495718));
 80021fe:	4b1e      	ldr	r3, [pc, #120]	; (8002278 <BME280_Altitude+0xa8>)
 8002200:	ed93 7a00 	vldr	s14, [r3]
 8002204:	4b1e      	ldr	r3, [pc, #120]	; (8002280 <BME280_Altitude+0xb0>)
 8002206:	edd3 7a00 	vldr	s15, [r3]
 800220a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800220e:	ee16 0a90 	vmov	r0, s13
 8002212:	f7fe f9a9 	bl	8000568 <__aeabi_f2d>
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8002268 <BME280_Altitude+0x98>
 800221e:	ec43 2b10 	vmov	d0, r2, r3
 8002222:	f00e f86b 	bl	80102fc <pow>
 8002226:	ec53 2b10 	vmov	r2, r3, d0
 800222a:	f04f 0000 	mov.w	r0, #0
 800222e:	4915      	ldr	r1, [pc, #84]	; (8002284 <BME280_Altitude+0xb4>)
 8002230:	f7fe f83a 	bl	80002a8 <__aeabi_dsub>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	4610      	mov	r0, r2
 800223a:	4619      	mov	r1, r3
 800223c:	a30c      	add	r3, pc, #48	; (adr r3, 8002270 <BME280_Altitude+0xa0>)
 800223e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002242:	f7fe f9e9 	bl	8000618 <__aeabi_dmul>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	4610      	mov	r0, r2
 800224c:	4619      	mov	r1, r3
 800224e:	f7fe fc93 	bl	8000b78 <__aeabi_d2f>
 8002252:	4603      	mov	r3, r0
 8002254:	4a0c      	ldr	r2, [pc, #48]	; (8002288 <BME280_Altitude+0xb8>)
 8002256:	6013      	str	r3, [r2, #0]
	return Altitude;
 8002258:	4b0b      	ldr	r3, [pc, #44]	; (8002288 <BME280_Altitude+0xb8>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	ee07 3a90 	vmov	s15, r3
}
 8002260:	eeb0 0a67 	vmov.f32	s0, s15
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	ccd745e4 	.word	0xccd745e4
 800226c:	3fc85b95 	.word	0x3fc85b95
 8002270:	00000000 	.word	0x00000000
 8002274:	40e5a540 	.word	0x40e5a540
 8002278:	200005bc 	.word	0x200005bc
 800227c:	42c80000 	.word	0x42c80000
 8002280:	20000000 	.word	0x20000000
 8002284:	3ff00000 	.word	0x3ff00000
 8002288:	200005b8 	.word	0x200005b8

0800228c <BME280_Kalman_Alt>:

float BME280_Kalman_Alt(double U0)
{
 800228c:	b5b0      	push	{r4, r5, r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	ed87 0b00 	vstr	d0, [r7]
	static double Q0 = 10; //initial estimated covariance
	static double P0 = 0; //initial error covariance (it must be 0)
	static double U0_hat = 0; //initial estimated state
	static double K0 = 0; //initial kalman gain

	U0 = BME280_Altitude();
 8002296:	f7ff ff9b 	bl	80021d0 <BME280_Altitude>
 800229a:	ee10 3a10 	vmov	r3, s0
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe f962 	bl	8000568 <__aeabi_f2d>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	e9c7 2300 	strd	r2, r3, [r7]
	K0 = P0 * H0 / (H0 * P0 * H0 + R0);
 80022ac:	4b45      	ldr	r3, [pc, #276]	; (80023c4 <BME280_Kalman_Alt+0x138>)
 80022ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022b2:	4b45      	ldr	r3, [pc, #276]	; (80023c8 <BME280_Kalman_Alt+0x13c>)
 80022b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b8:	f7fe f9ae 	bl	8000618 <__aeabi_dmul>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4614      	mov	r4, r2
 80022c2:	461d      	mov	r5, r3
 80022c4:	4b40      	ldr	r3, [pc, #256]	; (80023c8 <BME280_Kalman_Alt+0x13c>)
 80022c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022ca:	4b3e      	ldr	r3, [pc, #248]	; (80023c4 <BME280_Kalman_Alt+0x138>)
 80022cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d0:	f7fe f9a2 	bl	8000618 <__aeabi_dmul>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4610      	mov	r0, r2
 80022da:	4619      	mov	r1, r3
 80022dc:	4b3a      	ldr	r3, [pc, #232]	; (80023c8 <BME280_Kalman_Alt+0x13c>)
 80022de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e2:	f7fe f999 	bl	8000618 <__aeabi_dmul>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	4610      	mov	r0, r2
 80022ec:	4619      	mov	r1, r3
 80022ee:	4b37      	ldr	r3, [pc, #220]	; (80023cc <BME280_Kalman_Alt+0x140>)
 80022f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f4:	f7fd ffda 	bl	80002ac <__adddf3>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	4620      	mov	r0, r4
 80022fe:	4629      	mov	r1, r5
 8002300:	f7fe fab4 	bl	800086c <__aeabi_ddiv>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4931      	ldr	r1, [pc, #196]	; (80023d0 <BME280_Kalman_Alt+0x144>)
 800230a:	e9c1 2300 	strd	r2, r3, [r1]
	U0_hat = U0_hat + K0 * (U0 - H0 * U0_hat);
 800230e:	4b2e      	ldr	r3, [pc, #184]	; (80023c8 <BME280_Kalman_Alt+0x13c>)
 8002310:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002314:	4b2f      	ldr	r3, [pc, #188]	; (80023d4 <BME280_Kalman_Alt+0x148>)
 8002316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231a:	f7fe f97d 	bl	8000618 <__aeabi_dmul>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002326:	f7fd ffbf 	bl	80002a8 <__aeabi_dsub>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	4610      	mov	r0, r2
 8002330:	4619      	mov	r1, r3
 8002332:	4b27      	ldr	r3, [pc, #156]	; (80023d0 <BME280_Kalman_Alt+0x144>)
 8002334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002338:	f7fe f96e 	bl	8000618 <__aeabi_dmul>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	4610      	mov	r0, r2
 8002342:	4619      	mov	r1, r3
 8002344:	4b23      	ldr	r3, [pc, #140]	; (80023d4 <BME280_Kalman_Alt+0x148>)
 8002346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234a:	f7fd ffaf 	bl	80002ac <__adddf3>
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	4920      	ldr	r1, [pc, #128]	; (80023d4 <BME280_Kalman_Alt+0x148>)
 8002354:	e9c1 2300 	strd	r2, r3, [r1]
	P0 = (1 - K0 * H0) * P0 + Q0;
 8002358:	4b1d      	ldr	r3, [pc, #116]	; (80023d0 <BME280_Kalman_Alt+0x144>)
 800235a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800235e:	4b1a      	ldr	r3, [pc, #104]	; (80023c8 <BME280_Kalman_Alt+0x13c>)
 8002360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002364:	f7fe f958 	bl	8000618 <__aeabi_dmul>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	f04f 0000 	mov.w	r0, #0
 8002370:	4919      	ldr	r1, [pc, #100]	; (80023d8 <BME280_Kalman_Alt+0x14c>)
 8002372:	f7fd ff99 	bl	80002a8 <__aeabi_dsub>
 8002376:	4602      	mov	r2, r0
 8002378:	460b      	mov	r3, r1
 800237a:	4610      	mov	r0, r2
 800237c:	4619      	mov	r1, r3
 800237e:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <BME280_Kalman_Alt+0x138>)
 8002380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002384:	f7fe f948 	bl	8000618 <__aeabi_dmul>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4610      	mov	r0, r2
 800238e:	4619      	mov	r1, r3
 8002390:	4b12      	ldr	r3, [pc, #72]	; (80023dc <BME280_Kalman_Alt+0x150>)
 8002392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002396:	f7fd ff89 	bl	80002ac <__adddf3>
 800239a:	4602      	mov	r2, r0
 800239c:	460b      	mov	r3, r1
 800239e:	4909      	ldr	r1, [pc, #36]	; (80023c4 <BME280_Kalman_Alt+0x138>)
 80023a0:	e9c1 2300 	strd	r2, r3, [r1]
	return U0_hat;
 80023a4:	4b0b      	ldr	r3, [pc, #44]	; (80023d4 <BME280_Kalman_Alt+0x148>)
 80023a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023aa:	4610      	mov	r0, r2
 80023ac:	4619      	mov	r1, r3
 80023ae:	f7fe fbe3 	bl	8000b78 <__aeabi_d2f>
 80023b2:	4603      	mov	r3, r0
 80023b4:	ee07 3a90 	vmov	s15, r3
}
 80023b8:	eeb0 0a67 	vmov.f32	s0, s15
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bdb0      	pop	{r4, r5, r7, pc}
 80023c2:	bf00      	nop
 80023c4:	200005c8 	.word	0x200005c8
 80023c8:	08011898 	.word	0x08011898
 80023cc:	080118a0 	.word	0x080118a0
 80023d0:	200005d0 	.word	0x200005d0
 80023d4:	200005d8 	.word	0x200005d8
 80023d8:	3ff00000 	.word	0x3ff00000
 80023dc:	20000008 	.word	0x20000008

080023e0 <BME280_Kalman_Press>:

double BME280_Kalman_Press(double U1)
{
 80023e0:	b5b0      	push	{r4, r5, r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	ed87 0b00 	vstr	d0, [r7]
	static double Q1 = 10; //initial estimated covariance
	static double P1 = 0; //initial error covariance (it must be 0)
	static double U1_hat = 100000; //initial estimated state
	static double K1 = 0; //initial kalman gain

	U1 = BME280_Pressure();
 80023ea:	f7ff fe29 	bl	8002040 <BME280_Pressure>
 80023ee:	ed87 0b00 	vstr	d0, [r7]
	K1 = P1 * H1 / (H1 * P1 * H1 + R1);
 80023f2:	4b44      	ldr	r3, [pc, #272]	; (8002504 <BME280_Kalman_Press+0x124>)
 80023f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023f8:	4b43      	ldr	r3, [pc, #268]	; (8002508 <BME280_Kalman_Press+0x128>)
 80023fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fe:	f7fe f90b 	bl	8000618 <__aeabi_dmul>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	4614      	mov	r4, r2
 8002408:	461d      	mov	r5, r3
 800240a:	4b3f      	ldr	r3, [pc, #252]	; (8002508 <BME280_Kalman_Press+0x128>)
 800240c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002410:	4b3c      	ldr	r3, [pc, #240]	; (8002504 <BME280_Kalman_Press+0x124>)
 8002412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002416:	f7fe f8ff 	bl	8000618 <__aeabi_dmul>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4610      	mov	r0, r2
 8002420:	4619      	mov	r1, r3
 8002422:	4b39      	ldr	r3, [pc, #228]	; (8002508 <BME280_Kalman_Press+0x128>)
 8002424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002428:	f7fe f8f6 	bl	8000618 <__aeabi_dmul>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4610      	mov	r0, r2
 8002432:	4619      	mov	r1, r3
 8002434:	4b35      	ldr	r3, [pc, #212]	; (800250c <BME280_Kalman_Press+0x12c>)
 8002436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243a:	f7fd ff37 	bl	80002ac <__adddf3>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4620      	mov	r0, r4
 8002444:	4629      	mov	r1, r5
 8002446:	f7fe fa11 	bl	800086c <__aeabi_ddiv>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4930      	ldr	r1, [pc, #192]	; (8002510 <BME280_Kalman_Press+0x130>)
 8002450:	e9c1 2300 	strd	r2, r3, [r1]
	U1_hat = U1_hat + K1 * (U1 - H1 * U1_hat);
 8002454:	4b2c      	ldr	r3, [pc, #176]	; (8002508 <BME280_Kalman_Press+0x128>)
 8002456:	e9d3 0100 	ldrd	r0, r1, [r3]
 800245a:	4b2e      	ldr	r3, [pc, #184]	; (8002514 <BME280_Kalman_Press+0x134>)
 800245c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002460:	f7fe f8da 	bl	8000618 <__aeabi_dmul>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	e9d7 0100 	ldrd	r0, r1, [r7]
 800246c:	f7fd ff1c 	bl	80002a8 <__aeabi_dsub>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	4610      	mov	r0, r2
 8002476:	4619      	mov	r1, r3
 8002478:	4b25      	ldr	r3, [pc, #148]	; (8002510 <BME280_Kalman_Press+0x130>)
 800247a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247e:	f7fe f8cb 	bl	8000618 <__aeabi_dmul>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	4610      	mov	r0, r2
 8002488:	4619      	mov	r1, r3
 800248a:	4b22      	ldr	r3, [pc, #136]	; (8002514 <BME280_Kalman_Press+0x134>)
 800248c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002490:	f7fd ff0c 	bl	80002ac <__adddf3>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	491e      	ldr	r1, [pc, #120]	; (8002514 <BME280_Kalman_Press+0x134>)
 800249a:	e9c1 2300 	strd	r2, r3, [r1]
	P1 = (1 - K1 * H1) * P1 + Q1;
 800249e:	4b1c      	ldr	r3, [pc, #112]	; (8002510 <BME280_Kalman_Press+0x130>)
 80024a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024a4:	4b18      	ldr	r3, [pc, #96]	; (8002508 <BME280_Kalman_Press+0x128>)
 80024a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024aa:	f7fe f8b5 	bl	8000618 <__aeabi_dmul>
 80024ae:	4602      	mov	r2, r0
 80024b0:	460b      	mov	r3, r1
 80024b2:	f04f 0000 	mov.w	r0, #0
 80024b6:	4918      	ldr	r1, [pc, #96]	; (8002518 <BME280_Kalman_Press+0x138>)
 80024b8:	f7fd fef6 	bl	80002a8 <__aeabi_dsub>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4610      	mov	r0, r2
 80024c2:	4619      	mov	r1, r3
 80024c4:	4b0f      	ldr	r3, [pc, #60]	; (8002504 <BME280_Kalman_Press+0x124>)
 80024c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ca:	f7fe f8a5 	bl	8000618 <__aeabi_dmul>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4610      	mov	r0, r2
 80024d4:	4619      	mov	r1, r3
 80024d6:	4b11      	ldr	r3, [pc, #68]	; (800251c <BME280_Kalman_Press+0x13c>)
 80024d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024dc:	f7fd fee6 	bl	80002ac <__adddf3>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4907      	ldr	r1, [pc, #28]	; (8002504 <BME280_Kalman_Press+0x124>)
 80024e6:	e9c1 2300 	strd	r2, r3, [r1]
	return U1_hat;
 80024ea:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <BME280_Kalman_Press+0x134>)
 80024ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f0:	ec43 2b17 	vmov	d7, r2, r3
}
 80024f4:	eeb0 0a47 	vmov.f32	s0, s14
 80024f8:	eef0 0a67 	vmov.f32	s1, s15
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bdb0      	pop	{r4, r5, r7, pc}
 8002502:	bf00      	nop
 8002504:	200005e0 	.word	0x200005e0
 8002508:	080118a8 	.word	0x080118a8
 800250c:	080118b0 	.word	0x080118b0
 8002510:	200005e8 	.word	0x200005e8
 8002514:	20000010 	.word	0x20000010
 8002518:	3ff00000 	.word	0x3ff00000
 800251c:	20000018 	.word	0x20000018

08002520 <BME280_Kalman_Hum>:

double BME280_Kalman_Hum(double U2)
{
 8002520:	b5b0      	push	{r4, r5, r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	ed87 0b00 	vstr	d0, [r7]
	static double Q2 = 10; //initial estimated covariance
	static double P2 = 0; //initial error covariance (it must be 0)
	static double U2_hat = 50; //initial estimated state
	static double K2 = 0; //initial kalman gain

	U2 = BME280_Humidity();
 800252a:	f7ff fdcb 	bl	80020c4 <BME280_Humidity>
 800252e:	ed87 0b00 	vstr	d0, [r7]
	K2 = P2 * H2 / (H2 * P2 * H2 + R2);
 8002532:	4b44      	ldr	r3, [pc, #272]	; (8002644 <BME280_Kalman_Hum+0x124>)
 8002534:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002538:	4b43      	ldr	r3, [pc, #268]	; (8002648 <BME280_Kalman_Hum+0x128>)
 800253a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253e:	f7fe f86b 	bl	8000618 <__aeabi_dmul>
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	4614      	mov	r4, r2
 8002548:	461d      	mov	r5, r3
 800254a:	4b3f      	ldr	r3, [pc, #252]	; (8002648 <BME280_Kalman_Hum+0x128>)
 800254c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002550:	4b3c      	ldr	r3, [pc, #240]	; (8002644 <BME280_Kalman_Hum+0x124>)
 8002552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002556:	f7fe f85f 	bl	8000618 <__aeabi_dmul>
 800255a:	4602      	mov	r2, r0
 800255c:	460b      	mov	r3, r1
 800255e:	4610      	mov	r0, r2
 8002560:	4619      	mov	r1, r3
 8002562:	4b39      	ldr	r3, [pc, #228]	; (8002648 <BME280_Kalman_Hum+0x128>)
 8002564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002568:	f7fe f856 	bl	8000618 <__aeabi_dmul>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4610      	mov	r0, r2
 8002572:	4619      	mov	r1, r3
 8002574:	4b35      	ldr	r3, [pc, #212]	; (800264c <BME280_Kalman_Hum+0x12c>)
 8002576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257a:	f7fd fe97 	bl	80002ac <__adddf3>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	4620      	mov	r0, r4
 8002584:	4629      	mov	r1, r5
 8002586:	f7fe f971 	bl	800086c <__aeabi_ddiv>
 800258a:	4602      	mov	r2, r0
 800258c:	460b      	mov	r3, r1
 800258e:	4930      	ldr	r1, [pc, #192]	; (8002650 <BME280_Kalman_Hum+0x130>)
 8002590:	e9c1 2300 	strd	r2, r3, [r1]
	U2_hat = U2_hat + K2 * (U2 - H2 * U2_hat);
 8002594:	4b2c      	ldr	r3, [pc, #176]	; (8002648 <BME280_Kalman_Hum+0x128>)
 8002596:	e9d3 0100 	ldrd	r0, r1, [r3]
 800259a:	4b2e      	ldr	r3, [pc, #184]	; (8002654 <BME280_Kalman_Hum+0x134>)
 800259c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a0:	f7fe f83a 	bl	8000618 <__aeabi_dmul>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025ac:	f7fd fe7c 	bl	80002a8 <__aeabi_dsub>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	4610      	mov	r0, r2
 80025b6:	4619      	mov	r1, r3
 80025b8:	4b25      	ldr	r3, [pc, #148]	; (8002650 <BME280_Kalman_Hum+0x130>)
 80025ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025be:	f7fe f82b 	bl	8000618 <__aeabi_dmul>
 80025c2:	4602      	mov	r2, r0
 80025c4:	460b      	mov	r3, r1
 80025c6:	4610      	mov	r0, r2
 80025c8:	4619      	mov	r1, r3
 80025ca:	4b22      	ldr	r3, [pc, #136]	; (8002654 <BME280_Kalman_Hum+0x134>)
 80025cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d0:	f7fd fe6c 	bl	80002ac <__adddf3>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	491e      	ldr	r1, [pc, #120]	; (8002654 <BME280_Kalman_Hum+0x134>)
 80025da:	e9c1 2300 	strd	r2, r3, [r1]
	P2 = (1 - K2 * H2) * P2 + Q2;
 80025de:	4b1c      	ldr	r3, [pc, #112]	; (8002650 <BME280_Kalman_Hum+0x130>)
 80025e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025e4:	4b18      	ldr	r3, [pc, #96]	; (8002648 <BME280_Kalman_Hum+0x128>)
 80025e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ea:	f7fe f815 	bl	8000618 <__aeabi_dmul>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	f04f 0000 	mov.w	r0, #0
 80025f6:	4918      	ldr	r1, [pc, #96]	; (8002658 <BME280_Kalman_Hum+0x138>)
 80025f8:	f7fd fe56 	bl	80002a8 <__aeabi_dsub>
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	4610      	mov	r0, r2
 8002602:	4619      	mov	r1, r3
 8002604:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <BME280_Kalman_Hum+0x124>)
 8002606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260a:	f7fe f805 	bl	8000618 <__aeabi_dmul>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	4610      	mov	r0, r2
 8002614:	4619      	mov	r1, r3
 8002616:	4b11      	ldr	r3, [pc, #68]	; (800265c <BME280_Kalman_Hum+0x13c>)
 8002618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800261c:	f7fd fe46 	bl	80002ac <__adddf3>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4907      	ldr	r1, [pc, #28]	; (8002644 <BME280_Kalman_Hum+0x124>)
 8002626:	e9c1 2300 	strd	r2, r3, [r1]
	return U2_hat;
 800262a:	4b0a      	ldr	r3, [pc, #40]	; (8002654 <BME280_Kalman_Hum+0x134>)
 800262c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002630:	ec43 2b17 	vmov	d7, r2, r3
}
 8002634:	eeb0 0a47 	vmov.f32	s0, s14
 8002638:	eef0 0a67 	vmov.f32	s1, s15
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bdb0      	pop	{r4, r5, r7, pc}
 8002642:	bf00      	nop
 8002644:	200005f0 	.word	0x200005f0
 8002648:	080118b8 	.word	0x080118b8
 800264c:	080118c0 	.word	0x080118c0
 8002650:	200005f8 	.word	0x200005f8
 8002654:	20000020 	.word	0x20000020
 8002658:	3ff00000 	.word	0x3ff00000
 800265c:	20000028 	.word	0x20000028

08002660 <BME280_Kalman_Temp>:

double BME280_Kalman_Temp(double U3)
{
 8002660:	b5b0      	push	{r4, r5, r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	ed87 0b00 	vstr	d0, [r7]
	static double Q3 = 10; //initial estimated covariance
	static double P3 = 0; //initial error covariance (it must be 0)
	static double U3_hat = 25; //initial estimated state
	static double K3 = 0; //initial kalman gain

	U3 = BME280_Temperature();
 800266a:	f7ff fd6d 	bl	8002148 <BME280_Temperature>
 800266e:	ed87 0b00 	vstr	d0, [r7]
	K3 = P3 * H3 / (H3 * P3 * H3 + R3);
 8002672:	4b44      	ldr	r3, [pc, #272]	; (8002784 <BME280_Kalman_Temp+0x124>)
 8002674:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002678:	4b43      	ldr	r3, [pc, #268]	; (8002788 <BME280_Kalman_Temp+0x128>)
 800267a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267e:	f7fd ffcb 	bl	8000618 <__aeabi_dmul>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4614      	mov	r4, r2
 8002688:	461d      	mov	r5, r3
 800268a:	4b3f      	ldr	r3, [pc, #252]	; (8002788 <BME280_Kalman_Temp+0x128>)
 800268c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002690:	4b3c      	ldr	r3, [pc, #240]	; (8002784 <BME280_Kalman_Temp+0x124>)
 8002692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002696:	f7fd ffbf 	bl	8000618 <__aeabi_dmul>
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	4610      	mov	r0, r2
 80026a0:	4619      	mov	r1, r3
 80026a2:	4b39      	ldr	r3, [pc, #228]	; (8002788 <BME280_Kalman_Temp+0x128>)
 80026a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a8:	f7fd ffb6 	bl	8000618 <__aeabi_dmul>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	4610      	mov	r0, r2
 80026b2:	4619      	mov	r1, r3
 80026b4:	4b35      	ldr	r3, [pc, #212]	; (800278c <BME280_Kalman_Temp+0x12c>)
 80026b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ba:	f7fd fdf7 	bl	80002ac <__adddf3>
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	4620      	mov	r0, r4
 80026c4:	4629      	mov	r1, r5
 80026c6:	f7fe f8d1 	bl	800086c <__aeabi_ddiv>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	4930      	ldr	r1, [pc, #192]	; (8002790 <BME280_Kalman_Temp+0x130>)
 80026d0:	e9c1 2300 	strd	r2, r3, [r1]
	U3_hat = U3_hat + K3 * (U3 - H3 * U3_hat);
 80026d4:	4b2c      	ldr	r3, [pc, #176]	; (8002788 <BME280_Kalman_Temp+0x128>)
 80026d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026da:	4b2e      	ldr	r3, [pc, #184]	; (8002794 <BME280_Kalman_Temp+0x134>)
 80026dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e0:	f7fd ff9a 	bl	8000618 <__aeabi_dmul>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026ec:	f7fd fddc 	bl	80002a8 <__aeabi_dsub>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4610      	mov	r0, r2
 80026f6:	4619      	mov	r1, r3
 80026f8:	4b25      	ldr	r3, [pc, #148]	; (8002790 <BME280_Kalman_Temp+0x130>)
 80026fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fe:	f7fd ff8b 	bl	8000618 <__aeabi_dmul>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	4610      	mov	r0, r2
 8002708:	4619      	mov	r1, r3
 800270a:	4b22      	ldr	r3, [pc, #136]	; (8002794 <BME280_Kalman_Temp+0x134>)
 800270c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002710:	f7fd fdcc 	bl	80002ac <__adddf3>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	491e      	ldr	r1, [pc, #120]	; (8002794 <BME280_Kalman_Temp+0x134>)
 800271a:	e9c1 2300 	strd	r2, r3, [r1]
	P3 = (1 - K3 * H3) * P3 + Q3;
 800271e:	4b1c      	ldr	r3, [pc, #112]	; (8002790 <BME280_Kalman_Temp+0x130>)
 8002720:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002724:	4b18      	ldr	r3, [pc, #96]	; (8002788 <BME280_Kalman_Temp+0x128>)
 8002726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272a:	f7fd ff75 	bl	8000618 <__aeabi_dmul>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	f04f 0000 	mov.w	r0, #0
 8002736:	4918      	ldr	r1, [pc, #96]	; (8002798 <BME280_Kalman_Temp+0x138>)
 8002738:	f7fd fdb6 	bl	80002a8 <__aeabi_dsub>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4610      	mov	r0, r2
 8002742:	4619      	mov	r1, r3
 8002744:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <BME280_Kalman_Temp+0x124>)
 8002746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274a:	f7fd ff65 	bl	8000618 <__aeabi_dmul>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	4610      	mov	r0, r2
 8002754:	4619      	mov	r1, r3
 8002756:	4b11      	ldr	r3, [pc, #68]	; (800279c <BME280_Kalman_Temp+0x13c>)
 8002758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275c:	f7fd fda6 	bl	80002ac <__adddf3>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4907      	ldr	r1, [pc, #28]	; (8002784 <BME280_Kalman_Temp+0x124>)
 8002766:	e9c1 2300 	strd	r2, r3, [r1]
	return U3_hat;
 800276a:	4b0a      	ldr	r3, [pc, #40]	; (8002794 <BME280_Kalman_Temp+0x134>)
 800276c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002770:	ec43 2b17 	vmov	d7, r2, r3
}
 8002774:	eeb0 0a47 	vmov.f32	s0, s14
 8002778:	eef0 0a67 	vmov.f32	s1, s15
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bdb0      	pop	{r4, r5, r7, pc}
 8002782:	bf00      	nop
 8002784:	20000600 	.word	0x20000600
 8002788:	080118c8 	.word	0x080118c8
 800278c:	080118d0 	.word	0x080118d0
 8002790:	20000608 	.word	0x20000608
 8002794:	20000030 	.word	0x20000030
 8002798:	3ff00000 	.word	0x3ff00000
 800279c:	20000038 	.word	0x20000038

080027a0 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	71fb      	strb	r3, [r7, #7]
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	4619      	mov	r1, r3
 80027ae:	2007      	movs	r0, #7
 80027b0:	f000 fa88 	bl	8002cc4 <bno055_writeData>
 80027b4:	bf00      	nop
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	4619      	mov	r1, r3
 80027ca:	203d      	movs	r0, #61	; 0x3d
 80027cc:	f000 fa7a 	bl	8002cc4 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d103      	bne.n	80027de <bno055_setOperationMode+0x22>
    bno055_delay(19);
 80027d6:	2013      	movs	r0, #19
 80027d8:	f000 fa68 	bl	8002cac <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 80027dc:	e002      	b.n	80027e4 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 80027de:	2007      	movs	r0, #7
 80027e0:	f000 fa64 	bl	8002cac <bno055_delay>
}
 80027e4:	bf00      	nop
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 80027f0:	2000      	movs	r0, #0
 80027f2:	f7ff ffe3 	bl	80027bc <bno055_setOperationMode>
}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}

080027fa <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 80027fa:	b580      	push	{r7, lr}
 80027fc:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 80027fe:	200c      	movs	r0, #12
 8002800:	f7ff ffdc 	bl	80027bc <bno055_setOperationMode>
}
 8002804:	bf00      	nop
 8002806:	bd80      	pop	{r7, pc}

08002808 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 800280c:	2120      	movs	r1, #32
 800280e:	203f      	movs	r0, #63	; 0x3f
 8002810:	f000 fa58 	bl	8002cc4 <bno055_writeData>
  bno055_delay(700);
 8002814:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002818:	f000 fa48 	bl	8002cac <bno055_delay>
}
 800281c:	bf00      	nop
 800281e:	bd80      	pop	{r7, pc}

08002820 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
  bno055_reset();
 8002826:	f7ff ffef 	bl	8002808 <bno055_reset>

  uint8_t id = 0;
 800282a:	2300      	movs	r3, #0
 800282c:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 800282e:	1dfb      	adds	r3, r7, #7
 8002830:	2201      	movs	r2, #1
 8002832:	4619      	mov	r1, r3
 8002834:	2000      	movs	r0, #0
 8002836:	f000 fb31 	bl	8002e9c <bno055_readData>
  if (id != BNO055_ID) {
 800283a:	79fb      	ldrb	r3, [r7, #7]
 800283c:	2ba0      	cmp	r3, #160	; 0xa0
 800283e:	d004      	beq.n	800284a <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	4619      	mov	r1, r3
 8002844:	4809      	ldr	r0, [pc, #36]	; (800286c <bno055_setup+0x4c>)
 8002846:	f00c fc67 	bl	800f118 <iprintf>
  }
  bno055_setPage(0);
 800284a:	2000      	movs	r0, #0
 800284c:	f7ff ffa8 	bl	80027a0 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8002850:	2100      	movs	r1, #0
 8002852:	203f      	movs	r0, #63	; 0x3f
 8002854:	f000 fa36 	bl	8002cc4 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8002858:	f7ff ffc8 	bl	80027ec <bno055_setOperationModeConfig>
  bno055_delay(10);
 800285c:	200a      	movs	r0, #10
 800285e:	f000 fa25 	bl	8002cac <bno055_delay>
}
 8002862:	bf00      	nop
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	080115c0 	.word	0x080115c0

08002870 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8002870:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002874:	b09e      	sub	sp, #120	; 0x78
 8002876:	af00      	add	r7, sp, #0
 8002878:	4603      	mov	r3, r0
 800287a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 800287e:	2000      	movs	r0, #0
 8002880:	f7ff ff8e 	bl	80027a0 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8002884:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002888:	2b20      	cmp	r3, #32
 800288a:	d108      	bne.n	800289e <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 800288c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002890:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002894:	2208      	movs	r2, #8
 8002896:	4618      	mov	r0, r3
 8002898:	f000 fb00 	bl	8002e9c <bno055_readData>
 800289c:	e007      	b.n	80028ae <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 800289e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80028a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028a6:	2206      	movs	r2, #6
 80028a8:	4618      	mov	r0, r3
 80028aa:	f000 faf7 	bl	8002e9c <bno055_readData>

  double scale = 1;
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	4b8b      	ldr	r3, [pc, #556]	; (8002ae0 <bno055_getVector+0x270>)
 80028b4:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 80028b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028bc:	2b0e      	cmp	r3, #14
 80028be:	d109      	bne.n	80028d4 <bno055_getVector+0x64>
    scale = magScale;
 80028c0:	4b88      	ldr	r3, [pc, #544]	; (8002ae4 <bno055_getVector+0x274>)
 80028c2:	881b      	ldrh	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7fd fe2d 	bl	8000524 <__aeabi_ui2d>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80028d2:	e03e      	b.n	8002952 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 80028d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028d8:	2b08      	cmp	r3, #8
 80028da:	d007      	beq.n	80028ec <bno055_getVector+0x7c>
 80028dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028e0:	2b28      	cmp	r3, #40	; 0x28
 80028e2:	d003      	beq.n	80028ec <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 80028e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028e8:	2b2e      	cmp	r3, #46	; 0x2e
 80028ea:	d109      	bne.n	8002900 <bno055_getVector+0x90>
    scale = accelScale;
 80028ec:	4b7e      	ldr	r3, [pc, #504]	; (8002ae8 <bno055_getVector+0x278>)
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7fd fe17 	bl	8000524 <__aeabi_ui2d>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80028fe:	e028      	b.n	8002952 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8002900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002904:	2b14      	cmp	r3, #20
 8002906:	d109      	bne.n	800291c <bno055_getVector+0xac>
    scale = angularRateScale;
 8002908:	4b78      	ldr	r3, [pc, #480]	; (8002aec <bno055_getVector+0x27c>)
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f7fd fe09 	bl	8000524 <__aeabi_ui2d>
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800291a:	e01a      	b.n	8002952 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 800291c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002920:	2b1a      	cmp	r3, #26
 8002922:	d109      	bne.n	8002938 <bno055_getVector+0xc8>
    scale = eulerScale;
 8002924:	4b72      	ldr	r3, [pc, #456]	; (8002af0 <bno055_getVector+0x280>)
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f7fd fdfb 	bl	8000524 <__aeabi_ui2d>
 800292e:	4602      	mov	r2, r0
 8002930:	460b      	mov	r3, r1
 8002932:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8002936:	e00c      	b.n	8002952 <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8002938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800293c:	2b20      	cmp	r3, #32
 800293e:	d108      	bne.n	8002952 <bno055_getVector+0xe2>
    scale = quaScale;
 8002940:	4b6c      	ldr	r3, [pc, #432]	; (8002af4 <bno055_getVector+0x284>)
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f7fd fded 	bl	8000524 <__aeabi_ui2d>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8002952:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002956:	2220      	movs	r2, #32
 8002958:	2100      	movs	r1, #0
 800295a:	4618      	mov	r0, r3
 800295c:	f00c faf4 	bl	800ef48 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8002960:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002964:	2b20      	cmp	r3, #32
 8002966:	d150      	bne.n	8002a0a <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8002968:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800296c:	021b      	lsls	r3, r3, #8
 800296e:	b21a      	sxth	r2, r3
 8002970:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002974:	b21b      	sxth	r3, r3
 8002976:	4313      	orrs	r3, r2
 8002978:	b21b      	sxth	r3, r3
 800297a:	4618      	mov	r0, r3
 800297c:	f7fd fde2 	bl	8000544 <__aeabi_i2d>
 8002980:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002984:	f7fd ff72 	bl	800086c <__aeabi_ddiv>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8002990:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002994:	021b      	lsls	r3, r3, #8
 8002996:	b21a      	sxth	r2, r3
 8002998:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800299c:	b21b      	sxth	r3, r3
 800299e:	4313      	orrs	r3, r2
 80029a0:	b21b      	sxth	r3, r3
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fd fdce 	bl	8000544 <__aeabi_i2d>
 80029a8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80029ac:	f7fd ff5e 	bl	800086c <__aeabi_ddiv>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80029b8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80029bc:	021b      	lsls	r3, r3, #8
 80029be:	b21a      	sxth	r2, r3
 80029c0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80029c4:	b21b      	sxth	r3, r3
 80029c6:	4313      	orrs	r3, r2
 80029c8:	b21b      	sxth	r3, r3
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fd fdba 	bl	8000544 <__aeabi_i2d>
 80029d0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80029d4:	f7fd ff4a 	bl	800086c <__aeabi_ddiv>
 80029d8:	4602      	mov	r2, r0
 80029da:	460b      	mov	r3, r1
 80029dc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 80029e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80029e4:	021b      	lsls	r3, r3, #8
 80029e6:	b21a      	sxth	r2, r3
 80029e8:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80029ec:	b21b      	sxth	r3, r3
 80029ee:	4313      	orrs	r3, r2
 80029f0:	b21b      	sxth	r3, r3
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fd fda6 	bl	8000544 <__aeabi_i2d>
 80029f8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80029fc:	f7fd ff36 	bl	800086c <__aeabi_ddiv>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8002a08:	e03b      	b.n	8002a82 <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8002a0a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002a0e:	021b      	lsls	r3, r3, #8
 8002a10:	b21a      	sxth	r2, r3
 8002a12:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002a16:	b21b      	sxth	r3, r3
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	b21b      	sxth	r3, r3
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fd fd91 	bl	8000544 <__aeabi_i2d>
 8002a22:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002a26:	f7fd ff21 	bl	800086c <__aeabi_ddiv>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8002a32:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002a36:	021b      	lsls	r3, r3, #8
 8002a38:	b21a      	sxth	r2, r3
 8002a3a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002a3e:	b21b      	sxth	r3, r3
 8002a40:	4313      	orrs	r3, r2
 8002a42:	b21b      	sxth	r3, r3
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fd fd7d 	bl	8000544 <__aeabi_i2d>
 8002a4a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002a4e:	f7fd ff0d 	bl	800086c <__aeabi_ddiv>
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8002a5a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a5e:	021b      	lsls	r3, r3, #8
 8002a60:	b21a      	sxth	r2, r3
 8002a62:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002a66:	b21b      	sxth	r3, r3
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	b21b      	sxth	r3, r3
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fd fd69 	bl	8000544 <__aeabi_i2d>
 8002a72:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002a76:	f7fd fef9 	bl	800086c <__aeabi_ddiv>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 8002a82:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8002a86:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8002a8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a8e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002a92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002a96:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002a9a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8002a9e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002aa2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002aa6:	ec49 8b14 	vmov	d4, r8, r9
 8002aaa:	ec45 4b15 	vmov	d5, r4, r5
 8002aae:	ec41 0b16 	vmov	d6, r0, r1
 8002ab2:	ec43 2b17 	vmov	d7, r2, r3
}
 8002ab6:	eeb0 0a44 	vmov.f32	s0, s8
 8002aba:	eef0 0a64 	vmov.f32	s1, s9
 8002abe:	eeb0 1a45 	vmov.f32	s2, s10
 8002ac2:	eef0 1a65 	vmov.f32	s3, s11
 8002ac6:	eeb0 2a46 	vmov.f32	s4, s12
 8002aca:	eef0 2a66 	vmov.f32	s5, s13
 8002ace:	eeb0 3a47 	vmov.f32	s6, s14
 8002ad2:	eef0 3a67 	vmov.f32	s7, s15
 8002ad6:	3778      	adds	r7, #120	; 0x78
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002ade:	bf00      	nop
 8002ae0:	3ff00000 	.word	0x3ff00000
 8002ae4:	20000046 	.word	0x20000046
 8002ae8:	20000040 	.word	0x20000040
 8002aec:	20000042 	.word	0x20000042
 8002af0:	20000044 	.word	0x20000044
 8002af4:	20000048 	.word	0x20000048

08002af8 <bno055_getVectorAccelerometer>:

bno055_vector_t bno055_getVectorAccelerometer() {
 8002af8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002afc:	b090      	sub	sp, #64	; 0x40
 8002afe:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
 8002b00:	2008      	movs	r0, #8
 8002b02:	f7ff feb5 	bl	8002870 <bno055_getVector>
 8002b06:	eeb0 4a40 	vmov.f32	s8, s0
 8002b0a:	eef0 4a60 	vmov.f32	s9, s1
 8002b0e:	eeb0 5a41 	vmov.f32	s10, s2
 8002b12:	eef0 5a61 	vmov.f32	s11, s3
 8002b16:	eeb0 6a42 	vmov.f32	s12, s4
 8002b1a:	eef0 6a62 	vmov.f32	s13, s5
 8002b1e:	eeb0 7a43 	vmov.f32	s14, s6
 8002b22:	eef0 7a63 	vmov.f32	s15, s7
 8002b26:	ed87 4b08 	vstr	d4, [r7, #32]
 8002b2a:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8002b2e:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8002b32:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8002b36:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b3a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8002b3e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002b42:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b46:	ec49 8b14 	vmov	d4, r8, r9
 8002b4a:	ec45 4b15 	vmov	d5, r4, r5
 8002b4e:	ec41 0b16 	vmov	d6, r0, r1
 8002b52:	ec43 2b17 	vmov	d7, r2, r3
}
 8002b56:	eeb0 0a44 	vmov.f32	s0, s8
 8002b5a:	eef0 0a64 	vmov.f32	s1, s9
 8002b5e:	eeb0 1a45 	vmov.f32	s2, s10
 8002b62:	eef0 1a65 	vmov.f32	s3, s11
 8002b66:	eeb0 2a46 	vmov.f32	s4, s12
 8002b6a:	eef0 2a66 	vmov.f32	s5, s13
 8002b6e:	eeb0 3a47 	vmov.f32	s6, s14
 8002b72:	eef0 3a67 	vmov.f32	s7, s15
 8002b76:	3740      	adds	r7, #64	; 0x40
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002b7e <bno055_getVectorGyroscope>:
bno055_vector_t bno055_getVectorMagnetometer() {
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
 8002b7e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b82:	b090      	sub	sp, #64	; 0x40
 8002b84:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 8002b86:	2014      	movs	r0, #20
 8002b88:	f7ff fe72 	bl	8002870 <bno055_getVector>
 8002b8c:	eeb0 4a40 	vmov.f32	s8, s0
 8002b90:	eef0 4a60 	vmov.f32	s9, s1
 8002b94:	eeb0 5a41 	vmov.f32	s10, s2
 8002b98:	eef0 5a61 	vmov.f32	s11, s3
 8002b9c:	eeb0 6a42 	vmov.f32	s12, s4
 8002ba0:	eef0 6a62 	vmov.f32	s13, s5
 8002ba4:	eeb0 7a43 	vmov.f32	s14, s6
 8002ba8:	eef0 7a63 	vmov.f32	s15, s7
 8002bac:	ed87 4b08 	vstr	d4, [r7, #32]
 8002bb0:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8002bb4:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8002bb8:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8002bbc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bc0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8002bc4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002bc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002bcc:	ec49 8b14 	vmov	d4, r8, r9
 8002bd0:	ec45 4b15 	vmov	d5, r4, r5
 8002bd4:	ec41 0b16 	vmov	d6, r0, r1
 8002bd8:	ec43 2b17 	vmov	d7, r2, r3
}
 8002bdc:	eeb0 0a44 	vmov.f32	s0, s8
 8002be0:	eef0 0a64 	vmov.f32	s1, s9
 8002be4:	eeb0 1a45 	vmov.f32	s2, s10
 8002be8:	eef0 1a65 	vmov.f32	s3, s11
 8002bec:	eeb0 2a46 	vmov.f32	s4, s12
 8002bf0:	eef0 2a66 	vmov.f32	s5, s13
 8002bf4:	eeb0 3a47 	vmov.f32	s6, s14
 8002bf8:	eef0 3a67 	vmov.f32	s7, s15
 8002bfc:	3740      	adds	r7, #64	; 0x40
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002c04 <bno055_getVectorEuler>:
bno055_vector_t bno055_getVectorEuler() {
 8002c04:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c08:	b090      	sub	sp, #64	; 0x40
 8002c0a:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8002c0c:	201a      	movs	r0, #26
 8002c0e:	f7ff fe2f 	bl	8002870 <bno055_getVector>
 8002c12:	eeb0 4a40 	vmov.f32	s8, s0
 8002c16:	eef0 4a60 	vmov.f32	s9, s1
 8002c1a:	eeb0 5a41 	vmov.f32	s10, s2
 8002c1e:	eef0 5a61 	vmov.f32	s11, s3
 8002c22:	eeb0 6a42 	vmov.f32	s12, s4
 8002c26:	eef0 6a62 	vmov.f32	s13, s5
 8002c2a:	eeb0 7a43 	vmov.f32	s14, s6
 8002c2e:	eef0 7a63 	vmov.f32	s15, s7
 8002c32:	ed87 4b08 	vstr	d4, [r7, #32]
 8002c36:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8002c3a:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8002c3e:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8002c42:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c46:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8002c4a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002c4e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002c52:	ec49 8b14 	vmov	d4, r8, r9
 8002c56:	ec45 4b15 	vmov	d5, r4, r5
 8002c5a:	ec41 0b16 	vmov	d6, r0, r1
 8002c5e:	ec43 2b17 	vmov	d7, r2, r3
}
 8002c62:	eeb0 0a44 	vmov.f32	s0, s8
 8002c66:	eef0 0a64 	vmov.f32	s1, s9
 8002c6a:	eeb0 1a45 	vmov.f32	s2, s10
 8002c6e:	eef0 1a65 	vmov.f32	s3, s11
 8002c72:	eeb0 2a46 	vmov.f32	s4, s12
 8002c76:	eef0 2a66 	vmov.f32	s5, s13
 8002c7a:	eeb0 3a47 	vmov.f32	s6, s14
 8002c7e:	eef0 3a67 	vmov.f32	s7, s15
 8002c82:	3740      	adds	r7, #64	; 0x40
 8002c84:	46bd      	mov	sp, r7
 8002c86:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08002c8c <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8002c94:	4a04      	ldr	r2, [pc, #16]	; (8002ca8 <bno055_assignI2C+0x1c>)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6013      	str	r3, [r2, #0]
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	20000610 	.word	0x20000610

08002cac <bno055_delay>:

void bno055_delay(int time) {
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f001 fd9e 	bl	80047f8 <HAL_Delay>
#endif
}
 8002cbc:	bf00      	nop
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b088      	sub	sp, #32
 8002cc8:	af02      	add	r7, sp, #8
 8002cca:	4603      	mov	r3, r0
 8002ccc:	460a      	mov	r2, r1
 8002cce:	71fb      	strb	r3, [r7, #7]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8002cd4:	79fb      	ldrb	r3, [r7, #7]
 8002cd6:	733b      	strb	r3, [r7, #12]
 8002cd8:	79bb      	ldrb	r3, [r7, #6]
 8002cda:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8002cdc:	4b5a      	ldr	r3, [pc, #360]	; (8002e48 <bno055_writeData+0x184>)
 8002cde:	6818      	ldr	r0, [r3, #0]
 8002ce0:	f107 020c 	add.w	r2, r7, #12
 8002ce4:	230a      	movs	r3, #10
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	2302      	movs	r3, #2
 8002cea:	2150      	movs	r1, #80	; 0x50
 8002cec:	f002 fc6e 	bl	80055cc <HAL_I2C_Master_Transmit>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8002cf4:	7dfb      	ldrb	r3, [r7, #23]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	f000 80a0 	beq.w	8002e3c <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8002cfc:	7dfb      	ldrb	r3, [r7, #23]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d103      	bne.n	8002d0a <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8002d02:	4852      	ldr	r0, [pc, #328]	; (8002e4c <bno055_writeData+0x188>)
 8002d04:	f00c fa8e 	bl	800f224 <puts>
 8002d08:	e012      	b.n	8002d30 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8002d0a:	7dfb      	ldrb	r3, [r7, #23]
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	d103      	bne.n	8002d18 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8002d10:	484f      	ldr	r0, [pc, #316]	; (8002e50 <bno055_writeData+0x18c>)
 8002d12:	f00c fa87 	bl	800f224 <puts>
 8002d16:	e00b      	b.n	8002d30 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8002d18:	7dfb      	ldrb	r3, [r7, #23]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d103      	bne.n	8002d26 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8002d1e:	484d      	ldr	r0, [pc, #308]	; (8002e54 <bno055_writeData+0x190>)
 8002d20:	f00c fa80 	bl	800f224 <puts>
 8002d24:	e004      	b.n	8002d30 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8002d26:	7dfb      	ldrb	r3, [r7, #23]
 8002d28:	4619      	mov	r1, r3
 8002d2a:	484b      	ldr	r0, [pc, #300]	; (8002e58 <bno055_writeData+0x194>)
 8002d2c:	f00c f9f4 	bl	800f118 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8002d30:	4b45      	ldr	r3, [pc, #276]	; (8002e48 <bno055_writeData+0x184>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f003 fa9b 	bl	8006270 <HAL_I2C_GetError>
 8002d3a:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d07e      	beq.n	8002e40 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d103      	bne.n	8002d50 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8002d48:	4844      	ldr	r0, [pc, #272]	; (8002e5c <bno055_writeData+0x198>)
 8002d4a:	f00c fa6b 	bl	800f224 <puts>
 8002d4e:	e021      	b.n	8002d94 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d103      	bne.n	8002d5e <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8002d56:	4842      	ldr	r0, [pc, #264]	; (8002e60 <bno055_writeData+0x19c>)
 8002d58:	f00c fa64 	bl	800f224 <puts>
 8002d5c:	e01a      	b.n	8002d94 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d103      	bne.n	8002d6c <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8002d64:	483f      	ldr	r0, [pc, #252]	; (8002e64 <bno055_writeData+0x1a0>)
 8002d66:	f00c fa5d 	bl	800f224 <puts>
 8002d6a:	e013      	b.n	8002d94 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d103      	bne.n	8002d7a <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8002d72:	483d      	ldr	r0, [pc, #244]	; (8002e68 <bno055_writeData+0x1a4>)
 8002d74:	f00c fa56 	bl	800f224 <puts>
 8002d78:	e00c      	b.n	8002d94 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	2b10      	cmp	r3, #16
 8002d7e:	d103      	bne.n	8002d88 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8002d80:	483a      	ldr	r0, [pc, #232]	; (8002e6c <bno055_writeData+0x1a8>)
 8002d82:	f00c fa4f 	bl	800f224 <puts>
 8002d86:	e005      	b.n	8002d94 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	2b20      	cmp	r3, #32
 8002d8c:	d102      	bne.n	8002d94 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8002d8e:	4838      	ldr	r0, [pc, #224]	; (8002e70 <bno055_writeData+0x1ac>)
 8002d90:	f00c fa48 	bl	800f224 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8002d94:	4b2c      	ldr	r3, [pc, #176]	; (8002e48 <bno055_writeData+0x184>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f003 fa5b 	bl	8006254 <HAL_I2C_GetState>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d103      	bne.n	8002db0 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8002da8:	4832      	ldr	r0, [pc, #200]	; (8002e74 <bno055_writeData+0x1b0>)
 8002daa:	f00c fa3b 	bl	800f224 <puts>
 8002dae:	e048      	b.n	8002e42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
 8002db2:	2b20      	cmp	r3, #32
 8002db4:	d103      	bne.n	8002dbe <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8002db6:	482f      	ldr	r0, [pc, #188]	; (8002e74 <bno055_writeData+0x1b0>)
 8002db8:	f00c fa34 	bl	800f224 <puts>
 8002dbc:	e041      	b.n	8002e42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
 8002dc0:	2b24      	cmp	r3, #36	; 0x24
 8002dc2:	d103      	bne.n	8002dcc <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8002dc4:	482c      	ldr	r0, [pc, #176]	; (8002e78 <bno055_writeData+0x1b4>)
 8002dc6:	f00c fa2d 	bl	800f224 <puts>
 8002dca:	e03a      	b.n	8002e42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
 8002dce:	2b21      	cmp	r3, #33	; 0x21
 8002dd0:	d103      	bne.n	8002dda <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8002dd2:	482a      	ldr	r0, [pc, #168]	; (8002e7c <bno055_writeData+0x1b8>)
 8002dd4:	f00c fa26 	bl	800f224 <puts>
 8002dd8:	e033      	b.n	8002e42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
 8002ddc:	2b22      	cmp	r3, #34	; 0x22
 8002dde:	d103      	bne.n	8002de8 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8002de0:	4827      	ldr	r0, [pc, #156]	; (8002e80 <bno055_writeData+0x1bc>)
 8002de2:	f00c fa1f 	bl	800f224 <puts>
 8002de6:	e02c      	b.n	8002e42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8002de8:	7bfb      	ldrb	r3, [r7, #15]
 8002dea:	2b28      	cmp	r3, #40	; 0x28
 8002dec:	d103      	bne.n	8002df6 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8002dee:	4825      	ldr	r0, [pc, #148]	; (8002e84 <bno055_writeData+0x1c0>)
 8002df0:	f00c fa18 	bl	800f224 <puts>
 8002df4:	e025      	b.n	8002e42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
 8002df8:	2b29      	cmp	r3, #41	; 0x29
 8002dfa:	d103      	bne.n	8002e04 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8002dfc:	4822      	ldr	r0, [pc, #136]	; (8002e88 <bno055_writeData+0x1c4>)
 8002dfe:	f00c fa11 	bl	800f224 <puts>
 8002e02:	e01e      	b.n	8002e42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
 8002e06:	2b2a      	cmp	r3, #42	; 0x2a
 8002e08:	d103      	bne.n	8002e12 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8002e0a:	4820      	ldr	r0, [pc, #128]	; (8002e8c <bno055_writeData+0x1c8>)
 8002e0c:	f00c fa0a 	bl	800f224 <puts>
 8002e10:	e017      	b.n	8002e42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
 8002e14:	2b60      	cmp	r3, #96	; 0x60
 8002e16:	d103      	bne.n	8002e20 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8002e18:	481d      	ldr	r0, [pc, #116]	; (8002e90 <bno055_writeData+0x1cc>)
 8002e1a:	f00c fa03 	bl	800f224 <puts>
 8002e1e:	e010      	b.n	8002e42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	2ba0      	cmp	r3, #160	; 0xa0
 8002e24:	d103      	bne.n	8002e2e <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8002e26:	481b      	ldr	r0, [pc, #108]	; (8002e94 <bno055_writeData+0x1d0>)
 8002e28:	f00c f9fc 	bl	800f224 <puts>
 8002e2c:	e009      	b.n	8002e42 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	2be0      	cmp	r3, #224	; 0xe0
 8002e32:	d106      	bne.n	8002e42 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8002e34:	4818      	ldr	r0, [pc, #96]	; (8002e98 <bno055_writeData+0x1d4>)
 8002e36:	f00c f9f5 	bl	800f224 <puts>
 8002e3a:	e002      	b.n	8002e42 <bno055_writeData+0x17e>
    return;
 8002e3c:	bf00      	nop
 8002e3e:	e000      	b.n	8002e42 <bno055_writeData+0x17e>
    return;
 8002e40:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8002e42:	3718      	adds	r7, #24
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	20000610 	.word	0x20000610
 8002e4c:	080115fc 	.word	0x080115fc
 8002e50:	08011620 	.word	0x08011620
 8002e54:	08011648 	.word	0x08011648
 8002e58:	0801166c 	.word	0x0801166c
 8002e5c:	08011684 	.word	0x08011684
 8002e60:	08011698 	.word	0x08011698
 8002e64:	080116ac 	.word	0x080116ac
 8002e68:	080116c0 	.word	0x080116c0
 8002e6c:	080116d4 	.word	0x080116d4
 8002e70:	080116e8 	.word	0x080116e8
 8002e74:	08011700 	.word	0x08011700
 8002e78:	08011718 	.word	0x08011718
 8002e7c:	0801172c 	.word	0x0801172c
 8002e80:	08011744 	.word	0x08011744
 8002e84:	0801175c 	.word	0x0801175c
 8002e88:	08011774 	.word	0x08011774
 8002e8c:	08011794 	.word	0x08011794
 8002e90:	080117b4 	.word	0x080117b4
 8002e94:	080117cc 	.word	0x080117cc
 8002e98:	080117e4 	.word	0x080117e4

08002e9c <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af02      	add	r7, sp, #8
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	6039      	str	r1, [r7, #0]
 8002ea6:	71fb      	strb	r3, [r7, #7]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8002eac:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <bno055_readData+0x40>)
 8002eae:	6818      	ldr	r0, [r3, #0]
 8002eb0:	1dfa      	adds	r2, r7, #7
 8002eb2:	2364      	movs	r3, #100	; 0x64
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	2150      	movs	r1, #80	; 0x50
 8002eba:	f002 fb87 	bl	80055cc <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8002ebe:	4b07      	ldr	r3, [pc, #28]	; (8002edc <bno055_readData+0x40>)
 8002ec0:	6818      	ldr	r0, [r3, #0]
 8002ec2:	79bb      	ldrb	r3, [r7, #6]
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	2264      	movs	r2, #100	; 0x64
 8002ec8:	9200      	str	r2, [sp, #0]
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	2150      	movs	r1, #80	; 0x50
 8002ece:	f002 fc7b 	bl	80057c8 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8002ed2:	bf00      	nop
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	20000610 	.word	0x20000610

08002ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08a      	sub	sp, #40	; 0x28
 8002ee4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ee6:	f001 fc45 	bl	8004774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002eea:	f000 f94d 	bl	8003188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002eee:	f000 fb31 	bl	8003554 <MX_GPIO_Init>
  MX_DMA_Init();
 8002ef2:	f000 faf1 	bl	80034d8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002ef6:	f000 fa9b 	bl	8003430 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002efa:	f000 fac3 	bl	8003484 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002efe:	f000 f9ad 	bl	800325c <MX_I2C1_Init>
  MX_I2C2_Init();
 8002f02:	f000 f9d9 	bl	80032b8 <MX_I2C2_Init>
  MX_SPI1_Init();
 8002f06:	f000 fa27 	bl	8003358 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002f0a:	f000 fa5b 	bl	80033c4 <MX_SPI2_Init>
  MX_FATFS_Init();
 8002f0e:	f007 f8e9 	bl	800a0e4 <MX_FATFS_Init>
  MX_SDIO_SD_Init();
 8002f12:	f000 f9ff 	bl	8003314 <MX_SDIO_SD_Init>
  /* USER CODE BEGIN 2 */

  //Init Kalman filter
  KalmanFilter_Init(&kalman_filter, 2.0f, 1.0f, 0.01f);
 8002f16:	ed9f 1a81 	vldr	s2, [pc, #516]	; 800311c <main+0x23c>
 8002f1a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002f1e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8002f22:	487f      	ldr	r0, [pc, #508]	; (8003120 <main+0x240>)
 8002f24:	f7fe fa6e 	bl	8001404 <KalmanFilter_Init>

  //Config BME280
   BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8002f28:	2304      	movs	r3, #4
 8002f2a:	9301      	str	r3, [sp, #4]
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	2303      	movs	r3, #3
 8002f32:	2201      	movs	r2, #1
 8002f34:	2105      	movs	r1, #5
 8002f36:	2002      	movs	r0, #2
 8002f38:	f7fe fbe8 	bl	800170c <BME280_Config>

   //Config BNO055
   bno055_assignI2C(&hi2c2);
 8002f3c:	4879      	ldr	r0, [pc, #484]	; (8003124 <main+0x244>)
 8002f3e:	f7ff fea5 	bl	8002c8c <bno055_assignI2C>
   bno055_setup();
 8002f42:	f7ff fc6d 	bl	8002820 <bno055_setup>
   bno055_setOperationModeNDOF();
 8002f46:	f7ff fc58 	bl	80027fa <bno055_setOperationModeNDOF>

   //SD Card inits
   Mount_SD("/");
 8002f4a:	4877      	ldr	r0, [pc, #476]	; (8003128 <main+0x248>)
 8002f4c:	f7fe f84c 	bl	8000fe8 <Mount_SD>
   Format_SD();
 8002f50:	f7fe f890 	bl	8001074 <Format_SD>
   Create_File("Rocket_Data.TXT");
 8002f54:	4875      	ldr	r0, [pc, #468]	; (800312c <main+0x24c>)
 8002f56:	f7fe f8f3 	bl	8001140 <Create_File>
   Unmount_SD("/");
 8002f5a:	4873      	ldr	r0, [pc, #460]	; (8003128 <main+0x248>)
 8002f5c:	f7fe f868 	bl	8001030 <Unmount_SD>

   //Create UART task
   status = xTaskCreate(StartUARTTask, "UART", 128, NULL, 2, &UARTTaskHandle);
 8002f60:	4b73      	ldr	r3, [pc, #460]	; (8003130 <main+0x250>)
 8002f62:	9301      	str	r3, [sp, #4]
 8002f64:	2302      	movs	r3, #2
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	2300      	movs	r3, #0
 8002f6a:	2280      	movs	r2, #128	; 0x80
 8002f6c:	4971      	ldr	r1, [pc, #452]	; (8003134 <main+0x254>)
 8002f6e:	4872      	ldr	r0, [pc, #456]	; (8003138 <main+0x258>)
 8002f70:	f00a fb42 	bl	800d5f8 <xTaskCreate>
 8002f74:	61f8      	str	r0, [r7, #28]

   configASSERT(status==pdPASS);
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d00a      	beq.n	8002f92 <main+0xb2>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f80:	f383 8811 	msr	BASEPRI, r3
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	f3bf 8f4f 	dsb	sy
 8002f8c:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002f8e:	bf00      	nop
 8002f90:	e7fe      	b.n	8002f90 <main+0xb0>

   //Create BME280 Task
   status = xTaskCreate(StartBME280Task, "BME280", 128, NULL, 2, &BME280TaskHandle);
 8002f92:	4b6a      	ldr	r3, [pc, #424]	; (800313c <main+0x25c>)
 8002f94:	9301      	str	r3, [sp, #4]
 8002f96:	2302      	movs	r3, #2
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	2280      	movs	r2, #128	; 0x80
 8002f9e:	4968      	ldr	r1, [pc, #416]	; (8003140 <main+0x260>)
 8002fa0:	4868      	ldr	r0, [pc, #416]	; (8003144 <main+0x264>)
 8002fa2:	f00a fb29 	bl	800d5f8 <xTaskCreate>
 8002fa6:	61f8      	str	r0, [r7, #28]

   configASSERT(status==pdPASS);
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d00a      	beq.n	8002fc4 <main+0xe4>
        __asm volatile
 8002fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb2:	f383 8811 	msr	BASEPRI, r3
 8002fb6:	f3bf 8f6f 	isb	sy
 8002fba:	f3bf 8f4f 	dsb	sy
 8002fbe:	617b      	str	r3, [r7, #20]
    }
 8002fc0:	bf00      	nop
 8002fc2:	e7fe      	b.n	8002fc2 <main+0xe2>

   /*BNO055 Task*/
   status = xTaskCreate(StartBNO055Task, "BNO055", 128, NULL, 2, &BNO055TaskHandle);
 8002fc4:	4b60      	ldr	r3, [pc, #384]	; (8003148 <main+0x268>)
 8002fc6:	9301      	str	r3, [sp, #4]
 8002fc8:	2302      	movs	r3, #2
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	2300      	movs	r3, #0
 8002fce:	2280      	movs	r2, #128	; 0x80
 8002fd0:	495e      	ldr	r1, [pc, #376]	; (800314c <main+0x26c>)
 8002fd2:	485f      	ldr	r0, [pc, #380]	; (8003150 <main+0x270>)
 8002fd4:	f00a fb10 	bl	800d5f8 <xTaskCreate>
 8002fd8:	61f8      	str	r0, [r7, #28]

   configASSERT(status==pdPASS);
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d00a      	beq.n	8002ff6 <main+0x116>
        __asm volatile
 8002fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe4:	f383 8811 	msr	BASEPRI, r3
 8002fe8:	f3bf 8f6f 	isb	sy
 8002fec:	f3bf 8f4f 	dsb	sy
 8002ff0:	613b      	str	r3, [r7, #16]
    }
 8002ff2:	bf00      	nop
 8002ff4:	e7fe      	b.n	8002ff4 <main+0x114>

   /*GPS Task*/
   status = xTaskCreate(StartGPSTask, "NEOM8N", 128, NULL, 2, &GPSTaskHandle);
 8002ff6:	4b57      	ldr	r3, [pc, #348]	; (8003154 <main+0x274>)
 8002ff8:	9301      	str	r3, [sp, #4]
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	2300      	movs	r3, #0
 8003000:	2280      	movs	r2, #128	; 0x80
 8003002:	4955      	ldr	r1, [pc, #340]	; (8003158 <main+0x278>)
 8003004:	4855      	ldr	r0, [pc, #340]	; (800315c <main+0x27c>)
 8003006:	f00a faf7 	bl	800d5f8 <xTaskCreate>
 800300a:	61f8      	str	r0, [r7, #28]

   configASSERT(status==pdPASS);
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d00a      	beq.n	8003028 <main+0x148>
        __asm volatile
 8003012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003016:	f383 8811 	msr	BASEPRI, r3
 800301a:	f3bf 8f6f 	isb	sy
 800301e:	f3bf 8f4f 	dsb	sy
 8003022:	60fb      	str	r3, [r7, #12]
    }
 8003024:	bf00      	nop
 8003026:	e7fe      	b.n	8003026 <main+0x146>

   /*Ignition 1 and 2 task*/
   status = xTaskCreate(StartIgn1Task, "IGN1", 128, NULL, 2, &FirstIgnTaskHandle);
 8003028:	4b4d      	ldr	r3, [pc, #308]	; (8003160 <main+0x280>)
 800302a:	9301      	str	r3, [sp, #4]
 800302c:	2302      	movs	r3, #2
 800302e:	9300      	str	r3, [sp, #0]
 8003030:	2300      	movs	r3, #0
 8003032:	2280      	movs	r2, #128	; 0x80
 8003034:	494b      	ldr	r1, [pc, #300]	; (8003164 <main+0x284>)
 8003036:	484c      	ldr	r0, [pc, #304]	; (8003168 <main+0x288>)
 8003038:	f00a fade 	bl	800d5f8 <xTaskCreate>
 800303c:	61f8      	str	r0, [r7, #28]

   configASSERT(status==pdPASS);
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d00a      	beq.n	800305a <main+0x17a>
        __asm volatile
 8003044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003048:	f383 8811 	msr	BASEPRI, r3
 800304c:	f3bf 8f6f 	isb	sy
 8003050:	f3bf 8f4f 	dsb	sy
 8003054:	60bb      	str	r3, [r7, #8]
    }
 8003056:	bf00      	nop
 8003058:	e7fe      	b.n	8003058 <main+0x178>

   status = xTaskCreate(StartIgn2Task, "IGN2", 128, NULL, 2, &SecondIgnTaskHandle);
 800305a:	4b44      	ldr	r3, [pc, #272]	; (800316c <main+0x28c>)
 800305c:	9301      	str	r3, [sp, #4]
 800305e:	2302      	movs	r3, #2
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	2300      	movs	r3, #0
 8003064:	2280      	movs	r2, #128	; 0x80
 8003066:	4942      	ldr	r1, [pc, #264]	; (8003170 <main+0x290>)
 8003068:	4842      	ldr	r0, [pc, #264]	; (8003174 <main+0x294>)
 800306a:	f00a fac5 	bl	800d5f8 <xTaskCreate>
 800306e:	61f8      	str	r0, [r7, #28]

   configASSERT(status==pdPASS);
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d00a      	beq.n	800308c <main+0x1ac>
        __asm volatile
 8003076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800307a:	f383 8811 	msr	BASEPRI, r3
 800307e:	f3bf 8f6f 	isb	sy
 8003082:	f3bf 8f4f 	dsb	sy
 8003086:	607b      	str	r3, [r7, #4]
    }
 8003088:	bf00      	nop
 800308a:	e7fe      	b.n	800308a <main+0x1aa>

   /*SD Card Task. This task has lower priority*/
   status = xTaskCreate(StartSDCardTask, "SD-Card", 128, NULL, 1, &SDCardTaskHandle);
 800308c:	4b3a      	ldr	r3, [pc, #232]	; (8003178 <main+0x298>)
 800308e:	9301      	str	r3, [sp, #4]
 8003090:	2301      	movs	r3, #1
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	2300      	movs	r3, #0
 8003096:	2280      	movs	r2, #128	; 0x80
 8003098:	4938      	ldr	r1, [pc, #224]	; (800317c <main+0x29c>)
 800309a:	4839      	ldr	r0, [pc, #228]	; (8003180 <main+0x2a0>)
 800309c:	f00a faac 	bl	800d5f8 <xTaskCreate>
 80030a0:	61f8      	str	r0, [r7, #28]

   configASSERT(status==pdPASS);
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d00a      	beq.n	80030be <main+0x1de>
        __asm volatile
 80030a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ac:	f383 8811 	msr	BASEPRI, r3
 80030b0:	f3bf 8f6f 	isb	sy
 80030b4:	f3bf 8f4f 	dsb	sy
 80030b8:	603b      	str	r3, [r7, #0]
    }
 80030ba:	bf00      	nop
 80030bc:	e7fe      	b.n	80030bc <main+0x1dc>


   //Create semaphore. I used semaphore because that there are same priorites task.
   Semap1 = xSemaphoreCreateCounting(9, 0);
 80030be:	2100      	movs	r1, #0
 80030c0:	2009      	movs	r0, #9
 80030c2:	f009 ff89 	bl	800cfd8 <xQueueCreateCountingSemaphore>
 80030c6:	4603      	mov	r3, r0
 80030c8:	4a2e      	ldr	r2, [pc, #184]	; (8003184 <main+0x2a4>)
 80030ca:	6013      	str	r3, [r2, #0]

   if(Semap1 != NULL){
 	  //Create successfully
   }

   vTaskStartScheduler();
 80030cc:	f00a fbda 	bl	800d884 <vTaskStartScheduler>

   xTaskNotifyGive(BME280TaskHandle);
 80030d0:	4b1a      	ldr	r3, [pc, #104]	; (800313c <main+0x25c>)
 80030d2:	6818      	ldr	r0, [r3, #0]
 80030d4:	2300      	movs	r3, #0
 80030d6:	9300      	str	r3, [sp, #0]
 80030d8:	2302      	movs	r3, #2
 80030da:	2200      	movs	r2, #0
 80030dc:	2100      	movs	r1, #0
 80030de:	f00b f995 	bl	800e40c <xTaskGenericNotify>

   xTaskNotifyGive(BNO055TaskHandle);
 80030e2:	4b19      	ldr	r3, [pc, #100]	; (8003148 <main+0x268>)
 80030e4:	6818      	ldr	r0, [r3, #0]
 80030e6:	2300      	movs	r3, #0
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	2302      	movs	r3, #2
 80030ec:	2200      	movs	r2, #0
 80030ee:	2100      	movs	r1, #0
 80030f0:	f00b f98c 	bl	800e40c <xTaskGenericNotify>

   xTaskNotify(GPSTaskHandle,0,eNoAction);
 80030f4:	4b17      	ldr	r3, [pc, #92]	; (8003154 <main+0x274>)
 80030f6:	6818      	ldr	r0, [r3, #0]
 80030f8:	2300      	movs	r3, #0
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	2300      	movs	r3, #0
 80030fe:	2200      	movs	r2, #0
 8003100:	2100      	movs	r1, #0
 8003102:	f00b f983 	bl	800e40c <xTaskGenericNotify>

   xTaskNotify(UARTTaskHandle,0,eNoAction);
 8003106:	4b0a      	ldr	r3, [pc, #40]	; (8003130 <main+0x250>)
 8003108:	6818      	ldr	r0, [r3, #0]
 800310a:	2300      	movs	r3, #0
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	2300      	movs	r3, #0
 8003110:	2200      	movs	r2, #0
 8003112:	2100      	movs	r1, #0
 8003114:	f00b f97a 	bl	800e40c <xTaskGenericNotify>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003118:	e7fe      	b.n	8003118 <main+0x238>
 800311a:	bf00      	nop
 800311c:	3c23d70a 	.word	0x3c23d70a
 8003120:	200009b8 	.word	0x200009b8
 8003124:	20000668 	.word	0x20000668
 8003128:	080117fc 	.word	0x080117fc
 800312c:	08011800 	.word	0x08011800
 8003130:	20000998 	.word	0x20000998
 8003134:	08011810 	.word	0x08011810
 8003138:	0800367d 	.word	0x0800367d
 800313c:	2000099c 	.word	0x2000099c
 8003140:	08011818 	.word	0x08011818
 8003144:	080036c9 	.word	0x080036c9
 8003148:	200009a0 	.word	0x200009a0
 800314c:	08011820 	.word	0x08011820
 8003150:	08003869 	.word	0x08003869
 8003154:	200009a4 	.word	0x200009a4
 8003158:	08011828 	.word	0x08011828
 800315c:	08003bf1 	.word	0x08003bf1
 8003160:	200009ac 	.word	0x200009ac
 8003164:	08011830 	.word	0x08011830
 8003168:	08003c79 	.word	0x08003c79
 800316c:	200009b0 	.word	0x200009b0
 8003170:	08011838 	.word	0x08011838
 8003174:	08003d51 	.word	0x08003d51
 8003178:	200009a8 	.word	0x200009a8
 800317c:	08011840 	.word	0x08011840
 8003180:	08003dc9 	.word	0x08003dc9
 8003184:	200009b4 	.word	0x200009b4

08003188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b094      	sub	sp, #80	; 0x50
 800318c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800318e:	f107 0320 	add.w	r3, r7, #32
 8003192:	2230      	movs	r2, #48	; 0x30
 8003194:	2100      	movs	r1, #0
 8003196:	4618      	mov	r0, r3
 8003198:	f00b fed6 	bl	800ef48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800319c:	f107 030c 	add.w	r3, r7, #12
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	605a      	str	r2, [r3, #4]
 80031a6:	609a      	str	r2, [r3, #8]
 80031a8:	60da      	str	r2, [r3, #12]
 80031aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80031ac:	2300      	movs	r3, #0
 80031ae:	60bb      	str	r3, [r7, #8]
 80031b0:	4b28      	ldr	r3, [pc, #160]	; (8003254 <SystemClock_Config+0xcc>)
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	4a27      	ldr	r2, [pc, #156]	; (8003254 <SystemClock_Config+0xcc>)
 80031b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ba:	6413      	str	r3, [r2, #64]	; 0x40
 80031bc:	4b25      	ldr	r3, [pc, #148]	; (8003254 <SystemClock_Config+0xcc>)
 80031be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c4:	60bb      	str	r3, [r7, #8]
 80031c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031c8:	2300      	movs	r3, #0
 80031ca:	607b      	str	r3, [r7, #4]
 80031cc:	4b22      	ldr	r3, [pc, #136]	; (8003258 <SystemClock_Config+0xd0>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a21      	ldr	r2, [pc, #132]	; (8003258 <SystemClock_Config+0xd0>)
 80031d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	4b1f      	ldr	r3, [pc, #124]	; (8003258 <SystemClock_Config+0xd0>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031e0:	607b      	str	r3, [r7, #4]
 80031e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80031e4:	2302      	movs	r3, #2
 80031e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031e8:	2301      	movs	r3, #1
 80031ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80031ec:	2310      	movs	r3, #16
 80031ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031f0:	2302      	movs	r3, #2
 80031f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80031f4:	2300      	movs	r3, #0
 80031f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80031f8:	2308      	movs	r3, #8
 80031fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80031fc:	23a8      	movs	r3, #168	; 0xa8
 80031fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003200:	2302      	movs	r3, #2
 8003202:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8003204:	2308      	movs	r3, #8
 8003206:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003208:	f107 0320 	add.w	r3, r7, #32
 800320c:	4618      	mov	r0, r3
 800320e:	f003 fce7 	bl	8006be0 <HAL_RCC_OscConfig>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003218:	f000 fe68 	bl	8003eec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800321c:	230f      	movs	r3, #15
 800321e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003220:	2302      	movs	r3, #2
 8003222:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003228:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800322c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800322e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003232:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003234:	f107 030c 	add.w	r3, r7, #12
 8003238:	2105      	movs	r1, #5
 800323a:	4618      	mov	r0, r3
 800323c:	f003 ff48 	bl	80070d0 <HAL_RCC_ClockConfig>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003246:	f000 fe51 	bl	8003eec <Error_Handler>
  }
}
 800324a:	bf00      	nop
 800324c:	3750      	adds	r7, #80	; 0x50
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	40023800 	.word	0x40023800
 8003258:	40007000 	.word	0x40007000

0800325c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003260:	4b12      	ldr	r3, [pc, #72]	; (80032ac <MX_I2C1_Init+0x50>)
 8003262:	4a13      	ldr	r2, [pc, #76]	; (80032b0 <MX_I2C1_Init+0x54>)
 8003264:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003266:	4b11      	ldr	r3, [pc, #68]	; (80032ac <MX_I2C1_Init+0x50>)
 8003268:	4a12      	ldr	r2, [pc, #72]	; (80032b4 <MX_I2C1_Init+0x58>)
 800326a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800326c:	4b0f      	ldr	r3, [pc, #60]	; (80032ac <MX_I2C1_Init+0x50>)
 800326e:	2200      	movs	r2, #0
 8003270:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003272:	4b0e      	ldr	r3, [pc, #56]	; (80032ac <MX_I2C1_Init+0x50>)
 8003274:	2200      	movs	r2, #0
 8003276:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003278:	4b0c      	ldr	r3, [pc, #48]	; (80032ac <MX_I2C1_Init+0x50>)
 800327a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800327e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003280:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <MX_I2C1_Init+0x50>)
 8003282:	2200      	movs	r2, #0
 8003284:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003286:	4b09      	ldr	r3, [pc, #36]	; (80032ac <MX_I2C1_Init+0x50>)
 8003288:	2200      	movs	r2, #0
 800328a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800328c:	4b07      	ldr	r3, [pc, #28]	; (80032ac <MX_I2C1_Init+0x50>)
 800328e:	2200      	movs	r2, #0
 8003290:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003292:	4b06      	ldr	r3, [pc, #24]	; (80032ac <MX_I2C1_Init+0x50>)
 8003294:	2200      	movs	r2, #0
 8003296:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003298:	4804      	ldr	r0, [pc, #16]	; (80032ac <MX_I2C1_Init+0x50>)
 800329a:	f002 f853 	bl	8005344 <HAL_I2C_Init>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80032a4:	f000 fe22 	bl	8003eec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80032a8:	bf00      	nop
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	20000614 	.word	0x20000614
 80032b0:	40005400 	.word	0x40005400
 80032b4:	000186a0 	.word	0x000186a0

080032b8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80032bc:	4b12      	ldr	r3, [pc, #72]	; (8003308 <MX_I2C2_Init+0x50>)
 80032be:	4a13      	ldr	r2, [pc, #76]	; (800330c <MX_I2C2_Init+0x54>)
 80032c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80032c2:	4b11      	ldr	r3, [pc, #68]	; (8003308 <MX_I2C2_Init+0x50>)
 80032c4:	4a12      	ldr	r2, [pc, #72]	; (8003310 <MX_I2C2_Init+0x58>)
 80032c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80032c8:	4b0f      	ldr	r3, [pc, #60]	; (8003308 <MX_I2C2_Init+0x50>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80032ce:	4b0e      	ldr	r3, [pc, #56]	; (8003308 <MX_I2C2_Init+0x50>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032d4:	4b0c      	ldr	r3, [pc, #48]	; (8003308 <MX_I2C2_Init+0x50>)
 80032d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032da:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032dc:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <MX_I2C2_Init+0x50>)
 80032de:	2200      	movs	r2, #0
 80032e0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80032e2:	4b09      	ldr	r3, [pc, #36]	; (8003308 <MX_I2C2_Init+0x50>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80032e8:	4b07      	ldr	r3, [pc, #28]	; (8003308 <MX_I2C2_Init+0x50>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032ee:	4b06      	ldr	r3, [pc, #24]	; (8003308 <MX_I2C2_Init+0x50>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80032f4:	4804      	ldr	r0, [pc, #16]	; (8003308 <MX_I2C2_Init+0x50>)
 80032f6:	f002 f825 	bl	8005344 <HAL_I2C_Init>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003300:	f000 fdf4 	bl	8003eec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003304:	bf00      	nop
 8003306:	bd80      	pop	{r7, pc}
 8003308:	20000668 	.word	0x20000668
 800330c:	40005800 	.word	0x40005800
 8003310:	000186a0 	.word	0x000186a0

08003314 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003318:	4b0d      	ldr	r3, [pc, #52]	; (8003350 <MX_SDIO_SD_Init+0x3c>)
 800331a:	4a0e      	ldr	r2, [pc, #56]	; (8003354 <MX_SDIO_SD_Init+0x40>)
 800331c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800331e:	4b0c      	ldr	r3, [pc, #48]	; (8003350 <MX_SDIO_SD_Init+0x3c>)
 8003320:	2200      	movs	r2, #0
 8003322:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003324:	4b0a      	ldr	r3, [pc, #40]	; (8003350 <MX_SDIO_SD_Init+0x3c>)
 8003326:	2200      	movs	r2, #0
 8003328:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800332a:	4b09      	ldr	r3, [pc, #36]	; (8003350 <MX_SDIO_SD_Init+0x3c>)
 800332c:	2200      	movs	r2, #0
 800332e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8003330:	4b07      	ldr	r3, [pc, #28]	; (8003350 <MX_SDIO_SD_Init+0x3c>)
 8003332:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003336:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003338:	4b05      	ldr	r3, [pc, #20]	; (8003350 <MX_SDIO_SD_Init+0x3c>)
 800333a:	2200      	movs	r2, #0
 800333c:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 800333e:	4b04      	ldr	r3, [pc, #16]	; (8003350 <MX_SDIO_SD_Init+0x3c>)
 8003340:	2204      	movs	r2, #4
 8003342:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8003344:	bf00      	nop
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	200006bc 	.word	0x200006bc
 8003354:	40012c00 	.word	0x40012c00

08003358 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800335c:	4b17      	ldr	r3, [pc, #92]	; (80033bc <MX_SPI1_Init+0x64>)
 800335e:	4a18      	ldr	r2, [pc, #96]	; (80033c0 <MX_SPI1_Init+0x68>)
 8003360:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003362:	4b16      	ldr	r3, [pc, #88]	; (80033bc <MX_SPI1_Init+0x64>)
 8003364:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003368:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800336a:	4b14      	ldr	r3, [pc, #80]	; (80033bc <MX_SPI1_Init+0x64>)
 800336c:	2200      	movs	r2, #0
 800336e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003370:	4b12      	ldr	r3, [pc, #72]	; (80033bc <MX_SPI1_Init+0x64>)
 8003372:	2200      	movs	r2, #0
 8003374:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003376:	4b11      	ldr	r3, [pc, #68]	; (80033bc <MX_SPI1_Init+0x64>)
 8003378:	2200      	movs	r2, #0
 800337a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800337c:	4b0f      	ldr	r3, [pc, #60]	; (80033bc <MX_SPI1_Init+0x64>)
 800337e:	2200      	movs	r2, #0
 8003380:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003382:	4b0e      	ldr	r3, [pc, #56]	; (80033bc <MX_SPI1_Init+0x64>)
 8003384:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003388:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800338a:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <MX_SPI1_Init+0x64>)
 800338c:	2200      	movs	r2, #0
 800338e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003390:	4b0a      	ldr	r3, [pc, #40]	; (80033bc <MX_SPI1_Init+0x64>)
 8003392:	2200      	movs	r2, #0
 8003394:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003396:	4b09      	ldr	r3, [pc, #36]	; (80033bc <MX_SPI1_Init+0x64>)
 8003398:	2200      	movs	r2, #0
 800339a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800339c:	4b07      	ldr	r3, [pc, #28]	; (80033bc <MX_SPI1_Init+0x64>)
 800339e:	2200      	movs	r2, #0
 80033a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80033a2:	4b06      	ldr	r3, [pc, #24]	; (80033bc <MX_SPI1_Init+0x64>)
 80033a4:	220a      	movs	r2, #10
 80033a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80033a8:	4804      	ldr	r0, [pc, #16]	; (80033bc <MX_SPI1_Init+0x64>)
 80033aa:	f005 fa2e 	bl	800880a <HAL_SPI_Init>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d001      	beq.n	80033b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80033b4:	f000 fd9a 	bl	8003eec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80033b8:	bf00      	nop
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	20000740 	.word	0x20000740
 80033c0:	40013000 	.word	0x40013000

080033c4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80033c8:	4b17      	ldr	r3, [pc, #92]	; (8003428 <MX_SPI2_Init+0x64>)
 80033ca:	4a18      	ldr	r2, [pc, #96]	; (800342c <MX_SPI2_Init+0x68>)
 80033cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80033ce:	4b16      	ldr	r3, [pc, #88]	; (8003428 <MX_SPI2_Init+0x64>)
 80033d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80033d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80033d6:	4b14      	ldr	r3, [pc, #80]	; (8003428 <MX_SPI2_Init+0x64>)
 80033d8:	2200      	movs	r2, #0
 80033da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80033dc:	4b12      	ldr	r3, [pc, #72]	; (8003428 <MX_SPI2_Init+0x64>)
 80033de:	2200      	movs	r2, #0
 80033e0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80033e2:	4b11      	ldr	r3, [pc, #68]	; (8003428 <MX_SPI2_Init+0x64>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80033e8:	4b0f      	ldr	r3, [pc, #60]	; (8003428 <MX_SPI2_Init+0x64>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80033ee:	4b0e      	ldr	r3, [pc, #56]	; (8003428 <MX_SPI2_Init+0x64>)
 80033f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033f4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80033f6:	4b0c      	ldr	r3, [pc, #48]	; (8003428 <MX_SPI2_Init+0x64>)
 80033f8:	2210      	movs	r2, #16
 80033fa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033fc:	4b0a      	ldr	r3, [pc, #40]	; (8003428 <MX_SPI2_Init+0x64>)
 80033fe:	2200      	movs	r2, #0
 8003400:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003402:	4b09      	ldr	r3, [pc, #36]	; (8003428 <MX_SPI2_Init+0x64>)
 8003404:	2200      	movs	r2, #0
 8003406:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003408:	4b07      	ldr	r3, [pc, #28]	; (8003428 <MX_SPI2_Init+0x64>)
 800340a:	2200      	movs	r2, #0
 800340c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800340e:	4b06      	ldr	r3, [pc, #24]	; (8003428 <MX_SPI2_Init+0x64>)
 8003410:	220a      	movs	r2, #10
 8003412:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003414:	4804      	ldr	r0, [pc, #16]	; (8003428 <MX_SPI2_Init+0x64>)
 8003416:	f005 f9f8 	bl	800880a <HAL_SPI_Init>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003420:	f000 fd64 	bl	8003eec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003424:	bf00      	nop
 8003426:	bd80      	pop	{r7, pc}
 8003428:	20000798 	.word	0x20000798
 800342c:	40003800 	.word	0x40003800

08003430 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003434:	4b11      	ldr	r3, [pc, #68]	; (800347c <MX_USART1_UART_Init+0x4c>)
 8003436:	4a12      	ldr	r2, [pc, #72]	; (8003480 <MX_USART1_UART_Init+0x50>)
 8003438:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800343a:	4b10      	ldr	r3, [pc, #64]	; (800347c <MX_USART1_UART_Init+0x4c>)
 800343c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003440:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003442:	4b0e      	ldr	r3, [pc, #56]	; (800347c <MX_USART1_UART_Init+0x4c>)
 8003444:	2200      	movs	r2, #0
 8003446:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003448:	4b0c      	ldr	r3, [pc, #48]	; (800347c <MX_USART1_UART_Init+0x4c>)
 800344a:	2200      	movs	r2, #0
 800344c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800344e:	4b0b      	ldr	r3, [pc, #44]	; (800347c <MX_USART1_UART_Init+0x4c>)
 8003450:	2200      	movs	r2, #0
 8003452:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003454:	4b09      	ldr	r3, [pc, #36]	; (800347c <MX_USART1_UART_Init+0x4c>)
 8003456:	220c      	movs	r2, #12
 8003458:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800345a:	4b08      	ldr	r3, [pc, #32]	; (800347c <MX_USART1_UART_Init+0x4c>)
 800345c:	2200      	movs	r2, #0
 800345e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003460:	4b06      	ldr	r3, [pc, #24]	; (800347c <MX_USART1_UART_Init+0x4c>)
 8003462:	2200      	movs	r2, #0
 8003464:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003466:	4805      	ldr	r0, [pc, #20]	; (800347c <MX_USART1_UART_Init+0x4c>)
 8003468:	f005 fd06 	bl	8008e78 <HAL_UART_Init>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003472:	f000 fd3b 	bl	8003eec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003476:	bf00      	nop
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	200007f0 	.word	0x200007f0
 8003480:	40011000 	.word	0x40011000

08003484 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003488:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <MX_USART2_UART_Init+0x4c>)
 800348a:	4a12      	ldr	r2, [pc, #72]	; (80034d4 <MX_USART2_UART_Init+0x50>)
 800348c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800348e:	4b10      	ldr	r3, [pc, #64]	; (80034d0 <MX_USART2_UART_Init+0x4c>)
 8003490:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003494:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003496:	4b0e      	ldr	r3, [pc, #56]	; (80034d0 <MX_USART2_UART_Init+0x4c>)
 8003498:	2200      	movs	r2, #0
 800349a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800349c:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <MX_USART2_UART_Init+0x4c>)
 800349e:	2200      	movs	r2, #0
 80034a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80034a2:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <MX_USART2_UART_Init+0x4c>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80034a8:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <MX_USART2_UART_Init+0x4c>)
 80034aa:	220c      	movs	r2, #12
 80034ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034ae:	4b08      	ldr	r3, [pc, #32]	; (80034d0 <MX_USART2_UART_Init+0x4c>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80034b4:	4b06      	ldr	r3, [pc, #24]	; (80034d0 <MX_USART2_UART_Init+0x4c>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80034ba:	4805      	ldr	r0, [pc, #20]	; (80034d0 <MX_USART2_UART_Init+0x4c>)
 80034bc:	f005 fcdc 	bl	8008e78 <HAL_UART_Init>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80034c6:	f000 fd11 	bl	8003eec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80034ca:	bf00      	nop
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	20000834 	.word	0x20000834
 80034d4:	40004400 	.word	0x40004400

080034d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80034de:	2300      	movs	r3, #0
 80034e0:	607b      	str	r3, [r7, #4]
 80034e2:	4b1b      	ldr	r3, [pc, #108]	; (8003550 <MX_DMA_Init+0x78>)
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e6:	4a1a      	ldr	r2, [pc, #104]	; (8003550 <MX_DMA_Init+0x78>)
 80034e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034ec:	6313      	str	r3, [r2, #48]	; 0x30
 80034ee:	4b18      	ldr	r3, [pc, #96]	; (8003550 <MX_DMA_Init+0x78>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034f6:	607b      	str	r3, [r7, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	603b      	str	r3, [r7, #0]
 80034fe:	4b14      	ldr	r3, [pc, #80]	; (8003550 <MX_DMA_Init+0x78>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	4a13      	ldr	r2, [pc, #76]	; (8003550 <MX_DMA_Init+0x78>)
 8003504:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003508:	6313      	str	r3, [r2, #48]	; 0x30
 800350a:	4b11      	ldr	r3, [pc, #68]	; (8003550 <MX_DMA_Init+0x78>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003512:	603b      	str	r3, [r7, #0]
 8003514:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003516:	2200      	movs	r2, #0
 8003518:	2100      	movs	r1, #0
 800351a:	2010      	movs	r0, #16
 800351c:	f001 fa48 	bl	80049b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003520:	2010      	movs	r0, #16
 8003522:	f001 fa61 	bl	80049e8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8003526:	2200      	movs	r2, #0
 8003528:	2100      	movs	r1, #0
 800352a:	2011      	movs	r0, #17
 800352c:	f001 fa40 	bl	80049b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003530:	2011      	movs	r0, #17
 8003532:	f001 fa59 	bl	80049e8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8003536:	2200      	movs	r2, #0
 8003538:	2100      	movs	r1, #0
 800353a:	2046      	movs	r0, #70	; 0x46
 800353c:	f001 fa38 	bl	80049b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8003540:	2046      	movs	r0, #70	; 0x46
 8003542:	f001 fa51 	bl	80049e8 <HAL_NVIC_EnableIRQ>

}
 8003546:	bf00      	nop
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	40023800 	.word	0x40023800

08003554 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08a      	sub	sp, #40	; 0x28
 8003558:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800355a:	f107 0314 	add.w	r3, r7, #20
 800355e:	2200      	movs	r2, #0
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	605a      	str	r2, [r3, #4]
 8003564:	609a      	str	r2, [r3, #8]
 8003566:	60da      	str	r2, [r3, #12]
 8003568:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800356a:	2300      	movs	r3, #0
 800356c:	613b      	str	r3, [r7, #16]
 800356e:	4b40      	ldr	r3, [pc, #256]	; (8003670 <MX_GPIO_Init+0x11c>)
 8003570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003572:	4a3f      	ldr	r2, [pc, #252]	; (8003670 <MX_GPIO_Init+0x11c>)
 8003574:	f043 0301 	orr.w	r3, r3, #1
 8003578:	6313      	str	r3, [r2, #48]	; 0x30
 800357a:	4b3d      	ldr	r3, [pc, #244]	; (8003670 <MX_GPIO_Init+0x11c>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	613b      	str	r3, [r7, #16]
 8003584:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003586:	2300      	movs	r3, #0
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	4b39      	ldr	r3, [pc, #228]	; (8003670 <MX_GPIO_Init+0x11c>)
 800358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358e:	4a38      	ldr	r2, [pc, #224]	; (8003670 <MX_GPIO_Init+0x11c>)
 8003590:	f043 0302 	orr.w	r3, r3, #2
 8003594:	6313      	str	r3, [r2, #48]	; 0x30
 8003596:	4b36      	ldr	r3, [pc, #216]	; (8003670 <MX_GPIO_Init+0x11c>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	60bb      	str	r3, [r7, #8]
 80035a6:	4b32      	ldr	r3, [pc, #200]	; (8003670 <MX_GPIO_Init+0x11c>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	4a31      	ldr	r2, [pc, #196]	; (8003670 <MX_GPIO_Init+0x11c>)
 80035ac:	f043 0310 	orr.w	r3, r3, #16
 80035b0:	6313      	str	r3, [r2, #48]	; 0x30
 80035b2:	4b2f      	ldr	r3, [pc, #188]	; (8003670 <MX_GPIO_Init+0x11c>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	f003 0310 	and.w	r3, r3, #16
 80035ba:	60bb      	str	r3, [r7, #8]
 80035bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035be:	2300      	movs	r3, #0
 80035c0:	607b      	str	r3, [r7, #4]
 80035c2:	4b2b      	ldr	r3, [pc, #172]	; (8003670 <MX_GPIO_Init+0x11c>)
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c6:	4a2a      	ldr	r2, [pc, #168]	; (8003670 <MX_GPIO_Init+0x11c>)
 80035c8:	f043 0304 	orr.w	r3, r3, #4
 80035cc:	6313      	str	r3, [r2, #48]	; 0x30
 80035ce:	4b28      	ldr	r3, [pc, #160]	; (8003670 <MX_GPIO_Init+0x11c>)
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	f003 0304 	and.w	r3, r3, #4
 80035d6:	607b      	str	r3, [r7, #4]
 80035d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035da:	2300      	movs	r3, #0
 80035dc:	603b      	str	r3, [r7, #0]
 80035de:	4b24      	ldr	r3, [pc, #144]	; (8003670 <MX_GPIO_Init+0x11c>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	4a23      	ldr	r2, [pc, #140]	; (8003670 <MX_GPIO_Init+0x11c>)
 80035e4:	f043 0308 	orr.w	r3, r3, #8
 80035e8:	6313      	str	r3, [r2, #48]	; 0x30
 80035ea:	4b21      	ldr	r3, [pc, #132]	; (8003670 <MX_GPIO_Init+0x11c>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ee:	f003 0308 	and.w	r3, r3, #8
 80035f2:	603b      	str	r3, [r7, #0]
 80035f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IGN1_OUT_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);
 80035f6:	2200      	movs	r2, #0
 80035f8:	f241 0104 	movw	r1, #4100	; 0x1004
 80035fc:	481d      	ldr	r0, [pc, #116]	; (8003674 <MX_GPIO_Init+0x120>)
 80035fe:	f001 fe87 	bl	8005310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IGN2_OUT_GPIO_Port, IGN2_OUT_Pin, GPIO_PIN_RESET);
 8003602:	2200      	movs	r2, #0
 8003604:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003608:	481b      	ldr	r0, [pc, #108]	; (8003678 <MX_GPIO_Init+0x124>)
 800360a:	f001 fe81 	bl	8005310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IGN1_OUT_Pin */
  GPIO_InitStruct.Pin = IGN1_OUT_Pin;
 800360e:	2304      	movs	r3, #4
 8003610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003612:	2301      	movs	r3, #1
 8003614:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003616:	2300      	movs	r3, #0
 8003618:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800361a:	2303      	movs	r3, #3
 800361c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IGN1_OUT_GPIO_Port, &GPIO_InitStruct);
 800361e:	f107 0314 	add.w	r3, r7, #20
 8003622:	4619      	mov	r1, r3
 8003624:	4813      	ldr	r0, [pc, #76]	; (8003674 <MX_GPIO_Init+0x120>)
 8003626:	f001 fcd7 	bl	8004fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IGN2_OUT_Pin */
  GPIO_InitStruct.Pin = IGN2_OUT_Pin;
 800362a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800362e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003630:	2301      	movs	r3, #1
 8003632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003634:	2300      	movs	r3, #0
 8003636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003638:	2303      	movs	r3, #3
 800363a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IGN2_OUT_GPIO_Port, &GPIO_InitStruct);
 800363c:	f107 0314 	add.w	r3, r7, #20
 8003640:	4619      	mov	r1, r3
 8003642:	480d      	ldr	r0, [pc, #52]	; (8003678 <MX_GPIO_Init+0x124>)
 8003644:	f001 fcc8 	bl	8004fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8003648:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800364c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800364e:	2301      	movs	r3, #1
 8003650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003652:	2300      	movs	r3, #0
 8003654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003656:	2300      	movs	r3, #0
 8003658:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 800365a:	f107 0314 	add.w	r3, r7, #20
 800365e:	4619      	mov	r1, r3
 8003660:	4804      	ldr	r0, [pc, #16]	; (8003674 <MX_GPIO_Init+0x120>)
 8003662:	f001 fcb9 	bl	8004fd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003666:	bf00      	nop
 8003668:	3728      	adds	r7, #40	; 0x28
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40023800 	.word	0x40023800
 8003674:	40020400 	.word	0x40020400
 8003678:	40021000 	.word	0x40021000

0800367c <StartUARTTask>:

/* USER CODE BEGIN 4 */

//UART Task
void StartUARTTask(void *argument){
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]

	for(;;){
		if(Semap1 != NULL){
 8003684:	4b0d      	ldr	r3, [pc, #52]	; (80036bc <StartUARTTask+0x40>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0fb      	beq.n	8003684 <StartUARTTask+0x8>
			if(xSemaphoreTake(Semap1,portMAX_DELAY) == pdTRUE){
 800368c:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <StartUARTTask+0x40>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f04f 31ff 	mov.w	r1, #4294967295
 8003694:	4618      	mov	r0, r3
 8003696:	f009 fdb9 	bl	800d20c <xQueueSemaphoreTake>
 800369a:	4603      	mov	r3, r0
 800369c:	2b01      	cmp	r3, #1
 800369e:	d1f1      	bne.n	8003684 <StartUARTTask+0x8>
				//Send message to ground station
				if(HAL_UART_Transmit(&huart1, (uint8_t *)buff, 60, 150) != HAL_OK){
 80036a0:	2396      	movs	r3, #150	; 0x96
 80036a2:	223c      	movs	r2, #60	; 0x3c
 80036a4:	4906      	ldr	r1, [pc, #24]	; (80036c0 <StartUARTTask+0x44>)
 80036a6:	4807      	ldr	r0, [pc, #28]	; (80036c4 <StartUARTTask+0x48>)
 80036a8:	f005 fc33 	bl	8008f12 <HAL_UART_Transmit>
					//Error handler

				}
				xSemaphoreGive(Semap1);
 80036ac:	4b03      	ldr	r3, [pc, #12]	; (80036bc <StartUARTTask+0x40>)
 80036ae:	6818      	ldr	r0, [r3, #0]
 80036b0:	2300      	movs	r3, #0
 80036b2:	2200      	movs	r2, #0
 80036b4:	2100      	movs	r1, #0
 80036b6:	f009 fcc3 	bl	800d040 <xQueueGenericSend>
		if(Semap1 != NULL){
 80036ba:	e7e3      	b.n	8003684 <StartUARTTask+0x8>
 80036bc:	200009b4 	.word	0x200009b4
 80036c0:	20000aa0 	.word	0x20000aa0
 80036c4:	200007f0 	.word	0x200007f0

080036c8 <StartBME280Task>:
		}
	}
}

//BME280 task
void StartBME280Task(void *argument){
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af02      	add	r7, sp, #8
 80036ce:	6078      	str	r0, [r7, #4]

	for(;;){
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 80036d0:	f04f 32ff 	mov.w	r2, #4294967295
 80036d4:	2101      	movs	r1, #1
 80036d6:	2000      	movs	r0, #0
 80036d8:	f00a fe30 	bl	800e33c <ulTaskGenericNotifyTake>
		if(Semap1 != NULL){
 80036dc:	4b57      	ldr	r3, [pc, #348]	; (800383c <StartBME280Task+0x174>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 8098 	beq.w	8003816 <StartBME280Task+0x14e>
			if(xSemaphoreTake(Semap1,portMAX_DELAY) == pdTRUE){
 80036e6:	4b55      	ldr	r3, [pc, #340]	; (800383c <StartBME280Task+0x174>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f04f 31ff 	mov.w	r1, #4294967295
 80036ee:	4618      	mov	r0, r3
 80036f0:	f009 fd8c 	bl	800d20c <xQueueSemaphoreTake>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	f040 808d 	bne.w	8003816 <StartBME280Task+0x14e>
				/* We were able to obtain the semaphore and can now access the
				   shared resource. */
				Temperature = BME280_Temperature();
 80036fc:	f7fe fd24 	bl	8002148 <BME280_Temperature>
 8003700:	ec53 2b10 	vmov	r2, r3, d0
 8003704:	4610      	mov	r0, r2
 8003706:	4619      	mov	r1, r3
 8003708:	f7fd fa36 	bl	8000b78 <__aeabi_d2f>
 800370c:	4603      	mov	r3, r0
 800370e:	4a4c      	ldr	r2, [pc, #304]	; (8003840 <StartBME280Task+0x178>)
 8003710:	6013      	str	r3, [r2, #0]

				Pressure = BME280_Pressure();
 8003712:	f7fe fc95 	bl	8002040 <BME280_Pressure>
 8003716:	ec53 2b10 	vmov	r2, r3, d0
 800371a:	4610      	mov	r0, r2
 800371c:	4619      	mov	r1, r3
 800371e:	f7fd fa2b 	bl	8000b78 <__aeabi_d2f>
 8003722:	4603      	mov	r3, r0
 8003724:	4a47      	ldr	r2, [pc, #284]	; (8003844 <StartBME280Task+0x17c>)
 8003726:	6013      	str	r3, [r2, #0]

				Humidity = BME280_Humidity();
 8003728:	f7fe fccc 	bl	80020c4 <BME280_Humidity>
 800372c:	ec53 2b10 	vmov	r2, r3, d0
 8003730:	4610      	mov	r0, r2
 8003732:	4619      	mov	r1, r3
 8003734:	f7fd fa20 	bl	8000b78 <__aeabi_d2f>
 8003738:	4603      	mov	r3, r0
 800373a:	4a43      	ldr	r2, [pc, #268]	; (8003848 <StartBME280Task+0x180>)
 800373c:	6013      	str	r3, [r2, #0]

				Altitude = BME280_Altitude();
 800373e:	f7fe fd47 	bl	80021d0 <BME280_Altitude>
 8003742:	eef0 7a40 	vmov.f32	s15, s0
 8003746:	4b41      	ldr	r3, [pc, #260]	; (800384c <StartBME280Task+0x184>)
 8003748:	edc3 7a00 	vstr	s15, [r3]

				//vTaskDelay(pdMS_TO_TICKS(50));

				//Kalman variables
				Temperature_Kalman = BME280_Kalman_Temp(Temperature);
 800374c:	4b3c      	ldr	r3, [pc, #240]	; (8003840 <StartBME280Task+0x178>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f7fc ff09 	bl	8000568 <__aeabi_f2d>
 8003756:	4602      	mov	r2, r0
 8003758:	460b      	mov	r3, r1
 800375a:	ec43 2b10 	vmov	d0, r2, r3
 800375e:	f7fe ff7f 	bl	8002660 <BME280_Kalman_Temp>
 8003762:	ec53 2b10 	vmov	r2, r3, d0
 8003766:	4610      	mov	r0, r2
 8003768:	4619      	mov	r1, r3
 800376a:	f7fd fa05 	bl	8000b78 <__aeabi_d2f>
 800376e:	4603      	mov	r3, r0
 8003770:	4a37      	ldr	r2, [pc, #220]	; (8003850 <StartBME280Task+0x188>)
 8003772:	6013      	str	r3, [r2, #0]

				Humidity_Kalman = BME280_Kalman_Hum(Humidity);
 8003774:	4b34      	ldr	r3, [pc, #208]	; (8003848 <StartBME280Task+0x180>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f7fc fef5 	bl	8000568 <__aeabi_f2d>
 800377e:	4602      	mov	r2, r0
 8003780:	460b      	mov	r3, r1
 8003782:	ec43 2b10 	vmov	d0, r2, r3
 8003786:	f7fe fecb 	bl	8002520 <BME280_Kalman_Hum>
 800378a:	ec53 2b10 	vmov	r2, r3, d0
 800378e:	4610      	mov	r0, r2
 8003790:	4619      	mov	r1, r3
 8003792:	f7fd f9f1 	bl	8000b78 <__aeabi_d2f>
 8003796:	4603      	mov	r3, r0
 8003798:	4a2e      	ldr	r2, [pc, #184]	; (8003854 <StartBME280Task+0x18c>)
 800379a:	6013      	str	r3, [r2, #0]

				Pressure_Kalman = BME280_Kalman_Press(Pressure);
 800379c:	4b29      	ldr	r3, [pc, #164]	; (8003844 <StartBME280Task+0x17c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7fc fee1 	bl	8000568 <__aeabi_f2d>
 80037a6:	4602      	mov	r2, r0
 80037a8:	460b      	mov	r3, r1
 80037aa:	ec43 2b10 	vmov	d0, r2, r3
 80037ae:	f7fe fe17 	bl	80023e0 <BME280_Kalman_Press>
 80037b2:	ec53 2b10 	vmov	r2, r3, d0
 80037b6:	4610      	mov	r0, r2
 80037b8:	4619      	mov	r1, r3
 80037ba:	f7fd f9dd 	bl	8000b78 <__aeabi_d2f>
 80037be:	4603      	mov	r3, r0
 80037c0:	4a25      	ldr	r2, [pc, #148]	; (8003858 <StartBME280Task+0x190>)
 80037c2:	6013      	str	r3, [r2, #0]

				Altitude_Kalman = BME280_Kalman_Alt(Altitude);
 80037c4:	4b21      	ldr	r3, [pc, #132]	; (800384c <StartBME280Task+0x184>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fc fecd 	bl	8000568 <__aeabi_f2d>
 80037ce:	4602      	mov	r2, r0
 80037d0:	460b      	mov	r3, r1
 80037d2:	ec43 2b10 	vmov	d0, r2, r3
 80037d6:	f7fe fd59 	bl	800228c <BME280_Kalman_Alt>
 80037da:	eef0 7a40 	vmov.f32	s15, s0
 80037de:	4b1f      	ldr	r3, [pc, #124]	; (800385c <StartBME280Task+0x194>)
 80037e0:	edc3 7a00 	vstr	s15, [r3]

				// xTaskNotify to First IGN and Second IGN@
				xTaskNotify(FirstIgnTaskHandle,0,eNoAction);
 80037e4:	4b1e      	ldr	r3, [pc, #120]	; (8003860 <StartBME280Task+0x198>)
 80037e6:	6818      	ldr	r0, [r3, #0]
 80037e8:	2300      	movs	r3, #0
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	2300      	movs	r3, #0
 80037ee:	2200      	movs	r2, #0
 80037f0:	2100      	movs	r1, #0
 80037f2:	f00a fe0b 	bl	800e40c <xTaskGenericNotify>

				xTaskNotify(SecondIgnTaskHandle,0,eNoAction);
 80037f6:	4b1b      	ldr	r3, [pc, #108]	; (8003864 <StartBME280Task+0x19c>)
 80037f8:	6818      	ldr	r0, [r3, #0]
 80037fa:	2300      	movs	r3, #0
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	2300      	movs	r3, #0
 8003800:	2200      	movs	r2, #0
 8003802:	2100      	movs	r1, #0
 8003804:	f00a fe02 	bl	800e40c <xTaskGenericNotify>
				// research how to calculate altitude from pressure

				/* We have finished accessing the shared resource. Release the
				   semaphore. */

				xSemaphoreGive(Semap1);
 8003808:	4b0c      	ldr	r3, [pc, #48]	; (800383c <StartBME280Task+0x174>)
 800380a:	6818      	ldr	r0, [r3, #0]
 800380c:	2300      	movs	r3, #0
 800380e:	2200      	movs	r2, #0
 8003810:	2100      	movs	r1, #0
 8003812:	f009 fc15 	bl	800d040 <xQueueGenericSend>
				/* We could not obtain the semaphore and can therefore not access
				   the shared resource safely. */
			}

		}
		xTaskNotifyGive(FirstIgnTaskHandle);
 8003816:	4b12      	ldr	r3, [pc, #72]	; (8003860 <StartBME280Task+0x198>)
 8003818:	6818      	ldr	r0, [r3, #0]
 800381a:	2300      	movs	r3, #0
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	2302      	movs	r3, #2
 8003820:	2200      	movs	r2, #0
 8003822:	2100      	movs	r1, #0
 8003824:	f00a fdf2 	bl	800e40c <xTaskGenericNotify>
		xTaskNotifyGive(SecondIgnTaskHandle);
 8003828:	4b0e      	ldr	r3, [pc, #56]	; (8003864 <StartBME280Task+0x19c>)
 800382a:	6818      	ldr	r0, [r3, #0]
 800382c:	2300      	movs	r3, #0
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	2302      	movs	r3, #2
 8003832:	2200      	movs	r2, #0
 8003834:	2100      	movs	r1, #0
 8003836:	f00a fde9 	bl	800e40c <xTaskGenericNotify>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 800383a:	e749      	b.n	80036d0 <StartBME280Task+0x8>
 800383c:	200009b4 	.word	0x200009b4
 8003840:	20000a78 	.word	0x20000a78
 8003844:	20000a7c 	.word	0x20000a7c
 8003848:	20000a80 	.word	0x20000a80
 800384c:	200005b8 	.word	0x200005b8
 8003850:	20000a8c 	.word	0x20000a8c
 8003854:	20000a90 	.word	0x20000a90
 8003858:	20000a88 	.word	0x20000a88
 800385c:	20000a84 	.word	0x20000a84
 8003860:	200009ac 	.word	0x200009ac
 8003864:	200009b0 	.word	0x200009b0

08003868 <StartBNO055Task>:
	}
}


//BNO055 task
void StartBNO055Task(void *argument){
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af02      	add	r7, sp, #8
 800386e:	6078      	str	r0, [r7, #4]

	for(;;){
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8003870:	f04f 32ff 	mov.w	r2, #4294967295
 8003874:	2101      	movs	r1, #1
 8003876:	2000      	movs	r0, #0
 8003878:	f00a fd60 	bl	800e33c <ulTaskGenericNotifyTake>
		if(Semap1 != NULL){
 800387c:	4bc0      	ldr	r3, [pc, #768]	; (8003b80 <StartBNO055Task+0x318>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 8172 	beq.w	8003b6a <StartBNO055Task+0x302>
			if(xSemaphoreTake(Semap1,portMAX_DELAY) == pdTRUE){
 8003886:	4bbe      	ldr	r3, [pc, #760]	; (8003b80 <StartBNO055Task+0x318>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f04f 31ff 	mov.w	r1, #4294967295
 800388e:	4618      	mov	r0, r3
 8003890:	f009 fcbc 	bl	800d20c <xQueueSemaphoreTake>
 8003894:	4603      	mov	r3, r0
 8003896:	2b01      	cmp	r3, #1
 8003898:	f040 8167 	bne.w	8003b6a <StartBNO055Task+0x302>
				/* We were able to obtain the semaphore and can now access the
					shared resource. */
				//Get accelerometer variables
				accel = bno055_getVectorAccelerometer();
 800389c:	f7ff f92c 	bl	8002af8 <bno055_getVectorAccelerometer>
 80038a0:	eeb0 4a40 	vmov.f32	s8, s0
 80038a4:	eef0 4a60 	vmov.f32	s9, s1
 80038a8:	eeb0 5a41 	vmov.f32	s10, s2
 80038ac:	eef0 5a61 	vmov.f32	s11, s3
 80038b0:	eeb0 6a42 	vmov.f32	s12, s4
 80038b4:	eef0 6a62 	vmov.f32	s13, s5
 80038b8:	eeb0 7a43 	vmov.f32	s14, s6
 80038bc:	eef0 7a63 	vmov.f32	s15, s7
 80038c0:	4bb0      	ldr	r3, [pc, #704]	; (8003b84 <StartBNO055Task+0x31c>)
 80038c2:	ed83 4b00 	vstr	d4, [r3]
 80038c6:	ed83 5b02 	vstr	d5, [r3, #8]
 80038ca:	ed83 6b04 	vstr	d6, [r3, #16]
 80038ce:	ed83 7b06 	vstr	d7, [r3, #24]

				accel_x = accel.x;
 80038d2:	4bac      	ldr	r3, [pc, #688]	; (8003b84 <StartBNO055Task+0x31c>)
 80038d4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80038d8:	4610      	mov	r0, r2
 80038da:	4619      	mov	r1, r3
 80038dc:	f7fd f94c 	bl	8000b78 <__aeabi_d2f>
 80038e0:	4603      	mov	r3, r0
 80038e2:	4aa9      	ldr	r2, [pc, #676]	; (8003b88 <StartBNO055Task+0x320>)
 80038e4:	6013      	str	r3, [r2, #0]
				accel_y = accel.y;
 80038e6:	4ba7      	ldr	r3, [pc, #668]	; (8003b84 <StartBNO055Task+0x31c>)
 80038e8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80038ec:	4610      	mov	r0, r2
 80038ee:	4619      	mov	r1, r3
 80038f0:	f7fd f942 	bl	8000b78 <__aeabi_d2f>
 80038f4:	4603      	mov	r3, r0
 80038f6:	4aa5      	ldr	r2, [pc, #660]	; (8003b8c <StartBNO055Task+0x324>)
 80038f8:	6013      	str	r3, [r2, #0]
				accel_z = accel.z;
 80038fa:	4ba2      	ldr	r3, [pc, #648]	; (8003b84 <StartBNO055Task+0x31c>)
 80038fc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003900:	4610      	mov	r0, r2
 8003902:	4619      	mov	r1, r3
 8003904:	f7fd f938 	bl	8000b78 <__aeabi_d2f>
 8003908:	4603      	mov	r3, r0
 800390a:	4aa1      	ldr	r2, [pc, #644]	; (8003b90 <StartBNO055Task+0x328>)
 800390c:	6013      	str	r3, [r2, #0]

				accel_x_kalman = updateEstimate(&kalman_filter, accel_x);
 800390e:	4b9e      	ldr	r3, [pc, #632]	; (8003b88 <StartBNO055Task+0x320>)
 8003910:	edd3 7a00 	vldr	s15, [r3]
 8003914:	eeb0 0a67 	vmov.f32	s0, s15
 8003918:	489e      	ldr	r0, [pc, #632]	; (8003b94 <StartBNO055Task+0x32c>)
 800391a:	f7fd fd98 	bl	800144e <updateEstimate>
 800391e:	eef0 7a40 	vmov.f32	s15, s0
 8003922:	4b9d      	ldr	r3, [pc, #628]	; (8003b98 <StartBNO055Task+0x330>)
 8003924:	edc3 7a00 	vstr	s15, [r3]
				accel_y_kalman = updateEstimate(&kalman_filter, accel_y);
 8003928:	4b98      	ldr	r3, [pc, #608]	; (8003b8c <StartBNO055Task+0x324>)
 800392a:	edd3 7a00 	vldr	s15, [r3]
 800392e:	eeb0 0a67 	vmov.f32	s0, s15
 8003932:	4898      	ldr	r0, [pc, #608]	; (8003b94 <StartBNO055Task+0x32c>)
 8003934:	f7fd fd8b 	bl	800144e <updateEstimate>
 8003938:	eef0 7a40 	vmov.f32	s15, s0
 800393c:	4b97      	ldr	r3, [pc, #604]	; (8003b9c <StartBNO055Task+0x334>)
 800393e:	edc3 7a00 	vstr	s15, [r3]
				accel_z_kalman = updateEstimate(&kalman_filter, accel_z);
 8003942:	4b93      	ldr	r3, [pc, #588]	; (8003b90 <StartBNO055Task+0x328>)
 8003944:	edd3 7a00 	vldr	s15, [r3]
 8003948:	eeb0 0a67 	vmov.f32	s0, s15
 800394c:	4891      	ldr	r0, [pc, #580]	; (8003b94 <StartBNO055Task+0x32c>)
 800394e:	f7fd fd7e 	bl	800144e <updateEstimate>
 8003952:	eef0 7a40 	vmov.f32	s15, s0
 8003956:	4b92      	ldr	r3, [pc, #584]	; (8003ba0 <StartBNO055Task+0x338>)
 8003958:	edc3 7a00 	vstr	s15, [r3]

				//vTaskDelay(pdMS_TO_TICKS(100));

				//Get gyroscope variables
				gyro = bno055_getVectorGyroscope();
 800395c:	f7ff f90f 	bl	8002b7e <bno055_getVectorGyroscope>
 8003960:	eeb0 4a40 	vmov.f32	s8, s0
 8003964:	eef0 4a60 	vmov.f32	s9, s1
 8003968:	eeb0 5a41 	vmov.f32	s10, s2
 800396c:	eef0 5a61 	vmov.f32	s11, s3
 8003970:	eeb0 6a42 	vmov.f32	s12, s4
 8003974:	eef0 6a62 	vmov.f32	s13, s5
 8003978:	eeb0 7a43 	vmov.f32	s14, s6
 800397c:	eef0 7a63 	vmov.f32	s15, s7
 8003980:	4b88      	ldr	r3, [pc, #544]	; (8003ba4 <StartBNO055Task+0x33c>)
 8003982:	ed83 4b00 	vstr	d4, [r3]
 8003986:	ed83 5b02 	vstr	d5, [r3, #8]
 800398a:	ed83 6b04 	vstr	d6, [r3, #16]
 800398e:	ed83 7b06 	vstr	d7, [r3, #24]

				gyro_x = gyro.x;
 8003992:	4b84      	ldr	r3, [pc, #528]	; (8003ba4 <StartBNO055Task+0x33c>)
 8003994:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003998:	4610      	mov	r0, r2
 800399a:	4619      	mov	r1, r3
 800399c:	f7fd f8ec 	bl	8000b78 <__aeabi_d2f>
 80039a0:	4603      	mov	r3, r0
 80039a2:	4a81      	ldr	r2, [pc, #516]	; (8003ba8 <StartBNO055Task+0x340>)
 80039a4:	6013      	str	r3, [r2, #0]
				gyro_y = gyro.y;
 80039a6:	4b7f      	ldr	r3, [pc, #508]	; (8003ba4 <StartBNO055Task+0x33c>)
 80039a8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80039ac:	4610      	mov	r0, r2
 80039ae:	4619      	mov	r1, r3
 80039b0:	f7fd f8e2 	bl	8000b78 <__aeabi_d2f>
 80039b4:	4603      	mov	r3, r0
 80039b6:	4a7d      	ldr	r2, [pc, #500]	; (8003bac <StartBNO055Task+0x344>)
 80039b8:	6013      	str	r3, [r2, #0]
				gyro_z = gyro.z;
 80039ba:	4b7a      	ldr	r3, [pc, #488]	; (8003ba4 <StartBNO055Task+0x33c>)
 80039bc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80039c0:	4610      	mov	r0, r2
 80039c2:	4619      	mov	r1, r3
 80039c4:	f7fd f8d8 	bl	8000b78 <__aeabi_d2f>
 80039c8:	4603      	mov	r3, r0
 80039ca:	4a79      	ldr	r2, [pc, #484]	; (8003bb0 <StartBNO055Task+0x348>)
 80039cc:	6013      	str	r3, [r2, #0]

				gyro_x_kalman = updateEstimate(&kalman_filter, gyro_x);
 80039ce:	4b76      	ldr	r3, [pc, #472]	; (8003ba8 <StartBNO055Task+0x340>)
 80039d0:	edd3 7a00 	vldr	s15, [r3]
 80039d4:	eeb0 0a67 	vmov.f32	s0, s15
 80039d8:	486e      	ldr	r0, [pc, #440]	; (8003b94 <StartBNO055Task+0x32c>)
 80039da:	f7fd fd38 	bl	800144e <updateEstimate>
 80039de:	eef0 7a40 	vmov.f32	s15, s0
 80039e2:	4b74      	ldr	r3, [pc, #464]	; (8003bb4 <StartBNO055Task+0x34c>)
 80039e4:	edc3 7a00 	vstr	s15, [r3]
				gyro_y_kalman = updateEstimate(&kalman_filter, gyro_y);
 80039e8:	4b70      	ldr	r3, [pc, #448]	; (8003bac <StartBNO055Task+0x344>)
 80039ea:	edd3 7a00 	vldr	s15, [r3]
 80039ee:	eeb0 0a67 	vmov.f32	s0, s15
 80039f2:	4868      	ldr	r0, [pc, #416]	; (8003b94 <StartBNO055Task+0x32c>)
 80039f4:	f7fd fd2b 	bl	800144e <updateEstimate>
 80039f8:	eef0 7a40 	vmov.f32	s15, s0
 80039fc:	4b6e      	ldr	r3, [pc, #440]	; (8003bb8 <StartBNO055Task+0x350>)
 80039fe:	edc3 7a00 	vstr	s15, [r3]
				gyro_z_kalman = updateEstimate(&kalman_filter, gyro_z);
 8003a02:	4b6b      	ldr	r3, [pc, #428]	; (8003bb0 <StartBNO055Task+0x348>)
 8003a04:	edd3 7a00 	vldr	s15, [r3]
 8003a08:	eeb0 0a67 	vmov.f32	s0, s15
 8003a0c:	4861      	ldr	r0, [pc, #388]	; (8003b94 <StartBNO055Task+0x32c>)
 8003a0e:	f7fd fd1e 	bl	800144e <updateEstimate>
 8003a12:	eef0 7a40 	vmov.f32	s15, s0
 8003a16:	4b69      	ldr	r3, [pc, #420]	; (8003bbc <StartBNO055Task+0x354>)
 8003a18:	edc3 7a00 	vstr	s15, [r3]

				//vTaskDelay(pdMS_TO_TICKS(100));

				//get euler variables
				euler = bno055_getVectorEuler();
 8003a1c:	f7ff f8f2 	bl	8002c04 <bno055_getVectorEuler>
 8003a20:	eeb0 4a40 	vmov.f32	s8, s0
 8003a24:	eef0 4a60 	vmov.f32	s9, s1
 8003a28:	eeb0 5a41 	vmov.f32	s10, s2
 8003a2c:	eef0 5a61 	vmov.f32	s11, s3
 8003a30:	eeb0 6a42 	vmov.f32	s12, s4
 8003a34:	eef0 6a62 	vmov.f32	s13, s5
 8003a38:	eeb0 7a43 	vmov.f32	s14, s6
 8003a3c:	eef0 7a63 	vmov.f32	s15, s7
 8003a40:	4b5f      	ldr	r3, [pc, #380]	; (8003bc0 <StartBNO055Task+0x358>)
 8003a42:	ed83 4b00 	vstr	d4, [r3]
 8003a46:	ed83 5b02 	vstr	d5, [r3, #8]
 8003a4a:	ed83 6b04 	vstr	d6, [r3, #16]
 8003a4e:	ed83 7b06 	vstr	d7, [r3, #24]

				euler_x = euler.x;
 8003a52:	4b5b      	ldr	r3, [pc, #364]	; (8003bc0 <StartBNO055Task+0x358>)
 8003a54:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003a58:	4610      	mov	r0, r2
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	f7fd f88c 	bl	8000b78 <__aeabi_d2f>
 8003a60:	4603      	mov	r3, r0
 8003a62:	4a58      	ldr	r2, [pc, #352]	; (8003bc4 <StartBNO055Task+0x35c>)
 8003a64:	6013      	str	r3, [r2, #0]
				euler_y = euler.y;
 8003a66:	4b56      	ldr	r3, [pc, #344]	; (8003bc0 <StartBNO055Task+0x358>)
 8003a68:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	4619      	mov	r1, r3
 8003a70:	f7fd f882 	bl	8000b78 <__aeabi_d2f>
 8003a74:	4603      	mov	r3, r0
 8003a76:	4a54      	ldr	r2, [pc, #336]	; (8003bc8 <StartBNO055Task+0x360>)
 8003a78:	6013      	str	r3, [r2, #0]
				euler_z = euler.z;
 8003a7a:	4b51      	ldr	r3, [pc, #324]	; (8003bc0 <StartBNO055Task+0x358>)
 8003a7c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003a80:	4610      	mov	r0, r2
 8003a82:	4619      	mov	r1, r3
 8003a84:	f7fd f878 	bl	8000b78 <__aeabi_d2f>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	4a50      	ldr	r2, [pc, #320]	; (8003bcc <StartBNO055Task+0x364>)
 8003a8c:	6013      	str	r3, [r2, #0]

				euler_x_kalman = updateEstimate(&kalman_filter, euler_x);
 8003a8e:	4b4d      	ldr	r3, [pc, #308]	; (8003bc4 <StartBNO055Task+0x35c>)
 8003a90:	edd3 7a00 	vldr	s15, [r3]
 8003a94:	eeb0 0a67 	vmov.f32	s0, s15
 8003a98:	483e      	ldr	r0, [pc, #248]	; (8003b94 <StartBNO055Task+0x32c>)
 8003a9a:	f7fd fcd8 	bl	800144e <updateEstimate>
 8003a9e:	eef0 7a40 	vmov.f32	s15, s0
 8003aa2:	4b4b      	ldr	r3, [pc, #300]	; (8003bd0 <StartBNO055Task+0x368>)
 8003aa4:	edc3 7a00 	vstr	s15, [r3]
				euler_y_kalman = updateEstimate(&kalman_filter, euler_y);
 8003aa8:	4b47      	ldr	r3, [pc, #284]	; (8003bc8 <StartBNO055Task+0x360>)
 8003aaa:	edd3 7a00 	vldr	s15, [r3]
 8003aae:	eeb0 0a67 	vmov.f32	s0, s15
 8003ab2:	4838      	ldr	r0, [pc, #224]	; (8003b94 <StartBNO055Task+0x32c>)
 8003ab4:	f7fd fccb 	bl	800144e <updateEstimate>
 8003ab8:	eef0 7a40 	vmov.f32	s15, s0
 8003abc:	4b45      	ldr	r3, [pc, #276]	; (8003bd4 <StartBNO055Task+0x36c>)
 8003abe:	edc3 7a00 	vstr	s15, [r3]
				euler_z_kalman = updateEstimate(&kalman_filter, euler_z);
 8003ac2:	4b42      	ldr	r3, [pc, #264]	; (8003bcc <StartBNO055Task+0x364>)
 8003ac4:	edd3 7a00 	vldr	s15, [r3]
 8003ac8:	eeb0 0a67 	vmov.f32	s0, s15
 8003acc:	4831      	ldr	r0, [pc, #196]	; (8003b94 <StartBNO055Task+0x32c>)
 8003ace:	f7fd fcbe 	bl	800144e <updateEstimate>
 8003ad2:	eef0 7a40 	vmov.f32	s15, s0
 8003ad6:	4b40      	ldr	r3, [pc, #256]	; (8003bd8 <StartBNO055Task+0x370>)
 8003ad8:	edc3 7a00 	vstr	s15, [r3]

				//vector acceleration
				acceleration_vector = calculate_acceleration_magnitude(accel_x_kalman, accel_y_kalman, accel_z_kalman);
 8003adc:	4b2e      	ldr	r3, [pc, #184]	; (8003b98 <StartBNO055Task+0x330>)
 8003ade:	edd3 7a00 	vldr	s15, [r3]
 8003ae2:	4b2e      	ldr	r3, [pc, #184]	; (8003b9c <StartBNO055Task+0x334>)
 8003ae4:	ed93 7a00 	vldr	s14, [r3]
 8003ae8:	4b2d      	ldr	r3, [pc, #180]	; (8003ba0 <StartBNO055Task+0x338>)
 8003aea:	edd3 6a00 	vldr	s13, [r3]
 8003aee:	eeb0 1a66 	vmov.f32	s2, s13
 8003af2:	eef0 0a47 	vmov.f32	s1, s14
 8003af6:	eeb0 0a67 	vmov.f32	s0, s15
 8003afa:	f000 f9b3 	bl	8003e64 <calculate_acceleration_magnitude>
 8003afe:	eef0 7a40 	vmov.f32	s15, s0
 8003b02:	4b36      	ldr	r3, [pc, #216]	; (8003bdc <StartBNO055Task+0x374>)
 8003b04:	edc3 7a00 	vstr	s15, [r3]

				//calculate the derivative of velocity
				velocity_change = calculate_velocity(velocity, acceleration_vector, dt);
 8003b08:	4b35      	ldr	r3, [pc, #212]	; (8003be0 <StartBNO055Task+0x378>)
 8003b0a:	edd3 7a00 	vldr	s15, [r3]
 8003b0e:	4b33      	ldr	r3, [pc, #204]	; (8003bdc <StartBNO055Task+0x374>)
 8003b10:	ed93 7a00 	vldr	s14, [r3]
 8003b14:	4b33      	ldr	r3, [pc, #204]	; (8003be4 <StartBNO055Task+0x37c>)
 8003b16:	edd3 6a00 	vldr	s13, [r3]
 8003b1a:	eeb0 1a66 	vmov.f32	s2, s13
 8003b1e:	eef0 0a47 	vmov.f32	s1, s14
 8003b22:	eeb0 0a67 	vmov.f32	s0, s15
 8003b26:	f000 f983 	bl	8003e30 <calculate_velocity>
 8003b2a:	eef0 7a40 	vmov.f32	s15, s0
 8003b2e:	4b2e      	ldr	r3, [pc, #184]	; (8003be8 <StartBNO055Task+0x380>)
 8003b30:	edc3 7a00 	vstr	s15, [r3]

				//update the new velocity
				velocity += velocity_change;
 8003b34:	4b2a      	ldr	r3, [pc, #168]	; (8003be0 <StartBNO055Task+0x378>)
 8003b36:	ed93 7a00 	vldr	s14, [r3]
 8003b3a:	4b2b      	ldr	r3, [pc, #172]	; (8003be8 <StartBNO055Task+0x380>)
 8003b3c:	edd3 7a00 	vldr	s15, [r3]
 8003b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b44:	4b26      	ldr	r3, [pc, #152]	; (8003be0 <StartBNO055Task+0x378>)
 8003b46:	edc3 7a00 	vstr	s15, [r3]

				//Notify IGN1 function
				xTaskNotify(FirstIgnTaskHandle,0,eNoAction);
 8003b4a:	4b28      	ldr	r3, [pc, #160]	; (8003bec <StartBNO055Task+0x384>)
 8003b4c:	6818      	ldr	r0, [r3, #0]
 8003b4e:	2300      	movs	r3, #0
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	2300      	movs	r3, #0
 8003b54:	2200      	movs	r2, #0
 8003b56:	2100      	movs	r1, #0
 8003b58:	f00a fc58 	bl	800e40c <xTaskGenericNotify>

				//vTaskDelay(pdMS_TO_TICKS(100));

				xSemaphoreGive(Semap1);
 8003b5c:	4b08      	ldr	r3, [pc, #32]	; (8003b80 <StartBNO055Task+0x318>)
 8003b5e:	6818      	ldr	r0, [r3, #0]
 8003b60:	2300      	movs	r3, #0
 8003b62:	2200      	movs	r2, #0
 8003b64:	2100      	movs	r1, #0
 8003b66:	f009 fa6b 	bl	800d040 <xQueueGenericSend>
			}
		}
		xTaskNotifyGive(FirstIgnTaskHandle);
 8003b6a:	4b20      	ldr	r3, [pc, #128]	; (8003bec <StartBNO055Task+0x384>)
 8003b6c:	6818      	ldr	r0, [r3, #0]
 8003b6e:	2300      	movs	r3, #0
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	2302      	movs	r3, #2
 8003b74:	2200      	movs	r2, #0
 8003b76:	2100      	movs	r1, #0
 8003b78:	f00a fc48 	bl	800e40c <xTaskGenericNotify>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8003b7c:	e678      	b.n	8003870 <StartBNO055Task+0x8>
 8003b7e:	bf00      	nop
 8003b80:	200009b4 	.word	0x200009b4
 8003b84:	200009d0 	.word	0x200009d0
 8003b88:	20000a30 	.word	0x20000a30
 8003b8c:	20000a34 	.word	0x20000a34
 8003b90:	20000a38 	.word	0x20000a38
 8003b94:	200009b8 	.word	0x200009b8
 8003b98:	20000a54 	.word	0x20000a54
 8003b9c:	20000a58 	.word	0x20000a58
 8003ba0:	20000a5c 	.word	0x20000a5c
 8003ba4:	200009f0 	.word	0x200009f0
 8003ba8:	20000a3c 	.word	0x20000a3c
 8003bac:	20000a40 	.word	0x20000a40
 8003bb0:	20000a44 	.word	0x20000a44
 8003bb4:	20000a60 	.word	0x20000a60
 8003bb8:	20000a64 	.word	0x20000a64
 8003bbc:	20000a68 	.word	0x20000a68
 8003bc0:	20000a10 	.word	0x20000a10
 8003bc4:	20000a48 	.word	0x20000a48
 8003bc8:	20000a4c 	.word	0x20000a4c
 8003bcc:	20000a50 	.word	0x20000a50
 8003bd0:	20000a6c 	.word	0x20000a6c
 8003bd4:	20000a70 	.word	0x20000a70
 8003bd8:	20000a74 	.word	0x20000a74
 8003bdc:	20000ba0 	.word	0x20000ba0
 8003be0:	20000b98 	.word	0x20000b98
 8003be4:	2000004c 	.word	0x2000004c
 8003be8:	20000b9c 	.word	0x20000b9c
 8003bec:	200009ac 	.word	0x200009ac

08003bf0 <StartGPSTask>:

}


//GPS function
void StartGPSTask(void *argument){
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]

	for(;;){
		if(Semap1 != NULL){
 8003bf8:	4b19      	ldr	r3, [pc, #100]	; (8003c60 <StartGPSTask+0x70>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0fb      	beq.n	8003bf8 <StartGPSTask+0x8>
			if(xSemaphoreTake(Semap1,portMAX_DELAY) == pdTRUE){
 8003c00:	4b17      	ldr	r3, [pc, #92]	; (8003c60 <StartGPSTask+0x70>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f04f 31ff 	mov.w	r1, #4294967295
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f009 faff 	bl	800d20c <xQueueSemaphoreTake>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d1f1      	bne.n	8003bf8 <StartGPSTask+0x8>

				gpsAlt = gps.altitude;
 8003c14:	4b13      	ldr	r3, [pc, #76]	; (8003c64 <StartGPSTask+0x74>)
 8003c16:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	f7fc ffab 	bl	8000b78 <__aeabi_d2f>
 8003c22:	4603      	mov	r3, r0
 8003c24:	4a10      	ldr	r2, [pc, #64]	; (8003c68 <StartGPSTask+0x78>)
 8003c26:	6013      	str	r3, [r2, #0]
				gpsLat = gps.latitude;
 8003c28:	4b0e      	ldr	r3, [pc, #56]	; (8003c64 <StartGPSTask+0x74>)
 8003c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2e:	4610      	mov	r0, r2
 8003c30:	4619      	mov	r1, r3
 8003c32:	f7fc ffa1 	bl	8000b78 <__aeabi_d2f>
 8003c36:	4603      	mov	r3, r0
 8003c38:	4a0c      	ldr	r2, [pc, #48]	; (8003c6c <StartGPSTask+0x7c>)
 8003c3a:	6013      	str	r3, [r2, #0]
				gpsLon = gps.longitude;
 8003c3c:	4b09      	ldr	r3, [pc, #36]	; (8003c64 <StartGPSTask+0x74>)
 8003c3e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003c42:	4610      	mov	r0, r2
 8003c44:	4619      	mov	r1, r3
 8003c46:	f7fc ff97 	bl	8000b78 <__aeabi_d2f>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	4a08      	ldr	r2, [pc, #32]	; (8003c70 <StartGPSTask+0x80>)
 8003c4e:	6013      	str	r3, [r2, #0]

				/* We have finished accessing the shared resource. Release the
				semaphore. */
				xSemaphoreGive(Semap1);
 8003c50:	4b03      	ldr	r3, [pc, #12]	; (8003c60 <StartGPSTask+0x70>)
 8003c52:	6818      	ldr	r0, [r3, #0]
 8003c54:	2300      	movs	r3, #0
 8003c56:	2200      	movs	r2, #0
 8003c58:	2100      	movs	r1, #0
 8003c5a:	f009 f9f1 	bl	800d040 <xQueueGenericSend>
		if(Semap1 != NULL){
 8003c5e:	e7cb      	b.n	8003bf8 <StartGPSTask+0x8>
 8003c60:	200009b4 	.word	0x200009b4
 8003c64:	20000ae0 	.word	0x20000ae0
 8003c68:	20000a94 	.word	0x20000a94
 8003c6c:	20000a98 	.word	0x20000a98
 8003c70:	20000a9c 	.word	0x20000a9c
 8003c74:	00000000 	.word	0x00000000

08003c78 <StartIgn1Task>:

}

//Ignition 1 function
//@NOTE: Based parameters are change of accelometer (velocity) over hight is 4000m
void StartIgn1Task(void *argument){
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af02      	add	r7, sp, #8
 8003c7e:	6078      	str	r0, [r7, #4]

	for(;;){
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8003c80:	f04f 32ff 	mov.w	r2, #4294967295
 8003c84:	2101      	movs	r1, #1
 8003c86:	2000      	movs	r0, #0
 8003c88:	f00a fb58 	bl	800e33c <ulTaskGenericNotifyTake>

		if(ign1_status == 0){
 8003c8c:	4b28      	ldr	r3, [pc, #160]	; (8003d30 <StartIgn1Task+0xb8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d133      	bne.n	8003cfc <StartIgn1Task+0x84>
			if(Altitude_Kalman >= 4000.0f){
 8003c94:	4b27      	ldr	r3, [pc, #156]	; (8003d34 <StartIgn1Task+0xbc>)
 8003c96:	edd3 7a00 	vldr	s15, [r3]
 8003c9a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003d38 <StartIgn1Task+0xc0>
 8003c9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ca6:	db29      	blt.n	8003cfc <StartIgn1Task+0x84>
				if(fabs(velocity) < 0.01 && fabs(acceleration_vector) < 0.01){
 8003ca8:	4b24      	ldr	r3, [pc, #144]	; (8003d3c <StartIgn1Task+0xc4>)
 8003caa:	edd3 7a00 	vldr	s15, [r3]
 8003cae:	eef0 7ae7 	vabs.f32	s15, s15
 8003cb2:	ee17 0a90 	vmov	r0, s15
 8003cb6:	f7fc fc57 	bl	8000568 <__aeabi_f2d>
 8003cba:	a31b      	add	r3, pc, #108	; (adr r3, 8003d28 <StartIgn1Task+0xb0>)
 8003cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc0:	f7fc ff1c 	bl	8000afc <__aeabi_dcmplt>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d018      	beq.n	8003cfc <StartIgn1Task+0x84>
 8003cca:	4b1d      	ldr	r3, [pc, #116]	; (8003d40 <StartIgn1Task+0xc8>)
 8003ccc:	edd3 7a00 	vldr	s15, [r3]
 8003cd0:	eef0 7ae7 	vabs.f32	s15, s15
 8003cd4:	ee17 0a90 	vmov	r0, s15
 8003cd8:	f7fc fc46 	bl	8000568 <__aeabi_f2d>
 8003cdc:	a312      	add	r3, pc, #72	; (adr r3, 8003d28 <StartIgn1Task+0xb0>)
 8003cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce2:	f7fc ff0b 	bl	8000afc <__aeabi_dcmplt>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d007      	beq.n	8003cfc <StartIgn1Task+0x84>
					ign1_status = 1;
 8003cec:	4b10      	ldr	r3, [pc, #64]	; (8003d30 <StartIgn1Task+0xb8>)
 8003cee:	2201      	movs	r2, #1
 8003cf0:	601a      	str	r2, [r3, #0]
					//fire the ignition output
					HAL_GPIO_WritePin(IGN1_OUT_GPIO_Port, IGN1_OUT_Pin, GPIO_PIN_SET);
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	2104      	movs	r1, #4
 8003cf6:	4813      	ldr	r0, [pc, #76]	; (8003d44 <StartIgn1Task+0xcc>)
 8003cf8:	f001 fb0a 	bl	8005310 <HAL_GPIO_WritePin>
				}
			}
		}
		//send a notification to BNO055 and BME280 task that bringing out of the blocked state
		xTaskNotifyGive(BNO055TaskHandle);
 8003cfc:	4b12      	ldr	r3, [pc, #72]	; (8003d48 <StartIgn1Task+0xd0>)
 8003cfe:	6818      	ldr	r0, [r3, #0]
 8003d00:	2300      	movs	r3, #0
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	2302      	movs	r3, #2
 8003d06:	2200      	movs	r2, #0
 8003d08:	2100      	movs	r1, #0
 8003d0a:	f00a fb7f 	bl	800e40c <xTaskGenericNotify>
		xTaskNotifyGive(BME280TaskHandle);
 8003d0e:	4b0f      	ldr	r3, [pc, #60]	; (8003d4c <StartIgn1Task+0xd4>)
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	2300      	movs	r3, #0
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	2302      	movs	r3, #2
 8003d18:	2200      	movs	r2, #0
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	f00a fb76 	bl	800e40c <xTaskGenericNotify>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8003d20:	e7ae      	b.n	8003c80 <StartIgn1Task+0x8>
 8003d22:	bf00      	nop
 8003d24:	f3af 8000 	nop.w
 8003d28:	47ae147b 	.word	0x47ae147b
 8003d2c:	3f847ae1 	.word	0x3f847ae1
 8003d30:	20000b90 	.word	0x20000b90
 8003d34:	20000a84 	.word	0x20000a84
 8003d38:	457a0000 	.word	0x457a0000
 8003d3c:	20000b98 	.word	0x20000b98
 8003d40:	20000ba0 	.word	0x20000ba0
 8003d44:	40020400 	.word	0x40020400
 8003d48:	200009a0 	.word	0x200009a0
 8003d4c:	2000099c 	.word	0x2000099c

08003d50 <StartIgn2Task>:

}

//Ignition 2 function
//Only altitude parameter <=500 or 600
void StartIgn2Task(void *argument){
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af02      	add	r7, sp, #8
 8003d56:	6078      	str	r0, [r7, #4]

	for(;;){
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8003d58:	f04f 32ff 	mov.w	r2, #4294967295
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	2000      	movs	r0, #0
 8003d60:	f00a faec 	bl	800e33c <ulTaskGenericNotifyTake>
		if(ign1_status == 1){
 8003d64:	4b12      	ldr	r3, [pc, #72]	; (8003db0 <StartIgn2Task+0x60>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d116      	bne.n	8003d9a <StartIgn2Task+0x4a>
			if(ign2_status == 0){
 8003d6c:	4b11      	ldr	r3, [pc, #68]	; (8003db4 <StartIgn2Task+0x64>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d112      	bne.n	8003d9a <StartIgn2Task+0x4a>
				if(Altitude_Kalman >= 600.0f){
 8003d74:	4b10      	ldr	r3, [pc, #64]	; (8003db8 <StartIgn2Task+0x68>)
 8003d76:	edd3 7a00 	vldr	s15, [r3]
 8003d7a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8003dbc <StartIgn2Task+0x6c>
 8003d7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d86:	db08      	blt.n	8003d9a <StartIgn2Task+0x4a>
					//IGN2 is high
					ign2_status = 1;
 8003d88:	4b0a      	ldr	r3, [pc, #40]	; (8003db4 <StartIgn2Task+0x64>)
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(IGN2_OUT_GPIO_Port, IGN2_OUT_Pin, GPIO_PIN_SET);
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d94:	480a      	ldr	r0, [pc, #40]	; (8003dc0 <StartIgn2Task+0x70>)
 8003d96:	f001 fabb 	bl	8005310 <HAL_GPIO_WritePin>

				}
			}
		}
		xTaskNotifyGive(BME280TaskHandle);
 8003d9a:	4b0a      	ldr	r3, [pc, #40]	; (8003dc4 <StartIgn2Task+0x74>)
 8003d9c:	6818      	ldr	r0, [r3, #0]
 8003d9e:	2300      	movs	r3, #0
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	2302      	movs	r3, #2
 8003da4:	2200      	movs	r2, #0
 8003da6:	2100      	movs	r1, #0
 8003da8:	f00a fb30 	bl	800e40c <xTaskGenericNotify>
		ulTaskNotifyTake(pdTRUE,portMAX_DELAY);
 8003dac:	e7d4      	b.n	8003d58 <StartIgn2Task+0x8>
 8003dae:	bf00      	nop
 8003db0:	20000b90 	.word	0x20000b90
 8003db4:	20000b94 	.word	0x20000b94
 8003db8:	20000a84 	.word	0x20000a84
 8003dbc:	44160000 	.word	0x44160000
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	2000099c 	.word	0x2000099c

08003dc8 <StartSDCardTask>:
	}

}


void StartSDCardTask(void *argument){
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]

	for(;;){
		if(Semap1 != NULL){
 8003dd0:	4b12      	ldr	r3, [pc, #72]	; (8003e1c <StartSDCardTask+0x54>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d0fb      	beq.n	8003dd0 <StartSDCardTask+0x8>
			if(xSemaphoreTake(Semap1,portMAX_DELAY) == pdTRUE){
 8003dd8:	4b10      	ldr	r3, [pc, #64]	; (8003e1c <StartSDCardTask+0x54>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8003de0:	4618      	mov	r0, r3
 8003de2:	f009 fa13 	bl	800d20c <xQueueSemaphoreTake>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d1f1      	bne.n	8003dd0 <StartSDCardTask+0x8>
				Mount_SD("/");
 8003dec:	480c      	ldr	r0, [pc, #48]	; (8003e20 <StartSDCardTask+0x58>)
 8003dee:	f7fd f8fb 	bl	8000fe8 <Mount_SD>
				Update_File("Rocket_Data.TXT", buff);
 8003df2:	490c      	ldr	r1, [pc, #48]	; (8003e24 <StartSDCardTask+0x5c>)
 8003df4:	480c      	ldr	r0, [pc, #48]	; (8003e28 <StartSDCardTask+0x60>)
 8003df6:	f7fd fa3f 	bl	8001278 <Update_File>
				Unmount_SD("/");
 8003dfa:	4809      	ldr	r0, [pc, #36]	; (8003e20 <StartSDCardTask+0x58>)
 8003dfc:	f7fd f918 	bl	8001030 <Unmount_SD>
				indx++;
 8003e00:	4b0a      	ldr	r3, [pc, #40]	; (8003e2c <StartSDCardTask+0x64>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	3301      	adds	r3, #1
 8003e06:	4a09      	ldr	r2, [pc, #36]	; (8003e2c <StartSDCardTask+0x64>)
 8003e08:	6013      	str	r3, [r2, #0]

				xSemaphoreGive(Semap1);
 8003e0a:	4b04      	ldr	r3, [pc, #16]	; (8003e1c <StartSDCardTask+0x54>)
 8003e0c:	6818      	ldr	r0, [r3, #0]
 8003e0e:	2300      	movs	r3, #0
 8003e10:	2200      	movs	r2, #0
 8003e12:	2100      	movs	r1, #0
 8003e14:	f009 f914 	bl	800d040 <xQueueGenericSend>
		if(Semap1 != NULL){
 8003e18:	e7da      	b.n	8003dd0 <StartSDCardTask+0x8>
 8003e1a:	bf00      	nop
 8003e1c:	200009b4 	.word	0x200009b4
 8003e20:	080117fc 	.word	0x080117fc
 8003e24:	20000aa0 	.word	0x20000aa0
 8003e28:	08011800 	.word	0x08011800
 8003e2c:	20000ba4 	.word	0x20000ba4

08003e30 <calculate_velocity>:
		 checkSum += buff[i];
	 }
	 return (unsigned char) (checkSum % 256);
}

float calculate_velocity(float v0,float a, float dt){
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	ed87 0a03 	vstr	s0, [r7, #12]
 8003e3a:	edc7 0a02 	vstr	s1, [r7, #8]
 8003e3e:	ed87 1a01 	vstr	s2, [r7, #4]
	return  v0 + a * dt;
 8003e42:	ed97 7a02 	vldr	s14, [r7, #8]
 8003e46:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e52:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003e56:	eeb0 0a67 	vmov.f32	s0, s15
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <calculate_acceleration_magnitude>:

float calculate_acceleration_magnitude(float ax, float ay, float az){
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	ed87 0a03 	vstr	s0, [r7, #12]
 8003e6e:	edc7 0a02 	vstr	s1, [r7, #8]
 8003e72:	ed87 1a01 	vstr	s2, [r7, #4]
	return sqrt(ax * ax + ay * ay + az * az);
 8003e76:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e7a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003e7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e82:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003e86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e8e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003e92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e96:	ee17 0a90 	vmov	r0, s15
 8003e9a:	f7fc fb65 	bl	8000568 <__aeabi_f2d>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	ec43 2b10 	vmov	d0, r2, r3
 8003ea6:	f00c fa99 	bl	80103dc <sqrt>
 8003eaa:	ec53 2b10 	vmov	r2, r3, d0
 8003eae:	4610      	mov	r0, r2
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	f7fc fe61 	bl	8000b78 <__aeabi_d2f>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	ee07 3a90 	vmov	s15, r3
}
 8003ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a04      	ldr	r2, [pc, #16]	; (8003ee8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d101      	bne.n	8003ede <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003eda:	f000 fc6d 	bl	80047b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003ede:	bf00      	nop
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40001000 	.word	0x40001000

08003eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ef0:	b672      	cpsid	i
}
 8003ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ef4:	e7fe      	b.n	8003ef4 <Error_Handler+0x8>
	...

08003ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003efe:	2300      	movs	r3, #0
 8003f00:	607b      	str	r3, [r7, #4]
 8003f02:	4b10      	ldr	r3, [pc, #64]	; (8003f44 <HAL_MspInit+0x4c>)
 8003f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f06:	4a0f      	ldr	r2, [pc, #60]	; (8003f44 <HAL_MspInit+0x4c>)
 8003f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f0e:	4b0d      	ldr	r3, [pc, #52]	; (8003f44 <HAL_MspInit+0x4c>)
 8003f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f16:	607b      	str	r3, [r7, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	603b      	str	r3, [r7, #0]
 8003f1e:	4b09      	ldr	r3, [pc, #36]	; (8003f44 <HAL_MspInit+0x4c>)
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	4a08      	ldr	r2, [pc, #32]	; (8003f44 <HAL_MspInit+0x4c>)
 8003f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f28:	6413      	str	r3, [r2, #64]	; 0x40
 8003f2a:	4b06      	ldr	r3, [pc, #24]	; (8003f44 <HAL_MspInit+0x4c>)
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f32:	603b      	str	r3, [r7, #0]
 8003f34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	40023800 	.word	0x40023800

08003f48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08c      	sub	sp, #48	; 0x30
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f50:	f107 031c 	add.w	r3, r7, #28
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	605a      	str	r2, [r3, #4]
 8003f5a:	609a      	str	r2, [r3, #8]
 8003f5c:	60da      	str	r2, [r3, #12]
 8003f5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a32      	ldr	r2, [pc, #200]	; (8004030 <HAL_I2C_MspInit+0xe8>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d12c      	bne.n	8003fc4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	61bb      	str	r3, [r7, #24]
 8003f6e:	4b31      	ldr	r3, [pc, #196]	; (8004034 <HAL_I2C_MspInit+0xec>)
 8003f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f72:	4a30      	ldr	r2, [pc, #192]	; (8004034 <HAL_I2C_MspInit+0xec>)
 8003f74:	f043 0302 	orr.w	r3, r3, #2
 8003f78:	6313      	str	r3, [r2, #48]	; 0x30
 8003f7a:	4b2e      	ldr	r3, [pc, #184]	; (8004034 <HAL_I2C_MspInit+0xec>)
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	61bb      	str	r3, [r7, #24]
 8003f84:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003f86:	23c0      	movs	r3, #192	; 0xc0
 8003f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f8a:	2312      	movs	r3, #18
 8003f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f92:	2303      	movs	r3, #3
 8003f94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003f96:	2304      	movs	r3, #4
 8003f98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f9a:	f107 031c 	add.w	r3, r7, #28
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4825      	ldr	r0, [pc, #148]	; (8004038 <HAL_I2C_MspInit+0xf0>)
 8003fa2:	f001 f819 	bl	8004fd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	617b      	str	r3, [r7, #20]
 8003faa:	4b22      	ldr	r3, [pc, #136]	; (8004034 <HAL_I2C_MspInit+0xec>)
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	4a21      	ldr	r2, [pc, #132]	; (8004034 <HAL_I2C_MspInit+0xec>)
 8003fb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8003fb6:	4b1f      	ldr	r3, [pc, #124]	; (8004034 <HAL_I2C_MspInit+0xec>)
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003fc2:	e031      	b.n	8004028 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a1c      	ldr	r2, [pc, #112]	; (800403c <HAL_I2C_MspInit+0xf4>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d12c      	bne.n	8004028 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fce:	2300      	movs	r3, #0
 8003fd0:	613b      	str	r3, [r7, #16]
 8003fd2:	4b18      	ldr	r3, [pc, #96]	; (8004034 <HAL_I2C_MspInit+0xec>)
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd6:	4a17      	ldr	r2, [pc, #92]	; (8004034 <HAL_I2C_MspInit+0xec>)
 8003fd8:	f043 0302 	orr.w	r3, r3, #2
 8003fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8003fde:	4b15      	ldr	r3, [pc, #84]	; (8004034 <HAL_I2C_MspInit+0xec>)
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	613b      	str	r3, [r7, #16]
 8003fe8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003fea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ff0:	2312      	movs	r3, #18
 8003ff2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003ffc:	2304      	movs	r3, #4
 8003ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004000:	f107 031c 	add.w	r3, r7, #28
 8004004:	4619      	mov	r1, r3
 8004006:	480c      	ldr	r0, [pc, #48]	; (8004038 <HAL_I2C_MspInit+0xf0>)
 8004008:	f000 ffe6 	bl	8004fd8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800400c:	2300      	movs	r3, #0
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	4b08      	ldr	r3, [pc, #32]	; (8004034 <HAL_I2C_MspInit+0xec>)
 8004012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004014:	4a07      	ldr	r2, [pc, #28]	; (8004034 <HAL_I2C_MspInit+0xec>)
 8004016:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800401a:	6413      	str	r3, [r2, #64]	; 0x40
 800401c:	4b05      	ldr	r3, [pc, #20]	; (8004034 <HAL_I2C_MspInit+0xec>)
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	68fb      	ldr	r3, [r7, #12]
}
 8004028:	bf00      	nop
 800402a:	3730      	adds	r7, #48	; 0x30
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	40005400 	.word	0x40005400
 8004034:	40023800 	.word	0x40023800
 8004038:	40020400 	.word	0x40020400
 800403c:	40005800 	.word	0x40005800

08004040 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b08a      	sub	sp, #40	; 0x28
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004048:	f107 0314 	add.w	r3, r7, #20
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	605a      	str	r2, [r3, #4]
 8004052:	609a      	str	r2, [r3, #8]
 8004054:	60da      	str	r2, [r3, #12]
 8004056:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a28      	ldr	r2, [pc, #160]	; (8004100 <HAL_SD_MspInit+0xc0>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d14a      	bne.n	80040f8 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004062:	2300      	movs	r3, #0
 8004064:	613b      	str	r3, [r7, #16]
 8004066:	4b27      	ldr	r3, [pc, #156]	; (8004104 <HAL_SD_MspInit+0xc4>)
 8004068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406a:	4a26      	ldr	r2, [pc, #152]	; (8004104 <HAL_SD_MspInit+0xc4>)
 800406c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004070:	6453      	str	r3, [r2, #68]	; 0x44
 8004072:	4b24      	ldr	r3, [pc, #144]	; (8004104 <HAL_SD_MspInit+0xc4>)
 8004074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800407a:	613b      	str	r3, [r7, #16]
 800407c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800407e:	2300      	movs	r3, #0
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	4b20      	ldr	r3, [pc, #128]	; (8004104 <HAL_SD_MspInit+0xc4>)
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	4a1f      	ldr	r2, [pc, #124]	; (8004104 <HAL_SD_MspInit+0xc4>)
 8004088:	f043 0304 	orr.w	r3, r3, #4
 800408c:	6313      	str	r3, [r2, #48]	; 0x30
 800408e:	4b1d      	ldr	r3, [pc, #116]	; (8004104 <HAL_SD_MspInit+0xc4>)
 8004090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004092:	f003 0304 	and.w	r3, r3, #4
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800409a:	2300      	movs	r3, #0
 800409c:	60bb      	str	r3, [r7, #8]
 800409e:	4b19      	ldr	r3, [pc, #100]	; (8004104 <HAL_SD_MspInit+0xc4>)
 80040a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a2:	4a18      	ldr	r2, [pc, #96]	; (8004104 <HAL_SD_MspInit+0xc4>)
 80040a4:	f043 0308 	orr.w	r3, r3, #8
 80040a8:	6313      	str	r3, [r2, #48]	; 0x30
 80040aa:	4b16      	ldr	r3, [pc, #88]	; (8004104 <HAL_SD_MspInit+0xc4>)
 80040ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ae:	f003 0308 	and.w	r3, r3, #8
 80040b2:	60bb      	str	r3, [r7, #8]
 80040b4:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80040b6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80040ba:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040bc:	2302      	movs	r3, #2
 80040be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c0:	2300      	movs	r3, #0
 80040c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040c4:	2303      	movs	r3, #3
 80040c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80040c8:	230c      	movs	r3, #12
 80040ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040cc:	f107 0314 	add.w	r3, r7, #20
 80040d0:	4619      	mov	r1, r3
 80040d2:	480d      	ldr	r0, [pc, #52]	; (8004108 <HAL_SD_MspInit+0xc8>)
 80040d4:	f000 ff80 	bl	8004fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80040d8:	2304      	movs	r3, #4
 80040da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040dc:	2302      	movs	r3, #2
 80040de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e0:	2300      	movs	r3, #0
 80040e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040e4:	2303      	movs	r3, #3
 80040e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80040e8:	230c      	movs	r3, #12
 80040ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040ec:	f107 0314 	add.w	r3, r7, #20
 80040f0:	4619      	mov	r1, r3
 80040f2:	4806      	ldr	r0, [pc, #24]	; (800410c <HAL_SD_MspInit+0xcc>)
 80040f4:	f000 ff70 	bl	8004fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80040f8:	bf00      	nop
 80040fa:	3728      	adds	r7, #40	; 0x28
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40012c00 	.word	0x40012c00
 8004104:	40023800 	.word	0x40023800
 8004108:	40020800 	.word	0x40020800
 800410c:	40020c00 	.word	0x40020c00

08004110 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b08c      	sub	sp, #48	; 0x30
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004118:	f107 031c 	add.w	r3, r7, #28
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	605a      	str	r2, [r3, #4]
 8004122:	609a      	str	r2, [r3, #8]
 8004124:	60da      	str	r2, [r3, #12]
 8004126:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a32      	ldr	r2, [pc, #200]	; (80041f8 <HAL_SPI_MspInit+0xe8>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d12c      	bne.n	800418c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004132:	2300      	movs	r3, #0
 8004134:	61bb      	str	r3, [r7, #24]
 8004136:	4b31      	ldr	r3, [pc, #196]	; (80041fc <HAL_SPI_MspInit+0xec>)
 8004138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413a:	4a30      	ldr	r2, [pc, #192]	; (80041fc <HAL_SPI_MspInit+0xec>)
 800413c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004140:	6453      	str	r3, [r2, #68]	; 0x44
 8004142:	4b2e      	ldr	r3, [pc, #184]	; (80041fc <HAL_SPI_MspInit+0xec>)
 8004144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004146:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800414a:	61bb      	str	r3, [r7, #24]
 800414c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800414e:	2300      	movs	r3, #0
 8004150:	617b      	str	r3, [r7, #20]
 8004152:	4b2a      	ldr	r3, [pc, #168]	; (80041fc <HAL_SPI_MspInit+0xec>)
 8004154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004156:	4a29      	ldr	r2, [pc, #164]	; (80041fc <HAL_SPI_MspInit+0xec>)
 8004158:	f043 0301 	orr.w	r3, r3, #1
 800415c:	6313      	str	r3, [r2, #48]	; 0x30
 800415e:	4b27      	ldr	r3, [pc, #156]	; (80041fc <HAL_SPI_MspInit+0xec>)
 8004160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800416a:	23e0      	movs	r3, #224	; 0xe0
 800416c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800416e:	2302      	movs	r3, #2
 8004170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004172:	2300      	movs	r3, #0
 8004174:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004176:	2303      	movs	r3, #3
 8004178:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800417a:	2305      	movs	r3, #5
 800417c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800417e:	f107 031c 	add.w	r3, r7, #28
 8004182:	4619      	mov	r1, r3
 8004184:	481e      	ldr	r0, [pc, #120]	; (8004200 <HAL_SPI_MspInit+0xf0>)
 8004186:	f000 ff27 	bl	8004fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800418a:	e031      	b.n	80041f0 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a1c      	ldr	r2, [pc, #112]	; (8004204 <HAL_SPI_MspInit+0xf4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d12c      	bne.n	80041f0 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004196:	2300      	movs	r3, #0
 8004198:	613b      	str	r3, [r7, #16]
 800419a:	4b18      	ldr	r3, [pc, #96]	; (80041fc <HAL_SPI_MspInit+0xec>)
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	4a17      	ldr	r2, [pc, #92]	; (80041fc <HAL_SPI_MspInit+0xec>)
 80041a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041a4:	6413      	str	r3, [r2, #64]	; 0x40
 80041a6:	4b15      	ldr	r3, [pc, #84]	; (80041fc <HAL_SPI_MspInit+0xec>)
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041ae:	613b      	str	r3, [r7, #16]
 80041b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041b2:	2300      	movs	r3, #0
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	4b11      	ldr	r3, [pc, #68]	; (80041fc <HAL_SPI_MspInit+0xec>)
 80041b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ba:	4a10      	ldr	r2, [pc, #64]	; (80041fc <HAL_SPI_MspInit+0xec>)
 80041bc:	f043 0302 	orr.w	r3, r3, #2
 80041c0:	6313      	str	r3, [r2, #48]	; 0x30
 80041c2:	4b0e      	ldr	r3, [pc, #56]	; (80041fc <HAL_SPI_MspInit+0xec>)
 80041c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80041ce:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80041d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041d4:	2302      	movs	r3, #2
 80041d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d8:	2300      	movs	r3, #0
 80041da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041dc:	2303      	movs	r3, #3
 80041de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80041e0:	2305      	movs	r3, #5
 80041e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041e4:	f107 031c 	add.w	r3, r7, #28
 80041e8:	4619      	mov	r1, r3
 80041ea:	4807      	ldr	r0, [pc, #28]	; (8004208 <HAL_SPI_MspInit+0xf8>)
 80041ec:	f000 fef4 	bl	8004fd8 <HAL_GPIO_Init>
}
 80041f0:	bf00      	nop
 80041f2:	3730      	adds	r7, #48	; 0x30
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40013000 	.word	0x40013000
 80041fc:	40023800 	.word	0x40023800
 8004200:	40020000 	.word	0x40020000
 8004204:	40003800 	.word	0x40003800
 8004208:	40020400 	.word	0x40020400

0800420c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b08c      	sub	sp, #48	; 0x30
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004214:	f107 031c 	add.w	r3, r7, #28
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]
 800421c:	605a      	str	r2, [r3, #4]
 800421e:	609a      	str	r2, [r3, #8]
 8004220:	60da      	str	r2, [r3, #12]
 8004222:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a7a      	ldr	r2, [pc, #488]	; (8004414 <HAL_UART_MspInit+0x208>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d15c      	bne.n	80042e8 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800422e:	2300      	movs	r3, #0
 8004230:	61bb      	str	r3, [r7, #24]
 8004232:	4b79      	ldr	r3, [pc, #484]	; (8004418 <HAL_UART_MspInit+0x20c>)
 8004234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004236:	4a78      	ldr	r2, [pc, #480]	; (8004418 <HAL_UART_MspInit+0x20c>)
 8004238:	f043 0310 	orr.w	r3, r3, #16
 800423c:	6453      	str	r3, [r2, #68]	; 0x44
 800423e:	4b76      	ldr	r3, [pc, #472]	; (8004418 <HAL_UART_MspInit+0x20c>)
 8004240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004242:	f003 0310 	and.w	r3, r3, #16
 8004246:	61bb      	str	r3, [r7, #24]
 8004248:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800424a:	2300      	movs	r3, #0
 800424c:	617b      	str	r3, [r7, #20]
 800424e:	4b72      	ldr	r3, [pc, #456]	; (8004418 <HAL_UART_MspInit+0x20c>)
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	4a71      	ldr	r2, [pc, #452]	; (8004418 <HAL_UART_MspInit+0x20c>)
 8004254:	f043 0301 	orr.w	r3, r3, #1
 8004258:	6313      	str	r3, [r2, #48]	; 0x30
 800425a:	4b6f      	ldr	r3, [pc, #444]	; (8004418 <HAL_UART_MspInit+0x20c>)
 800425c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004266:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800426a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800426c:	2302      	movs	r3, #2
 800426e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004270:	2300      	movs	r3, #0
 8004272:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004274:	2303      	movs	r3, #3
 8004276:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004278:	2307      	movs	r3, #7
 800427a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800427c:	f107 031c 	add.w	r3, r7, #28
 8004280:	4619      	mov	r1, r3
 8004282:	4866      	ldr	r0, [pc, #408]	; (800441c <HAL_UART_MspInit+0x210>)
 8004284:	f000 fea8 	bl	8004fd8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8004288:	4b65      	ldr	r3, [pc, #404]	; (8004420 <HAL_UART_MspInit+0x214>)
 800428a:	4a66      	ldr	r2, [pc, #408]	; (8004424 <HAL_UART_MspInit+0x218>)
 800428c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800428e:	4b64      	ldr	r3, [pc, #400]	; (8004420 <HAL_UART_MspInit+0x214>)
 8004290:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004294:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004296:	4b62      	ldr	r3, [pc, #392]	; (8004420 <HAL_UART_MspInit+0x214>)
 8004298:	2240      	movs	r2, #64	; 0x40
 800429a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800429c:	4b60      	ldr	r3, [pc, #384]	; (8004420 <HAL_UART_MspInit+0x214>)
 800429e:	2200      	movs	r2, #0
 80042a0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80042a2:	4b5f      	ldr	r3, [pc, #380]	; (8004420 <HAL_UART_MspInit+0x214>)
 80042a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042a8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042aa:	4b5d      	ldr	r3, [pc, #372]	; (8004420 <HAL_UART_MspInit+0x214>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042b0:	4b5b      	ldr	r3, [pc, #364]	; (8004420 <HAL_UART_MspInit+0x214>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80042b6:	4b5a      	ldr	r3, [pc, #360]	; (8004420 <HAL_UART_MspInit+0x214>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80042bc:	4b58      	ldr	r3, [pc, #352]	; (8004420 <HAL_UART_MspInit+0x214>)
 80042be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80042c2:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80042c4:	4b56      	ldr	r3, [pc, #344]	; (8004420 <HAL_UART_MspInit+0x214>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80042ca:	4855      	ldr	r0, [pc, #340]	; (8004420 <HAL_UART_MspInit+0x214>)
 80042cc:	f000 fb9a 	bl	8004a04 <HAL_DMA_Init>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80042d6:	f7ff fe09 	bl	8003eec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a50      	ldr	r2, [pc, #320]	; (8004420 <HAL_UART_MspInit+0x214>)
 80042de:	635a      	str	r2, [r3, #52]	; 0x34
 80042e0:	4a4f      	ldr	r2, [pc, #316]	; (8004420 <HAL_UART_MspInit+0x214>)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80042e6:	e090      	b.n	800440a <HAL_UART_MspInit+0x1fe>
  else if(huart->Instance==USART2)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a4e      	ldr	r2, [pc, #312]	; (8004428 <HAL_UART_MspInit+0x21c>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	f040 808b 	bne.w	800440a <HAL_UART_MspInit+0x1fe>
    __HAL_RCC_USART2_CLK_ENABLE();
 80042f4:	2300      	movs	r3, #0
 80042f6:	613b      	str	r3, [r7, #16]
 80042f8:	4b47      	ldr	r3, [pc, #284]	; (8004418 <HAL_UART_MspInit+0x20c>)
 80042fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fc:	4a46      	ldr	r2, [pc, #280]	; (8004418 <HAL_UART_MspInit+0x20c>)
 80042fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004302:	6413      	str	r3, [r2, #64]	; 0x40
 8004304:	4b44      	ldr	r3, [pc, #272]	; (8004418 <HAL_UART_MspInit+0x20c>)
 8004306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430c:	613b      	str	r3, [r7, #16]
 800430e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004310:	2300      	movs	r3, #0
 8004312:	60fb      	str	r3, [r7, #12]
 8004314:	4b40      	ldr	r3, [pc, #256]	; (8004418 <HAL_UART_MspInit+0x20c>)
 8004316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004318:	4a3f      	ldr	r2, [pc, #252]	; (8004418 <HAL_UART_MspInit+0x20c>)
 800431a:	f043 0308 	orr.w	r3, r3, #8
 800431e:	6313      	str	r3, [r2, #48]	; 0x30
 8004320:	4b3d      	ldr	r3, [pc, #244]	; (8004418 <HAL_UART_MspInit+0x20c>)
 8004322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004324:	f003 0308 	and.w	r3, r3, #8
 8004328:	60fb      	str	r3, [r7, #12]
 800432a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800432c:	2360      	movs	r3, #96	; 0x60
 800432e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004330:	2302      	movs	r3, #2
 8004332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004334:	2300      	movs	r3, #0
 8004336:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004338:	2303      	movs	r3, #3
 800433a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800433c:	2307      	movs	r3, #7
 800433e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004340:	f107 031c 	add.w	r3, r7, #28
 8004344:	4619      	mov	r1, r3
 8004346:	4839      	ldr	r0, [pc, #228]	; (800442c <HAL_UART_MspInit+0x220>)
 8004348:	f000 fe46 	bl	8004fd8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800434c:	4b38      	ldr	r3, [pc, #224]	; (8004430 <HAL_UART_MspInit+0x224>)
 800434e:	4a39      	ldr	r2, [pc, #228]	; (8004434 <HAL_UART_MspInit+0x228>)
 8004350:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8004352:	4b37      	ldr	r3, [pc, #220]	; (8004430 <HAL_UART_MspInit+0x224>)
 8004354:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004358:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800435a:	4b35      	ldr	r3, [pc, #212]	; (8004430 <HAL_UART_MspInit+0x224>)
 800435c:	2200      	movs	r2, #0
 800435e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004360:	4b33      	ldr	r3, [pc, #204]	; (8004430 <HAL_UART_MspInit+0x224>)
 8004362:	2200      	movs	r2, #0
 8004364:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004366:	4b32      	ldr	r3, [pc, #200]	; (8004430 <HAL_UART_MspInit+0x224>)
 8004368:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800436c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800436e:	4b30      	ldr	r3, [pc, #192]	; (8004430 <HAL_UART_MspInit+0x224>)
 8004370:	2200      	movs	r2, #0
 8004372:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004374:	4b2e      	ldr	r3, [pc, #184]	; (8004430 <HAL_UART_MspInit+0x224>)
 8004376:	2200      	movs	r2, #0
 8004378:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800437a:	4b2d      	ldr	r3, [pc, #180]	; (8004430 <HAL_UART_MspInit+0x224>)
 800437c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004380:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004382:	4b2b      	ldr	r3, [pc, #172]	; (8004430 <HAL_UART_MspInit+0x224>)
 8004384:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004388:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800438a:	4b29      	ldr	r3, [pc, #164]	; (8004430 <HAL_UART_MspInit+0x224>)
 800438c:	2200      	movs	r2, #0
 800438e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004390:	4827      	ldr	r0, [pc, #156]	; (8004430 <HAL_UART_MspInit+0x224>)
 8004392:	f000 fb37 	bl	8004a04 <HAL_DMA_Init>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <HAL_UART_MspInit+0x194>
      Error_Handler();
 800439c:	f7ff fda6 	bl	8003eec <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a23      	ldr	r2, [pc, #140]	; (8004430 <HAL_UART_MspInit+0x224>)
 80043a4:	639a      	str	r2, [r3, #56]	; 0x38
 80043a6:	4a22      	ldr	r2, [pc, #136]	; (8004430 <HAL_UART_MspInit+0x224>)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80043ac:	4b22      	ldr	r3, [pc, #136]	; (8004438 <HAL_UART_MspInit+0x22c>)
 80043ae:	4a23      	ldr	r2, [pc, #140]	; (800443c <HAL_UART_MspInit+0x230>)
 80043b0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80043b2:	4b21      	ldr	r3, [pc, #132]	; (8004438 <HAL_UART_MspInit+0x22c>)
 80043b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80043b8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80043ba:	4b1f      	ldr	r3, [pc, #124]	; (8004438 <HAL_UART_MspInit+0x22c>)
 80043bc:	2240      	movs	r2, #64	; 0x40
 80043be:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043c0:	4b1d      	ldr	r3, [pc, #116]	; (8004438 <HAL_UART_MspInit+0x22c>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80043c6:	4b1c      	ldr	r3, [pc, #112]	; (8004438 <HAL_UART_MspInit+0x22c>)
 80043c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043cc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043ce:	4b1a      	ldr	r3, [pc, #104]	; (8004438 <HAL_UART_MspInit+0x22c>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043d4:	4b18      	ldr	r3, [pc, #96]	; (8004438 <HAL_UART_MspInit+0x22c>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80043da:	4b17      	ldr	r3, [pc, #92]	; (8004438 <HAL_UART_MspInit+0x22c>)
 80043dc:	2200      	movs	r2, #0
 80043de:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80043e0:	4b15      	ldr	r3, [pc, #84]	; (8004438 <HAL_UART_MspInit+0x22c>)
 80043e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80043e6:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043e8:	4b13      	ldr	r3, [pc, #76]	; (8004438 <HAL_UART_MspInit+0x22c>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80043ee:	4812      	ldr	r0, [pc, #72]	; (8004438 <HAL_UART_MspInit+0x22c>)
 80043f0:	f000 fb08 	bl	8004a04 <HAL_DMA_Init>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <HAL_UART_MspInit+0x1f2>
      Error_Handler();
 80043fa:	f7ff fd77 	bl	8003eec <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a0d      	ldr	r2, [pc, #52]	; (8004438 <HAL_UART_MspInit+0x22c>)
 8004402:	635a      	str	r2, [r3, #52]	; 0x34
 8004404:	4a0c      	ldr	r2, [pc, #48]	; (8004438 <HAL_UART_MspInit+0x22c>)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6393      	str	r3, [r2, #56]	; 0x38
}
 800440a:	bf00      	nop
 800440c:	3730      	adds	r7, #48	; 0x30
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	40011000 	.word	0x40011000
 8004418:	40023800 	.word	0x40023800
 800441c:	40020000 	.word	0x40020000
 8004420:	20000878 	.word	0x20000878
 8004424:	400264b8 	.word	0x400264b8
 8004428:	40004400 	.word	0x40004400
 800442c:	40020c00 	.word	0x40020c00
 8004430:	200008d8 	.word	0x200008d8
 8004434:	40026088 	.word	0x40026088
 8004438:	20000938 	.word	0x20000938
 800443c:	400260a0 	.word	0x400260a0

08004440 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08e      	sub	sp, #56	; 0x38
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004450:	2300      	movs	r3, #0
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	4b33      	ldr	r3, [pc, #204]	; (8004524 <HAL_InitTick+0xe4>)
 8004456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004458:	4a32      	ldr	r2, [pc, #200]	; (8004524 <HAL_InitTick+0xe4>)
 800445a:	f043 0310 	orr.w	r3, r3, #16
 800445e:	6413      	str	r3, [r2, #64]	; 0x40
 8004460:	4b30      	ldr	r3, [pc, #192]	; (8004524 <HAL_InitTick+0xe4>)
 8004462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004464:	f003 0310 	and.w	r3, r3, #16
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800446c:	f107 0210 	add.w	r2, r7, #16
 8004470:	f107 0314 	add.w	r3, r7, #20
 8004474:	4611      	mov	r1, r2
 8004476:	4618      	mov	r0, r3
 8004478:	f003 f80a 	bl	8007490 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800447c:	6a3b      	ldr	r3, [r7, #32]
 800447e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004482:	2b00      	cmp	r3, #0
 8004484:	d103      	bne.n	800448e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004486:	f002 ffdb 	bl	8007440 <HAL_RCC_GetPCLK1Freq>
 800448a:	6378      	str	r0, [r7, #52]	; 0x34
 800448c:	e004      	b.n	8004498 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800448e:	f002 ffd7 	bl	8007440 <HAL_RCC_GetPCLK1Freq>
 8004492:	4603      	mov	r3, r0
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800449a:	4a23      	ldr	r2, [pc, #140]	; (8004528 <HAL_InitTick+0xe8>)
 800449c:	fba2 2303 	umull	r2, r3, r2, r3
 80044a0:	0c9b      	lsrs	r3, r3, #18
 80044a2:	3b01      	subs	r3, #1
 80044a4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80044a6:	4b21      	ldr	r3, [pc, #132]	; (800452c <HAL_InitTick+0xec>)
 80044a8:	4a21      	ldr	r2, [pc, #132]	; (8004530 <HAL_InitTick+0xf0>)
 80044aa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80044ac:	4b1f      	ldr	r3, [pc, #124]	; (800452c <HAL_InitTick+0xec>)
 80044ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80044b2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80044b4:	4a1d      	ldr	r2, [pc, #116]	; (800452c <HAL_InitTick+0xec>)
 80044b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80044ba:	4b1c      	ldr	r3, [pc, #112]	; (800452c <HAL_InitTick+0xec>)
 80044bc:	2200      	movs	r2, #0
 80044be:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044c0:	4b1a      	ldr	r3, [pc, #104]	; (800452c <HAL_InitTick+0xec>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044c6:	4b19      	ldr	r3, [pc, #100]	; (800452c <HAL_InitTick+0xec>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80044cc:	4817      	ldr	r0, [pc, #92]	; (800452c <HAL_InitTick+0xec>)
 80044ce:	f004 fa25 	bl	800891c <HAL_TIM_Base_Init>
 80044d2:	4603      	mov	r3, r0
 80044d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80044d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d11b      	bne.n	8004518 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80044e0:	4812      	ldr	r0, [pc, #72]	; (800452c <HAL_InitTick+0xec>)
 80044e2:	f004 fa75 	bl	80089d0 <HAL_TIM_Base_Start_IT>
 80044e6:	4603      	mov	r3, r0
 80044e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80044ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d111      	bne.n	8004518 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80044f4:	2036      	movs	r0, #54	; 0x36
 80044f6:	f000 fa77 	bl	80049e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b0f      	cmp	r3, #15
 80044fe:	d808      	bhi.n	8004512 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004500:	2200      	movs	r2, #0
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	2036      	movs	r0, #54	; 0x36
 8004506:	f000 fa53 	bl	80049b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800450a:	4a0a      	ldr	r2, [pc, #40]	; (8004534 <HAL_InitTick+0xf4>)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6013      	str	r3, [r2, #0]
 8004510:	e002      	b.n	8004518 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004518:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800451c:	4618      	mov	r0, r3
 800451e:	3738      	adds	r7, #56	; 0x38
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40023800 	.word	0x40023800
 8004528:	431bde83 	.word	0x431bde83
 800452c:	20000ba8 	.word	0x20000ba8
 8004530:	40001000 	.word	0x40001000
 8004534:	20000054 	.word	0x20000054

08004538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800453c:	e7fe      	b.n	800453c <NMI_Handler+0x4>

0800453e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800453e:	b480      	push	{r7}
 8004540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004542:	e7fe      	b.n	8004542 <HardFault_Handler+0x4>

08004544 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004548:	e7fe      	b.n	8004548 <MemManage_Handler+0x4>

0800454a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800454a:	b480      	push	{r7}
 800454c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800454e:	e7fe      	b.n	800454e <BusFault_Handler+0x4>

08004550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004554:	e7fe      	b.n	8004554 <UsageFault_Handler+0x4>

08004556 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004556:	b480      	push	{r7}
 8004558:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800455a:	bf00      	nop
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004568:	4802      	ldr	r0, [pc, #8]	; (8004574 <DMA1_Stream5_IRQHandler+0x10>)
 800456a:	f000 faf9 	bl	8004b60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800456e:	bf00      	nop
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	200008d8 	.word	0x200008d8

08004578 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800457c:	4802      	ldr	r0, [pc, #8]	; (8004588 <DMA1_Stream6_IRQHandler+0x10>)
 800457e:	f000 faef 	bl	8004b60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004582:	bf00      	nop
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	20000938 	.word	0x20000938

0800458c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004590:	4802      	ldr	r0, [pc, #8]	; (800459c <TIM6_DAC_IRQHandler+0x10>)
 8004592:	f004 fa8d 	bl	8008ab0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004596:	bf00      	nop
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	20000ba8 	.word	0x20000ba8

080045a0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80045a4:	4802      	ldr	r0, [pc, #8]	; (80045b0 <DMA2_Stream7_IRQHandler+0x10>)
 80045a6:	f000 fadb 	bl	8004b60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80045aa:	bf00      	nop
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	20000878 	.word	0x20000878

080045b4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045c0:	2300      	movs	r3, #0
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	e00a      	b.n	80045dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80045c6:	f3af 8000 	nop.w
 80045ca:	4601      	mov	r1, r0
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	1c5a      	adds	r2, r3, #1
 80045d0:	60ba      	str	r2, [r7, #8]
 80045d2:	b2ca      	uxtb	r2, r1
 80045d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	3301      	adds	r3, #1
 80045da:	617b      	str	r3, [r7, #20]
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	dbf0      	blt.n	80045c6 <_read+0x12>
  }

  return len;
 80045e4:	687b      	ldr	r3, [r7, #4]
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3718      	adds	r7, #24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b086      	sub	sp, #24
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	60f8      	str	r0, [r7, #12]
 80045f6:	60b9      	str	r1, [r7, #8]
 80045f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045fa:	2300      	movs	r3, #0
 80045fc:	617b      	str	r3, [r7, #20]
 80045fe:	e009      	b.n	8004614 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	60ba      	str	r2, [r7, #8]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	3301      	adds	r3, #1
 8004612:	617b      	str	r3, [r7, #20]
 8004614:	697a      	ldr	r2, [r7, #20]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	429a      	cmp	r2, r3
 800461a:	dbf1      	blt.n	8004600 <_write+0x12>
  }
  return len;
 800461c:	687b      	ldr	r3, [r7, #4]
}
 800461e:	4618      	mov	r0, r3
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <_close>:

int _close(int file)
{
 8004626:	b480      	push	{r7}
 8004628:	b083      	sub	sp, #12
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800462e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004632:	4618      	mov	r0, r3
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
 8004646:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800464e:	605a      	str	r2, [r3, #4]
  return 0;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <_isatty>:

int _isatty(int file)
{
 800465e:	b480      	push	{r7}
 8004660:	b083      	sub	sp, #12
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004666:	2301      	movs	r3, #1
}
 8004668:	4618      	mov	r0, r3
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004672:	4770      	bx	lr

08004674 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
	...

08004690 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004698:	4a14      	ldr	r2, [pc, #80]	; (80046ec <_sbrk+0x5c>)
 800469a:	4b15      	ldr	r3, [pc, #84]	; (80046f0 <_sbrk+0x60>)
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80046a4:	4b13      	ldr	r3, [pc, #76]	; (80046f4 <_sbrk+0x64>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d102      	bne.n	80046b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80046ac:	4b11      	ldr	r3, [pc, #68]	; (80046f4 <_sbrk+0x64>)
 80046ae:	4a12      	ldr	r2, [pc, #72]	; (80046f8 <_sbrk+0x68>)
 80046b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80046b2:	4b10      	ldr	r3, [pc, #64]	; (80046f4 <_sbrk+0x64>)
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4413      	add	r3, r2
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d207      	bcs.n	80046d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80046c0:	f00a fbfa 	bl	800eeb8 <__errno>
 80046c4:	4603      	mov	r3, r0
 80046c6:	220c      	movs	r2, #12
 80046c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80046ca:	f04f 33ff 	mov.w	r3, #4294967295
 80046ce:	e009      	b.n	80046e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80046d0:	4b08      	ldr	r3, [pc, #32]	; (80046f4 <_sbrk+0x64>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80046d6:	4b07      	ldr	r3, [pc, #28]	; (80046f4 <_sbrk+0x64>)
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4413      	add	r3, r2
 80046de:	4a05      	ldr	r2, [pc, #20]	; (80046f4 <_sbrk+0x64>)
 80046e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80046e2:	68fb      	ldr	r3, [r7, #12]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3718      	adds	r7, #24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	20020000 	.word	0x20020000
 80046f0:	00000400 	.word	0x00000400
 80046f4:	20000bf0 	.word	0x20000bf0
 80046f8:	20013970 	.word	0x20013970

080046fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80046fc:	b480      	push	{r7}
 80046fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004700:	4b06      	ldr	r3, [pc, #24]	; (800471c <SystemInit+0x20>)
 8004702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004706:	4a05      	ldr	r2, [pc, #20]	; (800471c <SystemInit+0x20>)
 8004708:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800470c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004710:	bf00      	nop
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	e000ed00 	.word	0xe000ed00

08004720 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004720:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004758 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004724:	480d      	ldr	r0, [pc, #52]	; (800475c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004726:	490e      	ldr	r1, [pc, #56]	; (8004760 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004728:	4a0e      	ldr	r2, [pc, #56]	; (8004764 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800472a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800472c:	e002      	b.n	8004734 <LoopCopyDataInit>

0800472e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800472e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004732:	3304      	adds	r3, #4

08004734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004738:	d3f9      	bcc.n	800472e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800473a:	4a0b      	ldr	r2, [pc, #44]	; (8004768 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800473c:	4c0b      	ldr	r4, [pc, #44]	; (800476c <LoopFillZerobss+0x26>)
  movs r3, #0
 800473e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004740:	e001      	b.n	8004746 <LoopFillZerobss>

08004742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004744:	3204      	adds	r2, #4

08004746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004748:	d3fb      	bcc.n	8004742 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800474a:	f7ff ffd7 	bl	80046fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800474e:	f00a fbb9 	bl	800eec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004752:	f7fe fbc5 	bl	8002ee0 <main>
  bx  lr    
 8004756:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004758:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800475c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004760:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8004764:	08011a68 	.word	0x08011a68
  ldr r2, =_sbss
 8004768:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 800476c:	20013970 	.word	0x20013970

08004770 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004770:	e7fe      	b.n	8004770 <ADC_IRQHandler>
	...

08004774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004778:	4b0e      	ldr	r3, [pc, #56]	; (80047b4 <HAL_Init+0x40>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a0d      	ldr	r2, [pc, #52]	; (80047b4 <HAL_Init+0x40>)
 800477e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004782:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004784:	4b0b      	ldr	r3, [pc, #44]	; (80047b4 <HAL_Init+0x40>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a0a      	ldr	r2, [pc, #40]	; (80047b4 <HAL_Init+0x40>)
 800478a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800478e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004790:	4b08      	ldr	r3, [pc, #32]	; (80047b4 <HAL_Init+0x40>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a07      	ldr	r2, [pc, #28]	; (80047b4 <HAL_Init+0x40>)
 8004796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800479a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800479c:	2003      	movs	r0, #3
 800479e:	f000 f8fc 	bl	800499a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80047a2:	200f      	movs	r0, #15
 80047a4:	f7ff fe4c 	bl	8004440 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80047a8:	f7ff fba6 	bl	8003ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	40023c00 	.word	0x40023c00

080047b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047bc:	4b06      	ldr	r3, [pc, #24]	; (80047d8 <HAL_IncTick+0x20>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	461a      	mov	r2, r3
 80047c2:	4b06      	ldr	r3, [pc, #24]	; (80047dc <HAL_IncTick+0x24>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4413      	add	r3, r2
 80047c8:	4a04      	ldr	r2, [pc, #16]	; (80047dc <HAL_IncTick+0x24>)
 80047ca:	6013      	str	r3, [r2, #0]
}
 80047cc:	bf00      	nop
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	20000058 	.word	0x20000058
 80047dc:	20000bf4 	.word	0x20000bf4

080047e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
  return uwTick;
 80047e4:	4b03      	ldr	r3, [pc, #12]	; (80047f4 <HAL_GetTick+0x14>)
 80047e6:	681b      	ldr	r3, [r3, #0]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	20000bf4 	.word	0x20000bf4

080047f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004800:	f7ff ffee 	bl	80047e0 <HAL_GetTick>
 8004804:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004810:	d005      	beq.n	800481e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004812:	4b0a      	ldr	r3, [pc, #40]	; (800483c <HAL_Delay+0x44>)
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	461a      	mov	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	4413      	add	r3, r2
 800481c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800481e:	bf00      	nop
 8004820:	f7ff ffde 	bl	80047e0 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	429a      	cmp	r2, r3
 800482e:	d8f7      	bhi.n	8004820 <HAL_Delay+0x28>
  {
  }
}
 8004830:	bf00      	nop
 8004832:	bf00      	nop
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	20000058 	.word	0x20000058

08004840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004850:	4b0c      	ldr	r3, [pc, #48]	; (8004884 <__NVIC_SetPriorityGrouping+0x44>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800485c:	4013      	ands	r3, r2
 800485e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004868:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800486c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004872:	4a04      	ldr	r2, [pc, #16]	; (8004884 <__NVIC_SetPriorityGrouping+0x44>)
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	60d3      	str	r3, [r2, #12]
}
 8004878:	bf00      	nop
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	e000ed00 	.word	0xe000ed00

08004888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800488c:	4b04      	ldr	r3, [pc, #16]	; (80048a0 <__NVIC_GetPriorityGrouping+0x18>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	0a1b      	lsrs	r3, r3, #8
 8004892:	f003 0307 	and.w	r3, r3, #7
}
 8004896:	4618      	mov	r0, r3
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	e000ed00 	.word	0xe000ed00

080048a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	4603      	mov	r3, r0
 80048ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	db0b      	blt.n	80048ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048b6:	79fb      	ldrb	r3, [r7, #7]
 80048b8:	f003 021f 	and.w	r2, r3, #31
 80048bc:	4907      	ldr	r1, [pc, #28]	; (80048dc <__NVIC_EnableIRQ+0x38>)
 80048be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c2:	095b      	lsrs	r3, r3, #5
 80048c4:	2001      	movs	r0, #1
 80048c6:	fa00 f202 	lsl.w	r2, r0, r2
 80048ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	e000e100 	.word	0xe000e100

080048e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	4603      	mov	r3, r0
 80048e8:	6039      	str	r1, [r7, #0]
 80048ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	db0a      	blt.n	800490a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	490c      	ldr	r1, [pc, #48]	; (800492c <__NVIC_SetPriority+0x4c>)
 80048fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048fe:	0112      	lsls	r2, r2, #4
 8004900:	b2d2      	uxtb	r2, r2
 8004902:	440b      	add	r3, r1
 8004904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004908:	e00a      	b.n	8004920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	b2da      	uxtb	r2, r3
 800490e:	4908      	ldr	r1, [pc, #32]	; (8004930 <__NVIC_SetPriority+0x50>)
 8004910:	79fb      	ldrb	r3, [r7, #7]
 8004912:	f003 030f 	and.w	r3, r3, #15
 8004916:	3b04      	subs	r3, #4
 8004918:	0112      	lsls	r2, r2, #4
 800491a:	b2d2      	uxtb	r2, r2
 800491c:	440b      	add	r3, r1
 800491e:	761a      	strb	r2, [r3, #24]
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	e000e100 	.word	0xe000e100
 8004930:	e000ed00 	.word	0xe000ed00

08004934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004934:	b480      	push	{r7}
 8004936:	b089      	sub	sp, #36	; 0x24
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	f1c3 0307 	rsb	r3, r3, #7
 800494e:	2b04      	cmp	r3, #4
 8004950:	bf28      	it	cs
 8004952:	2304      	movcs	r3, #4
 8004954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	3304      	adds	r3, #4
 800495a:	2b06      	cmp	r3, #6
 800495c:	d902      	bls.n	8004964 <NVIC_EncodePriority+0x30>
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	3b03      	subs	r3, #3
 8004962:	e000      	b.n	8004966 <NVIC_EncodePriority+0x32>
 8004964:	2300      	movs	r3, #0
 8004966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004968:	f04f 32ff 	mov.w	r2, #4294967295
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	fa02 f303 	lsl.w	r3, r2, r3
 8004972:	43da      	mvns	r2, r3
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	401a      	ands	r2, r3
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800497c:	f04f 31ff 	mov.w	r1, #4294967295
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	fa01 f303 	lsl.w	r3, r1, r3
 8004986:	43d9      	mvns	r1, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800498c:	4313      	orrs	r3, r2
         );
}
 800498e:	4618      	mov	r0, r3
 8004990:	3724      	adds	r7, #36	; 0x24
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b082      	sub	sp, #8
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7ff ff4c 	bl	8004840 <__NVIC_SetPriorityGrouping>
}
 80049a8:	bf00      	nop
 80049aa:	3708      	adds	r7, #8
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	4603      	mov	r3, r0
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
 80049bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80049be:	2300      	movs	r3, #0
 80049c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049c2:	f7ff ff61 	bl	8004888 <__NVIC_GetPriorityGrouping>
 80049c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	68b9      	ldr	r1, [r7, #8]
 80049cc:	6978      	ldr	r0, [r7, #20]
 80049ce:	f7ff ffb1 	bl	8004934 <NVIC_EncodePriority>
 80049d2:	4602      	mov	r2, r0
 80049d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049d8:	4611      	mov	r1, r2
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff ff80 	bl	80048e0 <__NVIC_SetPriority>
}
 80049e0:	bf00      	nop
 80049e2:	3718      	adds	r7, #24
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	4603      	mov	r3, r0
 80049f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7ff ff54 	bl	80048a4 <__NVIC_EnableIRQ>
}
 80049fc:	bf00      	nop
 80049fe:	3708      	adds	r7, #8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004a10:	f7ff fee6 	bl	80047e0 <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e099      	b.n	8004b54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 0201 	bic.w	r2, r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a40:	e00f      	b.n	8004a62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a42:	f7ff fecd 	bl	80047e0 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b05      	cmp	r3, #5
 8004a4e:	d908      	bls.n	8004a62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2220      	movs	r2, #32
 8004a54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2203      	movs	r2, #3
 8004a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e078      	b.n	8004b54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1e8      	bne.n	8004a42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	4b38      	ldr	r3, [pc, #224]	; (8004b5c <HAL_DMA_Init+0x158>)
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aa6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab8:	2b04      	cmp	r3, #4
 8004aba:	d107      	bne.n	8004acc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f023 0307 	bic.w	r3, r3, #7
 8004ae2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae8:	697a      	ldr	r2, [r7, #20]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d117      	bne.n	8004b26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00e      	beq.n	8004b26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f9e9 	bl	8004ee0 <DMA_CheckFifoParam>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d008      	beq.n	8004b26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2240      	movs	r2, #64	; 0x40
 8004b18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004b22:	2301      	movs	r3, #1
 8004b24:	e016      	b.n	8004b54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f9a0 	bl	8004e74 <DMA_CalcBaseAndBitshift>
 8004b34:	4603      	mov	r3, r0
 8004b36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b3c:	223f      	movs	r2, #63	; 0x3f
 8004b3e:	409a      	lsls	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3718      	adds	r7, #24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	f010803f 	.word	0xf010803f

08004b60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004b6c:	4b8e      	ldr	r3, [pc, #568]	; (8004da8 <HAL_DMA_IRQHandler+0x248>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a8e      	ldr	r2, [pc, #568]	; (8004dac <HAL_DMA_IRQHandler+0x24c>)
 8004b72:	fba2 2303 	umull	r2, r3, r2, r3
 8004b76:	0a9b      	lsrs	r3, r3, #10
 8004b78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b8a:	2208      	movs	r2, #8
 8004b8c:	409a      	lsls	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4013      	ands	r3, r2
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d01a      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0304 	and.w	r3, r3, #4
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d013      	beq.n	8004bcc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0204 	bic.w	r2, r2, #4
 8004bb2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bb8:	2208      	movs	r2, #8
 8004bba:	409a      	lsls	r2, r3
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc4:	f043 0201 	orr.w	r2, r3, #1
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	409a      	lsls	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d012      	beq.n	8004c02 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00b      	beq.n	8004c02 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bee:	2201      	movs	r2, #1
 8004bf0:	409a      	lsls	r2, r3
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bfa:	f043 0202 	orr.w	r2, r3, #2
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c06:	2204      	movs	r2, #4
 8004c08:	409a      	lsls	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d012      	beq.n	8004c38 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00b      	beq.n	8004c38 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c24:	2204      	movs	r2, #4
 8004c26:	409a      	lsls	r2, r3
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c30:	f043 0204 	orr.w	r2, r3, #4
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c3c:	2210      	movs	r2, #16
 8004c3e:	409a      	lsls	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	4013      	ands	r3, r2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d043      	beq.n	8004cd0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0308 	and.w	r3, r3, #8
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d03c      	beq.n	8004cd0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c5a:	2210      	movs	r2, #16
 8004c5c:	409a      	lsls	r2, r3
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d018      	beq.n	8004ca2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d108      	bne.n	8004c90 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d024      	beq.n	8004cd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	4798      	blx	r3
 8004c8e:	e01f      	b.n	8004cd0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d01b      	beq.n	8004cd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	4798      	blx	r3
 8004ca0:	e016      	b.n	8004cd0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d107      	bne.n	8004cc0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 0208 	bic.w	r2, r2, #8
 8004cbe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d003      	beq.n	8004cd0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	409a      	lsls	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 808f 	beq.w	8004e00 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0310 	and.w	r3, r3, #16
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 8087 	beq.w	8004e00 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	409a      	lsls	r2, r3
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b05      	cmp	r3, #5
 8004d08:	d136      	bne.n	8004d78 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0216 	bic.w	r2, r2, #22
 8004d18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	695a      	ldr	r2, [r3, #20]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d28:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d103      	bne.n	8004d3a <HAL_DMA_IRQHandler+0x1da>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d007      	beq.n	8004d4a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 0208 	bic.w	r2, r2, #8
 8004d48:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d4e:	223f      	movs	r2, #63	; 0x3f
 8004d50:	409a      	lsls	r2, r3
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d07e      	beq.n	8004e6c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	4798      	blx	r3
        }
        return;
 8004d76:	e079      	b.n	8004e6c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d01d      	beq.n	8004dc2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10d      	bne.n	8004db0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d031      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	4798      	blx	r3
 8004da4:	e02c      	b.n	8004e00 <HAL_DMA_IRQHandler+0x2a0>
 8004da6:	bf00      	nop
 8004da8:	20000050 	.word	0x20000050
 8004dac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d023      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	4798      	blx	r3
 8004dc0:	e01e      	b.n	8004e00 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d10f      	bne.n	8004df0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0210 	bic.w	r2, r2, #16
 8004dde:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d003      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d032      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d022      	beq.n	8004e5a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2205      	movs	r2, #5
 8004e18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 0201 	bic.w	r2, r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	3301      	adds	r3, #1
 8004e30:	60bb      	str	r3, [r7, #8]
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d307      	bcc.n	8004e48 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1f2      	bne.n	8004e2c <HAL_DMA_IRQHandler+0x2cc>
 8004e46:	e000      	b.n	8004e4a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004e48:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d005      	beq.n	8004e6e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	4798      	blx	r3
 8004e6a:	e000      	b.n	8004e6e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004e6c:	bf00      	nop
    }
  }
}
 8004e6e:	3718      	adds	r7, #24
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	3b10      	subs	r3, #16
 8004e84:	4a14      	ldr	r2, [pc, #80]	; (8004ed8 <DMA_CalcBaseAndBitshift+0x64>)
 8004e86:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8a:	091b      	lsrs	r3, r3, #4
 8004e8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e8e:	4a13      	ldr	r2, [pc, #76]	; (8004edc <DMA_CalcBaseAndBitshift+0x68>)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	4413      	add	r3, r2
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	461a      	mov	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2b03      	cmp	r3, #3
 8004ea0:	d909      	bls.n	8004eb6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004eaa:	f023 0303 	bic.w	r3, r3, #3
 8004eae:	1d1a      	adds	r2, r3, #4
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	659a      	str	r2, [r3, #88]	; 0x58
 8004eb4:	e007      	b.n	8004ec6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ebe:	f023 0303 	bic.w	r3, r3, #3
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3714      	adds	r7, #20
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	aaaaaaab 	.word	0xaaaaaaab
 8004edc:	080118f0 	.word	0x080118f0

08004ee0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d11f      	bne.n	8004f3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2b03      	cmp	r3, #3
 8004efe:	d856      	bhi.n	8004fae <DMA_CheckFifoParam+0xce>
 8004f00:	a201      	add	r2, pc, #4	; (adr r2, 8004f08 <DMA_CheckFifoParam+0x28>)
 8004f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f06:	bf00      	nop
 8004f08:	08004f19 	.word	0x08004f19
 8004f0c:	08004f2b 	.word	0x08004f2b
 8004f10:	08004f19 	.word	0x08004f19
 8004f14:	08004faf 	.word	0x08004faf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d046      	beq.n	8004fb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f28:	e043      	b.n	8004fb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f32:	d140      	bne.n	8004fb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f38:	e03d      	b.n	8004fb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f42:	d121      	bne.n	8004f88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2b03      	cmp	r3, #3
 8004f48:	d837      	bhi.n	8004fba <DMA_CheckFifoParam+0xda>
 8004f4a:	a201      	add	r2, pc, #4	; (adr r2, 8004f50 <DMA_CheckFifoParam+0x70>)
 8004f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f50:	08004f61 	.word	0x08004f61
 8004f54:	08004f67 	.word	0x08004f67
 8004f58:	08004f61 	.word	0x08004f61
 8004f5c:	08004f79 	.word	0x08004f79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	73fb      	strb	r3, [r7, #15]
      break;
 8004f64:	e030      	b.n	8004fc8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d025      	beq.n	8004fbe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f76:	e022      	b.n	8004fbe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f80:	d11f      	bne.n	8004fc2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f86:	e01c      	b.n	8004fc2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d903      	bls.n	8004f96 <DMA_CheckFifoParam+0xb6>
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	2b03      	cmp	r3, #3
 8004f92:	d003      	beq.n	8004f9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f94:	e018      	b.n	8004fc8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	73fb      	strb	r3, [r7, #15]
      break;
 8004f9a:	e015      	b.n	8004fc8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00e      	beq.n	8004fc6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	73fb      	strb	r3, [r7, #15]
      break;
 8004fac:	e00b      	b.n	8004fc6 <DMA_CheckFifoParam+0xe6>
      break;
 8004fae:	bf00      	nop
 8004fb0:	e00a      	b.n	8004fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8004fb2:	bf00      	nop
 8004fb4:	e008      	b.n	8004fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8004fb6:	bf00      	nop
 8004fb8:	e006      	b.n	8004fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8004fba:	bf00      	nop
 8004fbc:	e004      	b.n	8004fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8004fbe:	bf00      	nop
 8004fc0:	e002      	b.n	8004fc8 <DMA_CheckFifoParam+0xe8>
      break;   
 8004fc2:	bf00      	nop
 8004fc4:	e000      	b.n	8004fc8 <DMA_CheckFifoParam+0xe8>
      break;
 8004fc6:	bf00      	nop
    }
  } 
  
  return status; 
 8004fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop

08004fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b089      	sub	sp, #36	; 0x24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fee:	2300      	movs	r3, #0
 8004ff0:	61fb      	str	r3, [r7, #28]
 8004ff2:	e16b      	b.n	80052cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	4013      	ands	r3, r2
 8005006:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	429a      	cmp	r2, r3
 800500e:	f040 815a 	bne.w	80052c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f003 0303 	and.w	r3, r3, #3
 800501a:	2b01      	cmp	r3, #1
 800501c:	d005      	beq.n	800502a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005026:	2b02      	cmp	r3, #2
 8005028:	d130      	bne.n	800508c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	2203      	movs	r2, #3
 8005036:	fa02 f303 	lsl.w	r3, r2, r3
 800503a:	43db      	mvns	r3, r3
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	4013      	ands	r3, r2
 8005040:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	68da      	ldr	r2, [r3, #12]
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	fa02 f303 	lsl.w	r3, r2, r3
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	4313      	orrs	r3, r2
 8005052:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005060:	2201      	movs	r2, #1
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	fa02 f303 	lsl.w	r3, r2, r3
 8005068:	43db      	mvns	r3, r3
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	4013      	ands	r3, r2
 800506e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	091b      	lsrs	r3, r3, #4
 8005076:	f003 0201 	and.w	r2, r3, #1
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	fa02 f303 	lsl.w	r3, r2, r3
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	4313      	orrs	r3, r2
 8005084:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f003 0303 	and.w	r3, r3, #3
 8005094:	2b03      	cmp	r3, #3
 8005096:	d017      	beq.n	80050c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	2203      	movs	r2, #3
 80050a4:	fa02 f303 	lsl.w	r3, r2, r3
 80050a8:	43db      	mvns	r3, r3
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	4013      	ands	r3, r2
 80050ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	689a      	ldr	r2, [r3, #8]
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	fa02 f303 	lsl.w	r3, r2, r3
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	4313      	orrs	r3, r2
 80050c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f003 0303 	and.w	r3, r3, #3
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d123      	bne.n	800511c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	08da      	lsrs	r2, r3, #3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	3208      	adds	r2, #8
 80050dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	f003 0307 	and.w	r3, r3, #7
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	220f      	movs	r2, #15
 80050ec:	fa02 f303 	lsl.w	r3, r2, r3
 80050f0:	43db      	mvns	r3, r3
 80050f2:	69ba      	ldr	r2, [r7, #24]
 80050f4:	4013      	ands	r3, r2
 80050f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	691a      	ldr	r2, [r3, #16]
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	f003 0307 	and.w	r3, r3, #7
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	fa02 f303 	lsl.w	r3, r2, r3
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	4313      	orrs	r3, r2
 800510c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	08da      	lsrs	r2, r3, #3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	3208      	adds	r2, #8
 8005116:	69b9      	ldr	r1, [r7, #24]
 8005118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	2203      	movs	r2, #3
 8005128:	fa02 f303 	lsl.w	r3, r2, r3
 800512c:	43db      	mvns	r3, r3
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	4013      	ands	r3, r2
 8005132:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f003 0203 	and.w	r2, r3, #3
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	fa02 f303 	lsl.w	r3, r2, r3
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	4313      	orrs	r3, r2
 8005148:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	69ba      	ldr	r2, [r7, #24]
 800514e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005158:	2b00      	cmp	r3, #0
 800515a:	f000 80b4 	beq.w	80052c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800515e:	2300      	movs	r3, #0
 8005160:	60fb      	str	r3, [r7, #12]
 8005162:	4b60      	ldr	r3, [pc, #384]	; (80052e4 <HAL_GPIO_Init+0x30c>)
 8005164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005166:	4a5f      	ldr	r2, [pc, #380]	; (80052e4 <HAL_GPIO_Init+0x30c>)
 8005168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800516c:	6453      	str	r3, [r2, #68]	; 0x44
 800516e:	4b5d      	ldr	r3, [pc, #372]	; (80052e4 <HAL_GPIO_Init+0x30c>)
 8005170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005176:	60fb      	str	r3, [r7, #12]
 8005178:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800517a:	4a5b      	ldr	r2, [pc, #364]	; (80052e8 <HAL_GPIO_Init+0x310>)
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	089b      	lsrs	r3, r3, #2
 8005180:	3302      	adds	r3, #2
 8005182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005186:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	f003 0303 	and.w	r3, r3, #3
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	220f      	movs	r2, #15
 8005192:	fa02 f303 	lsl.w	r3, r2, r3
 8005196:	43db      	mvns	r3, r3
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	4013      	ands	r3, r2
 800519c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a52      	ldr	r2, [pc, #328]	; (80052ec <HAL_GPIO_Init+0x314>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d02b      	beq.n	80051fe <HAL_GPIO_Init+0x226>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a51      	ldr	r2, [pc, #324]	; (80052f0 <HAL_GPIO_Init+0x318>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d025      	beq.n	80051fa <HAL_GPIO_Init+0x222>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a50      	ldr	r2, [pc, #320]	; (80052f4 <HAL_GPIO_Init+0x31c>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d01f      	beq.n	80051f6 <HAL_GPIO_Init+0x21e>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a4f      	ldr	r2, [pc, #316]	; (80052f8 <HAL_GPIO_Init+0x320>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d019      	beq.n	80051f2 <HAL_GPIO_Init+0x21a>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a4e      	ldr	r2, [pc, #312]	; (80052fc <HAL_GPIO_Init+0x324>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d013      	beq.n	80051ee <HAL_GPIO_Init+0x216>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a4d      	ldr	r2, [pc, #308]	; (8005300 <HAL_GPIO_Init+0x328>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d00d      	beq.n	80051ea <HAL_GPIO_Init+0x212>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a4c      	ldr	r2, [pc, #304]	; (8005304 <HAL_GPIO_Init+0x32c>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d007      	beq.n	80051e6 <HAL_GPIO_Init+0x20e>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a4b      	ldr	r2, [pc, #300]	; (8005308 <HAL_GPIO_Init+0x330>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d101      	bne.n	80051e2 <HAL_GPIO_Init+0x20a>
 80051de:	2307      	movs	r3, #7
 80051e0:	e00e      	b.n	8005200 <HAL_GPIO_Init+0x228>
 80051e2:	2308      	movs	r3, #8
 80051e4:	e00c      	b.n	8005200 <HAL_GPIO_Init+0x228>
 80051e6:	2306      	movs	r3, #6
 80051e8:	e00a      	b.n	8005200 <HAL_GPIO_Init+0x228>
 80051ea:	2305      	movs	r3, #5
 80051ec:	e008      	b.n	8005200 <HAL_GPIO_Init+0x228>
 80051ee:	2304      	movs	r3, #4
 80051f0:	e006      	b.n	8005200 <HAL_GPIO_Init+0x228>
 80051f2:	2303      	movs	r3, #3
 80051f4:	e004      	b.n	8005200 <HAL_GPIO_Init+0x228>
 80051f6:	2302      	movs	r3, #2
 80051f8:	e002      	b.n	8005200 <HAL_GPIO_Init+0x228>
 80051fa:	2301      	movs	r3, #1
 80051fc:	e000      	b.n	8005200 <HAL_GPIO_Init+0x228>
 80051fe:	2300      	movs	r3, #0
 8005200:	69fa      	ldr	r2, [r7, #28]
 8005202:	f002 0203 	and.w	r2, r2, #3
 8005206:	0092      	lsls	r2, r2, #2
 8005208:	4093      	lsls	r3, r2
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	4313      	orrs	r3, r2
 800520e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005210:	4935      	ldr	r1, [pc, #212]	; (80052e8 <HAL_GPIO_Init+0x310>)
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	089b      	lsrs	r3, r3, #2
 8005216:	3302      	adds	r3, #2
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800521e:	4b3b      	ldr	r3, [pc, #236]	; (800530c <HAL_GPIO_Init+0x334>)
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	43db      	mvns	r3, r3
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	4013      	ands	r3, r2
 800522c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d003      	beq.n	8005242 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	4313      	orrs	r3, r2
 8005240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005242:	4a32      	ldr	r2, [pc, #200]	; (800530c <HAL_GPIO_Init+0x334>)
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005248:	4b30      	ldr	r3, [pc, #192]	; (800530c <HAL_GPIO_Init+0x334>)
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	43db      	mvns	r3, r3
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	4013      	ands	r3, r2
 8005256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d003      	beq.n	800526c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	4313      	orrs	r3, r2
 800526a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800526c:	4a27      	ldr	r2, [pc, #156]	; (800530c <HAL_GPIO_Init+0x334>)
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005272:	4b26      	ldr	r3, [pc, #152]	; (800530c <HAL_GPIO_Init+0x334>)
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	43db      	mvns	r3, r3
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	4013      	ands	r3, r2
 8005280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800528e:	69ba      	ldr	r2, [r7, #24]
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	4313      	orrs	r3, r2
 8005294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005296:	4a1d      	ldr	r2, [pc, #116]	; (800530c <HAL_GPIO_Init+0x334>)
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800529c:	4b1b      	ldr	r3, [pc, #108]	; (800530c <HAL_GPIO_Init+0x334>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	43db      	mvns	r3, r3
 80052a6:	69ba      	ldr	r2, [r7, #24]
 80052a8:	4013      	ands	r3, r2
 80052aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d003      	beq.n	80052c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	4313      	orrs	r3, r2
 80052be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80052c0:	4a12      	ldr	r2, [pc, #72]	; (800530c <HAL_GPIO_Init+0x334>)
 80052c2:	69bb      	ldr	r3, [r7, #24]
 80052c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	3301      	adds	r3, #1
 80052ca:	61fb      	str	r3, [r7, #28]
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	2b0f      	cmp	r3, #15
 80052d0:	f67f ae90 	bls.w	8004ff4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80052d4:	bf00      	nop
 80052d6:	bf00      	nop
 80052d8:	3724      	adds	r7, #36	; 0x24
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	40023800 	.word	0x40023800
 80052e8:	40013800 	.word	0x40013800
 80052ec:	40020000 	.word	0x40020000
 80052f0:	40020400 	.word	0x40020400
 80052f4:	40020800 	.word	0x40020800
 80052f8:	40020c00 	.word	0x40020c00
 80052fc:	40021000 	.word	0x40021000
 8005300:	40021400 	.word	0x40021400
 8005304:	40021800 	.word	0x40021800
 8005308:	40021c00 	.word	0x40021c00
 800530c:	40013c00 	.word	0x40013c00

08005310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	460b      	mov	r3, r1
 800531a:	807b      	strh	r3, [r7, #2]
 800531c:	4613      	mov	r3, r2
 800531e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005320:	787b      	ldrb	r3, [r7, #1]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005326:	887a      	ldrh	r2, [r7, #2]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800532c:	e003      	b.n	8005336 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800532e:	887b      	ldrh	r3, [r7, #2]
 8005330:	041a      	lsls	r2, r3, #16
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	619a      	str	r2, [r3, #24]
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
	...

08005344 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e12b      	b.n	80055ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d106      	bne.n	8005370 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f7fe fdec 	bl	8003f48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2224      	movs	r2, #36	; 0x24
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f022 0201 	bic.w	r2, r2, #1
 8005386:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005396:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80053a8:	f002 f84a 	bl	8007440 <HAL_RCC_GetPCLK1Freq>
 80053ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	4a81      	ldr	r2, [pc, #516]	; (80055b8 <HAL_I2C_Init+0x274>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d807      	bhi.n	80053c8 <HAL_I2C_Init+0x84>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	4a80      	ldr	r2, [pc, #512]	; (80055bc <HAL_I2C_Init+0x278>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	bf94      	ite	ls
 80053c0:	2301      	movls	r3, #1
 80053c2:	2300      	movhi	r3, #0
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	e006      	b.n	80053d6 <HAL_I2C_Init+0x92>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4a7d      	ldr	r2, [pc, #500]	; (80055c0 <HAL_I2C_Init+0x27c>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	bf94      	ite	ls
 80053d0:	2301      	movls	r3, #1
 80053d2:	2300      	movhi	r3, #0
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e0e7      	b.n	80055ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	4a78      	ldr	r2, [pc, #480]	; (80055c4 <HAL_I2C_Init+0x280>)
 80053e2:	fba2 2303 	umull	r2, r3, r2, r3
 80053e6:	0c9b      	lsrs	r3, r3, #18
 80053e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	6a1b      	ldr	r3, [r3, #32]
 8005404:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	4a6a      	ldr	r2, [pc, #424]	; (80055b8 <HAL_I2C_Init+0x274>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d802      	bhi.n	8005418 <HAL_I2C_Init+0xd4>
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	3301      	adds	r3, #1
 8005416:	e009      	b.n	800542c <HAL_I2C_Init+0xe8>
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800541e:	fb02 f303 	mul.w	r3, r2, r3
 8005422:	4a69      	ldr	r2, [pc, #420]	; (80055c8 <HAL_I2C_Init+0x284>)
 8005424:	fba2 2303 	umull	r2, r3, r2, r3
 8005428:	099b      	lsrs	r3, r3, #6
 800542a:	3301      	adds	r3, #1
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	6812      	ldr	r2, [r2, #0]
 8005430:	430b      	orrs	r3, r1
 8005432:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800543e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	495c      	ldr	r1, [pc, #368]	; (80055b8 <HAL_I2C_Init+0x274>)
 8005448:	428b      	cmp	r3, r1
 800544a:	d819      	bhi.n	8005480 <HAL_I2C_Init+0x13c>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	1e59      	subs	r1, r3, #1
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	005b      	lsls	r3, r3, #1
 8005456:	fbb1 f3f3 	udiv	r3, r1, r3
 800545a:	1c59      	adds	r1, r3, #1
 800545c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005460:	400b      	ands	r3, r1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00a      	beq.n	800547c <HAL_I2C_Init+0x138>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	1e59      	subs	r1, r3, #1
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	005b      	lsls	r3, r3, #1
 8005470:	fbb1 f3f3 	udiv	r3, r1, r3
 8005474:	3301      	adds	r3, #1
 8005476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800547a:	e051      	b.n	8005520 <HAL_I2C_Init+0x1dc>
 800547c:	2304      	movs	r3, #4
 800547e:	e04f      	b.n	8005520 <HAL_I2C_Init+0x1dc>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d111      	bne.n	80054ac <HAL_I2C_Init+0x168>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	1e58      	subs	r0, r3, #1
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6859      	ldr	r1, [r3, #4]
 8005490:	460b      	mov	r3, r1
 8005492:	005b      	lsls	r3, r3, #1
 8005494:	440b      	add	r3, r1
 8005496:	fbb0 f3f3 	udiv	r3, r0, r3
 800549a:	3301      	adds	r3, #1
 800549c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	bf0c      	ite	eq
 80054a4:	2301      	moveq	r3, #1
 80054a6:	2300      	movne	r3, #0
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	e012      	b.n	80054d2 <HAL_I2C_Init+0x18e>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	1e58      	subs	r0, r3, #1
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6859      	ldr	r1, [r3, #4]
 80054b4:	460b      	mov	r3, r1
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	440b      	add	r3, r1
 80054ba:	0099      	lsls	r1, r3, #2
 80054bc:	440b      	add	r3, r1
 80054be:	fbb0 f3f3 	udiv	r3, r0, r3
 80054c2:	3301      	adds	r3, #1
 80054c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	bf0c      	ite	eq
 80054cc:	2301      	moveq	r3, #1
 80054ce:	2300      	movne	r3, #0
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <HAL_I2C_Init+0x196>
 80054d6:	2301      	movs	r3, #1
 80054d8:	e022      	b.n	8005520 <HAL_I2C_Init+0x1dc>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10e      	bne.n	8005500 <HAL_I2C_Init+0x1bc>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	1e58      	subs	r0, r3, #1
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6859      	ldr	r1, [r3, #4]
 80054ea:	460b      	mov	r3, r1
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	440b      	add	r3, r1
 80054f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80054f4:	3301      	adds	r3, #1
 80054f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054fe:	e00f      	b.n	8005520 <HAL_I2C_Init+0x1dc>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	1e58      	subs	r0, r3, #1
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6859      	ldr	r1, [r3, #4]
 8005508:	460b      	mov	r3, r1
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	440b      	add	r3, r1
 800550e:	0099      	lsls	r1, r3, #2
 8005510:	440b      	add	r3, r1
 8005512:	fbb0 f3f3 	udiv	r3, r0, r3
 8005516:	3301      	adds	r3, #1
 8005518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800551c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005520:	6879      	ldr	r1, [r7, #4]
 8005522:	6809      	ldr	r1, [r1, #0]
 8005524:	4313      	orrs	r3, r2
 8005526:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	69da      	ldr	r2, [r3, #28]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	431a      	orrs	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800554e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	6911      	ldr	r1, [r2, #16]
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	68d2      	ldr	r2, [r2, #12]
 800555a:	4311      	orrs	r1, r2
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	6812      	ldr	r2, [r2, #0]
 8005560:	430b      	orrs	r3, r1
 8005562:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	695a      	ldr	r2, [r3, #20]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	431a      	orrs	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f042 0201 	orr.w	r2, r2, #1
 800558e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2220      	movs	r2, #32
 800559a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	000186a0 	.word	0x000186a0
 80055bc:	001e847f 	.word	0x001e847f
 80055c0:	003d08ff 	.word	0x003d08ff
 80055c4:	431bde83 	.word	0x431bde83
 80055c8:	10624dd3 	.word	0x10624dd3

080055cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b088      	sub	sp, #32
 80055d0:	af02      	add	r7, sp, #8
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	607a      	str	r2, [r7, #4]
 80055d6:	461a      	mov	r2, r3
 80055d8:	460b      	mov	r3, r1
 80055da:	817b      	strh	r3, [r7, #10]
 80055dc:	4613      	mov	r3, r2
 80055de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80055e0:	f7ff f8fe 	bl	80047e0 <HAL_GetTick>
 80055e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b20      	cmp	r3, #32
 80055f0:	f040 80e0 	bne.w	80057b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	9300      	str	r3, [sp, #0]
 80055f8:	2319      	movs	r3, #25
 80055fa:	2201      	movs	r2, #1
 80055fc:	4970      	ldr	r1, [pc, #448]	; (80057c0 <HAL_I2C_Master_Transmit+0x1f4>)
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f001 f910 	bl	8006824 <I2C_WaitOnFlagUntilTimeout>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800560a:	2302      	movs	r3, #2
 800560c:	e0d3      	b.n	80057b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005614:	2b01      	cmp	r3, #1
 8005616:	d101      	bne.n	800561c <HAL_I2C_Master_Transmit+0x50>
 8005618:	2302      	movs	r3, #2
 800561a:	e0cc      	b.n	80057b6 <HAL_I2C_Master_Transmit+0x1ea>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b01      	cmp	r3, #1
 8005630:	d007      	beq.n	8005642 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f042 0201 	orr.w	r2, r2, #1
 8005640:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005650:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2221      	movs	r2, #33	; 0x21
 8005656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2210      	movs	r2, #16
 800565e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	893a      	ldrh	r2, [r7, #8]
 8005672:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005678:	b29a      	uxth	r2, r3
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	4a50      	ldr	r2, [pc, #320]	; (80057c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8005682:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005684:	8979      	ldrh	r1, [r7, #10]
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	6a3a      	ldr	r2, [r7, #32]
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f000 fdfc 	bl	8006288 <I2C_MasterRequestWrite>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e08d      	b.n	80057b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800569a:	2300      	movs	r3, #0
 800569c:	613b      	str	r3, [r7, #16]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	613b      	str	r3, [r7, #16]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	613b      	str	r3, [r7, #16]
 80056ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80056b0:	e066      	b.n	8005780 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	6a39      	ldr	r1, [r7, #32]
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f001 f98a 	bl	80069d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00d      	beq.n	80056de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c6:	2b04      	cmp	r3, #4
 80056c8:	d107      	bne.n	80056da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e06b      	b.n	80057b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e2:	781a      	ldrb	r2, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ee:	1c5a      	adds	r2, r3, #1
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	3b01      	subs	r3, #1
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005706:	3b01      	subs	r3, #1
 8005708:	b29a      	uxth	r2, r3
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	f003 0304 	and.w	r3, r3, #4
 8005718:	2b04      	cmp	r3, #4
 800571a:	d11b      	bne.n	8005754 <HAL_I2C_Master_Transmit+0x188>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005720:	2b00      	cmp	r3, #0
 8005722:	d017      	beq.n	8005754 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005728:	781a      	ldrb	r2, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005734:	1c5a      	adds	r2, r3, #1
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800573e:	b29b      	uxth	r3, r3
 8005740:	3b01      	subs	r3, #1
 8005742:	b29a      	uxth	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800574c:	3b01      	subs	r3, #1
 800574e:	b29a      	uxth	r2, r3
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	6a39      	ldr	r1, [r7, #32]
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f001 f97a 	bl	8006a52 <I2C_WaitOnBTFFlagUntilTimeout>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00d      	beq.n	8005780 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005768:	2b04      	cmp	r3, #4
 800576a:	d107      	bne.n	800577c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800577a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e01a      	b.n	80057b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005784:	2b00      	cmp	r3, #0
 8005786:	d194      	bne.n	80056b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005796:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2220      	movs	r2, #32
 800579c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80057b0:	2300      	movs	r3, #0
 80057b2:	e000      	b.n	80057b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80057b4:	2302      	movs	r3, #2
  }
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3718      	adds	r7, #24
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	00100002 	.word	0x00100002
 80057c4:	ffff0000 	.word	0xffff0000

080057c8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b08c      	sub	sp, #48	; 0x30
 80057cc:	af02      	add	r7, sp, #8
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	607a      	str	r2, [r7, #4]
 80057d2:	461a      	mov	r2, r3
 80057d4:	460b      	mov	r3, r1
 80057d6:	817b      	strh	r3, [r7, #10]
 80057d8:	4613      	mov	r3, r2
 80057da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80057dc:	f7ff f800 	bl	80047e0 <HAL_GetTick>
 80057e0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b20      	cmp	r3, #32
 80057ec:	f040 820b 	bne.w	8005c06 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	9300      	str	r3, [sp, #0]
 80057f4:	2319      	movs	r3, #25
 80057f6:	2201      	movs	r2, #1
 80057f8:	497c      	ldr	r1, [pc, #496]	; (80059ec <HAL_I2C_Master_Receive+0x224>)
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f001 f812 	bl	8006824 <I2C_WaitOnFlagUntilTimeout>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005806:	2302      	movs	r3, #2
 8005808:	e1fe      	b.n	8005c08 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005810:	2b01      	cmp	r3, #1
 8005812:	d101      	bne.n	8005818 <HAL_I2C_Master_Receive+0x50>
 8005814:	2302      	movs	r3, #2
 8005816:	e1f7      	b.n	8005c08 <HAL_I2C_Master_Receive+0x440>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b01      	cmp	r3, #1
 800582c:	d007      	beq.n	800583e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f042 0201 	orr.w	r2, r2, #1
 800583c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800584c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2222      	movs	r2, #34	; 0x22
 8005852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2210      	movs	r2, #16
 800585a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	893a      	ldrh	r2, [r7, #8]
 800586e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005874:	b29a      	uxth	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	4a5c      	ldr	r2, [pc, #368]	; (80059f0 <HAL_I2C_Master_Receive+0x228>)
 800587e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005880:	8979      	ldrh	r1, [r7, #10]
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 fd80 	bl	800638c <I2C_MasterRequestRead>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d001      	beq.n	8005896 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e1b8      	b.n	8005c08 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800589a:	2b00      	cmp	r3, #0
 800589c:	d113      	bne.n	80058c6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800589e:	2300      	movs	r3, #0
 80058a0:	623b      	str	r3, [r7, #32]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	623b      	str	r3, [r7, #32]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	623b      	str	r3, [r7, #32]
 80058b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	e18c      	b.n	8005be0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d11b      	bne.n	8005906 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058de:	2300      	movs	r3, #0
 80058e0:	61fb      	str	r3, [r7, #28]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	695b      	ldr	r3, [r3, #20]
 80058e8:	61fb      	str	r3, [r7, #28]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	61fb      	str	r3, [r7, #28]
 80058f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005902:	601a      	str	r2, [r3, #0]
 8005904:	e16c      	b.n	8005be0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800590a:	2b02      	cmp	r3, #2
 800590c:	d11b      	bne.n	8005946 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800591c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800592c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800592e:	2300      	movs	r3, #0
 8005930:	61bb      	str	r3, [r7, #24]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	61bb      	str	r3, [r7, #24]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	61bb      	str	r3, [r7, #24]
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	e14c      	b.n	8005be0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005954:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005956:	2300      	movs	r3, #0
 8005958:	617b      	str	r3, [r7, #20]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	695b      	ldr	r3, [r3, #20]
 8005960:	617b      	str	r3, [r7, #20]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	617b      	str	r3, [r7, #20]
 800596a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800596c:	e138      	b.n	8005be0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005972:	2b03      	cmp	r3, #3
 8005974:	f200 80f1 	bhi.w	8005b5a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800597c:	2b01      	cmp	r3, #1
 800597e:	d123      	bne.n	80059c8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005982:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f001 f8a5 	bl	8006ad4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d001      	beq.n	8005994 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e139      	b.n	8005c08 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	691a      	ldr	r2, [r3, #16]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	b2d2      	uxtb	r2, r2
 80059a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a6:	1c5a      	adds	r2, r3, #1
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b0:	3b01      	subs	r3, #1
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059bc:	b29b      	uxth	r3, r3
 80059be:	3b01      	subs	r3, #1
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059c6:	e10b      	b.n	8005be0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d14e      	bne.n	8005a6e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80059d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d6:	2200      	movs	r2, #0
 80059d8:	4906      	ldr	r1, [pc, #24]	; (80059f4 <HAL_I2C_Master_Receive+0x22c>)
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f000 ff22 	bl	8006824 <I2C_WaitOnFlagUntilTimeout>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d008      	beq.n	80059f8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e10e      	b.n	8005c08 <HAL_I2C_Master_Receive+0x440>
 80059ea:	bf00      	nop
 80059ec:	00100002 	.word	0x00100002
 80059f0:	ffff0000 	.word	0xffff0000
 80059f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	691a      	ldr	r2, [r3, #16]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1a:	1c5a      	adds	r2, r3, #1
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a24:	3b01      	subs	r3, #1
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	3b01      	subs	r3, #1
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	691a      	ldr	r2, [r3, #16]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a44:	b2d2      	uxtb	r2, r2
 8005a46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	1c5a      	adds	r2, r3, #1
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a56:	3b01      	subs	r3, #1
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	3b01      	subs	r3, #1
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a6c:	e0b8      	b.n	8005be0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	9300      	str	r3, [sp, #0]
 8005a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a74:	2200      	movs	r2, #0
 8005a76:	4966      	ldr	r1, [pc, #408]	; (8005c10 <HAL_I2C_Master_Receive+0x448>)
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f000 fed3 	bl	8006824 <I2C_WaitOnFlagUntilTimeout>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d001      	beq.n	8005a88 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e0bf      	b.n	8005c08 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	691a      	ldr	r2, [r3, #16]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa2:	b2d2      	uxtb	r2, r2
 8005aa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aaa:	1c5a      	adds	r2, r3, #1
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	494f      	ldr	r1, [pc, #316]	; (8005c10 <HAL_I2C_Master_Receive+0x448>)
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f000 fea5 	bl	8006824 <I2C_WaitOnFlagUntilTimeout>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d001      	beq.n	8005ae4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e091      	b.n	8005c08 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005af2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	691a      	ldr	r2, [r3, #16]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afe:	b2d2      	uxtb	r2, r2
 8005b00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b06:	1c5a      	adds	r2, r3, #1
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b10:	3b01      	subs	r3, #1
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	691a      	ldr	r2, [r3, #16]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b30:	b2d2      	uxtb	r2, r2
 8005b32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b38:	1c5a      	adds	r2, r3, #1
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b42:	3b01      	subs	r3, #1
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	3b01      	subs	r3, #1
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b58:	e042      	b.n	8005be0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f000 ffb8 	bl	8006ad4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e04c      	b.n	8005c08 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	691a      	ldr	r2, [r3, #16]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b78:	b2d2      	uxtb	r2, r2
 8005b7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b80:	1c5a      	adds	r2, r3, #1
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	f003 0304 	and.w	r3, r3, #4
 8005baa:	2b04      	cmp	r3, #4
 8005bac:	d118      	bne.n	8005be0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	691a      	ldr	r2, [r3, #16]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb8:	b2d2      	uxtb	r2, r2
 8005bba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc0:	1c5a      	adds	r2, r3, #1
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f47f aec2 	bne.w	800596e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2220      	movs	r2, #32
 8005bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c02:	2300      	movs	r3, #0
 8005c04:	e000      	b.n	8005c08 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005c06:	2302      	movs	r3, #2
  }
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3728      	adds	r7, #40	; 0x28
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	00010004 	.word	0x00010004

08005c14 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b088      	sub	sp, #32
 8005c18:	af02      	add	r7, sp, #8
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	4608      	mov	r0, r1
 8005c1e:	4611      	mov	r1, r2
 8005c20:	461a      	mov	r2, r3
 8005c22:	4603      	mov	r3, r0
 8005c24:	817b      	strh	r3, [r7, #10]
 8005c26:	460b      	mov	r3, r1
 8005c28:	813b      	strh	r3, [r7, #8]
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c2e:	f7fe fdd7 	bl	80047e0 <HAL_GetTick>
 8005c32:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b20      	cmp	r3, #32
 8005c3e:	f040 80d9 	bne.w	8005df4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	2319      	movs	r3, #25
 8005c48:	2201      	movs	r2, #1
 8005c4a:	496d      	ldr	r1, [pc, #436]	; (8005e00 <HAL_I2C_Mem_Write+0x1ec>)
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 fde9 	bl	8006824 <I2C_WaitOnFlagUntilTimeout>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005c58:	2302      	movs	r3, #2
 8005c5a:	e0cc      	b.n	8005df6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d101      	bne.n	8005c6a <HAL_I2C_Mem_Write+0x56>
 8005c66:	2302      	movs	r3, #2
 8005c68:	e0c5      	b.n	8005df6 <HAL_I2C_Mem_Write+0x1e2>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d007      	beq.n	8005c90 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0201 	orr.w	r2, r2, #1
 8005c8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2221      	movs	r2, #33	; 0x21
 8005ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2240      	movs	r2, #64	; 0x40
 8005cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6a3a      	ldr	r2, [r7, #32]
 8005cba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005cc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	4a4d      	ldr	r2, [pc, #308]	; (8005e04 <HAL_I2C_Mem_Write+0x1f0>)
 8005cd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005cd2:	88f8      	ldrh	r0, [r7, #6]
 8005cd4:	893a      	ldrh	r2, [r7, #8]
 8005cd6:	8979      	ldrh	r1, [r7, #10]
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	9301      	str	r3, [sp, #4]
 8005cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cde:	9300      	str	r3, [sp, #0]
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f000 fc20 	bl	8006528 <I2C_RequestMemoryWrite>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d052      	beq.n	8005d94 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e081      	b.n	8005df6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f000 fe6a 	bl	80069d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00d      	beq.n	8005d1e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	d107      	bne.n	8005d1a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e06b      	b.n	8005df6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d22:	781a      	ldrb	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	3b01      	subs	r3, #1
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	695b      	ldr	r3, [r3, #20]
 8005d54:	f003 0304 	and.w	r3, r3, #4
 8005d58:	2b04      	cmp	r3, #4
 8005d5a:	d11b      	bne.n	8005d94 <HAL_I2C_Mem_Write+0x180>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d017      	beq.n	8005d94 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d68:	781a      	ldrb	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d74:	1c5a      	adds	r2, r3, #1
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	b29a      	uxth	r2, r3
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1aa      	bne.n	8005cf2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f000 fe56 	bl	8006a52 <I2C_WaitOnBTFFlagUntilTimeout>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00d      	beq.n	8005dc8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db0:	2b04      	cmp	r3, #4
 8005db2:	d107      	bne.n	8005dc4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dc2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e016      	b.n	8005df6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005df0:	2300      	movs	r3, #0
 8005df2:	e000      	b.n	8005df6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005df4:	2302      	movs	r3, #2
  }
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3718      	adds	r7, #24
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	00100002 	.word	0x00100002
 8005e04:	ffff0000 	.word	0xffff0000

08005e08 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08c      	sub	sp, #48	; 0x30
 8005e0c:	af02      	add	r7, sp, #8
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	4608      	mov	r0, r1
 8005e12:	4611      	mov	r1, r2
 8005e14:	461a      	mov	r2, r3
 8005e16:	4603      	mov	r3, r0
 8005e18:	817b      	strh	r3, [r7, #10]
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	813b      	strh	r3, [r7, #8]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e22:	f7fe fcdd 	bl	80047e0 <HAL_GetTick>
 8005e26:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b20      	cmp	r3, #32
 8005e32:	f040 8208 	bne.w	8006246 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	2319      	movs	r3, #25
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	497b      	ldr	r1, [pc, #492]	; (800602c <HAL_I2C_Mem_Read+0x224>)
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f000 fcef 	bl	8006824 <I2C_WaitOnFlagUntilTimeout>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d001      	beq.n	8005e50 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	e1fb      	b.n	8006248 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d101      	bne.n	8005e5e <HAL_I2C_Mem_Read+0x56>
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	e1f4      	b.n	8006248 <HAL_I2C_Mem_Read+0x440>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d007      	beq.n	8005e84 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f042 0201 	orr.w	r2, r2, #1
 8005e82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2222      	movs	r2, #34	; 0x22
 8005e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2240      	movs	r2, #64	; 0x40
 8005ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005eb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4a5b      	ldr	r2, [pc, #364]	; (8006030 <HAL_I2C_Mem_Read+0x228>)
 8005ec4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ec6:	88f8      	ldrh	r0, [r7, #6]
 8005ec8:	893a      	ldrh	r2, [r7, #8]
 8005eca:	8979      	ldrh	r1, [r7, #10]
 8005ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ece:	9301      	str	r3, [sp, #4]
 8005ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f000 fbbc 	bl	8006654 <I2C_RequestMemoryRead>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d001      	beq.n	8005ee6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e1b0      	b.n	8006248 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d113      	bne.n	8005f16 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eee:	2300      	movs	r3, #0
 8005ef0:	623b      	str	r3, [r7, #32]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	623b      	str	r3, [r7, #32]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	623b      	str	r3, [r7, #32]
 8005f02:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	e184      	b.n	8006220 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d11b      	bne.n	8005f56 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f2e:	2300      	movs	r3, #0
 8005f30:	61fb      	str	r3, [r7, #28]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	695b      	ldr	r3, [r3, #20]
 8005f38:	61fb      	str	r3, [r7, #28]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	699b      	ldr	r3, [r3, #24]
 8005f40:	61fb      	str	r3, [r7, #28]
 8005f42:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f52:	601a      	str	r2, [r3, #0]
 8005f54:	e164      	b.n	8006220 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d11b      	bne.n	8005f96 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f6c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f7e:	2300      	movs	r3, #0
 8005f80:	61bb      	str	r3, [r7, #24]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	695b      	ldr	r3, [r3, #20]
 8005f88:	61bb      	str	r3, [r7, #24]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	61bb      	str	r3, [r7, #24]
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	e144      	b.n	8006220 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f96:	2300      	movs	r3, #0
 8005f98:	617b      	str	r3, [r7, #20]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	617b      	str	r3, [r7, #20]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	617b      	str	r3, [r7, #20]
 8005faa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005fac:	e138      	b.n	8006220 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fb2:	2b03      	cmp	r3, #3
 8005fb4:	f200 80f1 	bhi.w	800619a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d123      	bne.n	8006008 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f000 fd85 	bl	8006ad4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d001      	beq.n	8005fd4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e139      	b.n	8006248 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	691a      	ldr	r2, [r3, #16]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fde:	b2d2      	uxtb	r2, r2
 8005fe0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe6:	1c5a      	adds	r2, r3, #1
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	3b01      	subs	r3, #1
 8006000:	b29a      	uxth	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006006:	e10b      	b.n	8006220 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800600c:	2b02      	cmp	r3, #2
 800600e:	d14e      	bne.n	80060ae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006016:	2200      	movs	r2, #0
 8006018:	4906      	ldr	r1, [pc, #24]	; (8006034 <HAL_I2C_Mem_Read+0x22c>)
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f000 fc02 	bl	8006824 <I2C_WaitOnFlagUntilTimeout>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d008      	beq.n	8006038 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e10e      	b.n	8006248 <HAL_I2C_Mem_Read+0x440>
 800602a:	bf00      	nop
 800602c:	00100002 	.word	0x00100002
 8006030:	ffff0000 	.word	0xffff0000
 8006034:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006046:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	691a      	ldr	r2, [r3, #16]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006052:	b2d2      	uxtb	r2, r2
 8006054:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605a:	1c5a      	adds	r2, r3, #1
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006064:	3b01      	subs	r3, #1
 8006066:	b29a      	uxth	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006070:	b29b      	uxth	r3, r3
 8006072:	3b01      	subs	r3, #1
 8006074:	b29a      	uxth	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	691a      	ldr	r2, [r3, #16]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006084:	b2d2      	uxtb	r2, r2
 8006086:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608c:	1c5a      	adds	r2, r3, #1
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006096:	3b01      	subs	r3, #1
 8006098:	b29a      	uxth	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	3b01      	subs	r3, #1
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060ac:	e0b8      	b.n	8006220 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80060ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b0:	9300      	str	r3, [sp, #0]
 80060b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b4:	2200      	movs	r2, #0
 80060b6:	4966      	ldr	r1, [pc, #408]	; (8006250 <HAL_I2C_Mem_Read+0x448>)
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f000 fbb3 	bl	8006824 <I2C_WaitOnFlagUntilTimeout>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d001      	beq.n	80060c8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e0bf      	b.n	8006248 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	691a      	ldr	r2, [r3, #16]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e2:	b2d2      	uxtb	r2, r2
 80060e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ea:	1c5a      	adds	r2, r3, #1
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f4:	3b01      	subs	r3, #1
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006100:	b29b      	uxth	r3, r3
 8006102:	3b01      	subs	r3, #1
 8006104:	b29a      	uxth	r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800610a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006110:	2200      	movs	r2, #0
 8006112:	494f      	ldr	r1, [pc, #316]	; (8006250 <HAL_I2C_Mem_Read+0x448>)
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f000 fb85 	bl	8006824 <I2C_WaitOnFlagUntilTimeout>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e091      	b.n	8006248 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006132:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	691a      	ldr	r2, [r3, #16]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613e:	b2d2      	uxtb	r2, r2
 8006140:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006146:	1c5a      	adds	r2, r3, #1
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006150:	3b01      	subs	r3, #1
 8006152:	b29a      	uxth	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800615c:	b29b      	uxth	r3, r3
 800615e:	3b01      	subs	r3, #1
 8006160:	b29a      	uxth	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	691a      	ldr	r2, [r3, #16]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006170:	b2d2      	uxtb	r2, r2
 8006172:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006178:	1c5a      	adds	r2, r3, #1
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006182:	3b01      	subs	r3, #1
 8006184:	b29a      	uxth	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800618e:	b29b      	uxth	r3, r3
 8006190:	3b01      	subs	r3, #1
 8006192:	b29a      	uxth	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006198:	e042      	b.n	8006220 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800619a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800619c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f000 fc98 	bl	8006ad4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d001      	beq.n	80061ae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e04c      	b.n	8006248 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	691a      	ldr	r2, [r3, #16]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b8:	b2d2      	uxtb	r2, r2
 80061ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c0:	1c5a      	adds	r2, r3, #1
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ca:	3b01      	subs	r3, #1
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	3b01      	subs	r3, #1
 80061da:	b29a      	uxth	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	f003 0304 	and.w	r3, r3, #4
 80061ea:	2b04      	cmp	r3, #4
 80061ec:	d118      	bne.n	8006220 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	691a      	ldr	r2, [r3, #16]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f8:	b2d2      	uxtb	r2, r2
 80061fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006200:	1c5a      	adds	r2, r3, #1
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800620a:	3b01      	subs	r3, #1
 800620c:	b29a      	uxth	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006216:	b29b      	uxth	r3, r3
 8006218:	3b01      	subs	r3, #1
 800621a:	b29a      	uxth	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006224:	2b00      	cmp	r3, #0
 8006226:	f47f aec2 	bne.w	8005fae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2220      	movs	r2, #32
 800622e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006242:	2300      	movs	r3, #0
 8006244:	e000      	b.n	8006248 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006246:	2302      	movs	r3, #2
  }
}
 8006248:	4618      	mov	r0, r3
 800624a:	3728      	adds	r7, #40	; 0x28
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	00010004 	.word	0x00010004

08006254 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006262:	b2db      	uxtb	r3, r3
}
 8006264:	4618      	mov	r0, r3
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800627c:	4618      	mov	r0, r3
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b088      	sub	sp, #32
 800628c:	af02      	add	r7, sp, #8
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	607a      	str	r2, [r7, #4]
 8006292:	603b      	str	r3, [r7, #0]
 8006294:	460b      	mov	r3, r1
 8006296:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	2b08      	cmp	r3, #8
 80062a2:	d006      	beq.n	80062b2 <I2C_MasterRequestWrite+0x2a>
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d003      	beq.n	80062b2 <I2C_MasterRequestWrite+0x2a>
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80062b0:	d108      	bne.n	80062c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062c0:	601a      	str	r2, [r3, #0]
 80062c2:	e00b      	b.n	80062dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c8:	2b12      	cmp	r3, #18
 80062ca:	d107      	bne.n	80062dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f000 fa9b 	bl	8006824 <I2C_WaitOnFlagUntilTimeout>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00d      	beq.n	8006310 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006302:	d103      	bne.n	800630c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f44f 7200 	mov.w	r2, #512	; 0x200
 800630a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	e035      	b.n	800637c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006318:	d108      	bne.n	800632c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800631a:	897b      	ldrh	r3, [r7, #10]
 800631c:	b2db      	uxtb	r3, r3
 800631e:	461a      	mov	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006328:	611a      	str	r2, [r3, #16]
 800632a:	e01b      	b.n	8006364 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800632c:	897b      	ldrh	r3, [r7, #10]
 800632e:	11db      	asrs	r3, r3, #7
 8006330:	b2db      	uxtb	r3, r3
 8006332:	f003 0306 	and.w	r3, r3, #6
 8006336:	b2db      	uxtb	r3, r3
 8006338:	f063 030f 	orn	r3, r3, #15
 800633c:	b2da      	uxtb	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	490e      	ldr	r1, [pc, #56]	; (8006384 <I2C_MasterRequestWrite+0xfc>)
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f000 fac1 	bl	80068d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d001      	beq.n	800635a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e010      	b.n	800637c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800635a:	897b      	ldrh	r3, [r7, #10]
 800635c:	b2da      	uxtb	r2, r3
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	4907      	ldr	r1, [pc, #28]	; (8006388 <I2C_MasterRequestWrite+0x100>)
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f000 fab1 	bl	80068d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d001      	beq.n	800637a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e000      	b.n	800637c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3718      	adds	r7, #24
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	00010008 	.word	0x00010008
 8006388:	00010002 	.word	0x00010002

0800638c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b088      	sub	sp, #32
 8006390:	af02      	add	r7, sp, #8
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	607a      	str	r2, [r7, #4]
 8006396:	603b      	str	r3, [r7, #0]
 8006398:	460b      	mov	r3, r1
 800639a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063b0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2b08      	cmp	r3, #8
 80063b6:	d006      	beq.n	80063c6 <I2C_MasterRequestRead+0x3a>
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d003      	beq.n	80063c6 <I2C_MasterRequestRead+0x3a>
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80063c4:	d108      	bne.n	80063d8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063d4:	601a      	str	r2, [r3, #0]
 80063d6:	e00b      	b.n	80063f0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063dc:	2b11      	cmp	r3, #17
 80063de:	d107      	bne.n	80063f0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	9300      	str	r3, [sp, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 fa11 	bl	8006824 <I2C_WaitOnFlagUntilTimeout>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00d      	beq.n	8006424 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006416:	d103      	bne.n	8006420 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800641e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e079      	b.n	8006518 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800642c:	d108      	bne.n	8006440 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800642e:	897b      	ldrh	r3, [r7, #10]
 8006430:	b2db      	uxtb	r3, r3
 8006432:	f043 0301 	orr.w	r3, r3, #1
 8006436:	b2da      	uxtb	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	611a      	str	r2, [r3, #16]
 800643e:	e05f      	b.n	8006500 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006440:	897b      	ldrh	r3, [r7, #10]
 8006442:	11db      	asrs	r3, r3, #7
 8006444:	b2db      	uxtb	r3, r3
 8006446:	f003 0306 	and.w	r3, r3, #6
 800644a:	b2db      	uxtb	r3, r3
 800644c:	f063 030f 	orn	r3, r3, #15
 8006450:	b2da      	uxtb	r2, r3
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	4930      	ldr	r1, [pc, #192]	; (8006520 <I2C_MasterRequestRead+0x194>)
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f000 fa37 	bl	80068d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d001      	beq.n	800646e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e054      	b.n	8006518 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800646e:	897b      	ldrh	r3, [r7, #10]
 8006470:	b2da      	uxtb	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	4929      	ldr	r1, [pc, #164]	; (8006524 <I2C_MasterRequestRead+0x198>)
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f000 fa27 	bl	80068d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e044      	b.n	8006518 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800648e:	2300      	movs	r3, #0
 8006490:	613b      	str	r3, [r7, #16]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	695b      	ldr	r3, [r3, #20]
 8006498:	613b      	str	r3, [r7, #16]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	613b      	str	r3, [r7, #16]
 80064a2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064b2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f000 f9af 	bl	8006824 <I2C_WaitOnFlagUntilTimeout>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00d      	beq.n	80064e8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064da:	d103      	bne.n	80064e4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064e2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e017      	b.n	8006518 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80064e8:	897b      	ldrh	r3, [r7, #10]
 80064ea:	11db      	asrs	r3, r3, #7
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	f003 0306 	and.w	r3, r3, #6
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	f063 030e 	orn	r3, r3, #14
 80064f8:	b2da      	uxtb	r2, r3
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	4907      	ldr	r1, [pc, #28]	; (8006524 <I2C_MasterRequestRead+0x198>)
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f000 f9e3 	bl	80068d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e000      	b.n	8006518 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3718      	adds	r7, #24
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	00010008 	.word	0x00010008
 8006524:	00010002 	.word	0x00010002

08006528 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b088      	sub	sp, #32
 800652c:	af02      	add	r7, sp, #8
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	4608      	mov	r0, r1
 8006532:	4611      	mov	r1, r2
 8006534:	461a      	mov	r2, r3
 8006536:	4603      	mov	r3, r0
 8006538:	817b      	strh	r3, [r7, #10]
 800653a:	460b      	mov	r3, r1
 800653c:	813b      	strh	r3, [r7, #8]
 800653e:	4613      	mov	r3, r2
 8006540:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006550:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	6a3b      	ldr	r3, [r7, #32]
 8006558:	2200      	movs	r2, #0
 800655a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f000 f960 	bl	8006824 <I2C_WaitOnFlagUntilTimeout>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00d      	beq.n	8006586 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006578:	d103      	bne.n	8006582 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006580:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e05f      	b.n	8006646 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006586:	897b      	ldrh	r3, [r7, #10]
 8006588:	b2db      	uxtb	r3, r3
 800658a:	461a      	mov	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006594:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006598:	6a3a      	ldr	r2, [r7, #32]
 800659a:	492d      	ldr	r1, [pc, #180]	; (8006650 <I2C_RequestMemoryWrite+0x128>)
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f000 f998 	bl	80068d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d001      	beq.n	80065ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e04c      	b.n	8006646 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065ac:	2300      	movs	r3, #0
 80065ae:	617b      	str	r3, [r7, #20]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	617b      	str	r3, [r7, #20]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	617b      	str	r3, [r7, #20]
 80065c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065c4:	6a39      	ldr	r1, [r7, #32]
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f000 fa02 	bl	80069d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00d      	beq.n	80065ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d6:	2b04      	cmp	r3, #4
 80065d8:	d107      	bne.n	80065ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e02b      	b.n	8006646 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80065ee:	88fb      	ldrh	r3, [r7, #6]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d105      	bne.n	8006600 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80065f4:	893b      	ldrh	r3, [r7, #8]
 80065f6:	b2da      	uxtb	r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	611a      	str	r2, [r3, #16]
 80065fe:	e021      	b.n	8006644 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006600:	893b      	ldrh	r3, [r7, #8]
 8006602:	0a1b      	lsrs	r3, r3, #8
 8006604:	b29b      	uxth	r3, r3
 8006606:	b2da      	uxtb	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800660e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006610:	6a39      	ldr	r1, [r7, #32]
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f000 f9dc 	bl	80069d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00d      	beq.n	800663a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006622:	2b04      	cmp	r3, #4
 8006624:	d107      	bne.n	8006636 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006634:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e005      	b.n	8006646 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800663a:	893b      	ldrh	r3, [r7, #8]
 800663c:	b2da      	uxtb	r2, r3
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3718      	adds	r7, #24
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	00010002 	.word	0x00010002

08006654 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b088      	sub	sp, #32
 8006658:	af02      	add	r7, sp, #8
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	4608      	mov	r0, r1
 800665e:	4611      	mov	r1, r2
 8006660:	461a      	mov	r2, r3
 8006662:	4603      	mov	r3, r0
 8006664:	817b      	strh	r3, [r7, #10]
 8006666:	460b      	mov	r3, r1
 8006668:	813b      	strh	r3, [r7, #8]
 800666a:	4613      	mov	r3, r2
 800666c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800667c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800668c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800668e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006690:	9300      	str	r3, [sp, #0]
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	2200      	movs	r2, #0
 8006696:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f000 f8c2 	bl	8006824 <I2C_WaitOnFlagUntilTimeout>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00d      	beq.n	80066c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066b4:	d103      	bne.n	80066be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e0aa      	b.n	8006818 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80066c2:	897b      	ldrh	r3, [r7, #10]
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	461a      	mov	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80066d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d4:	6a3a      	ldr	r2, [r7, #32]
 80066d6:	4952      	ldr	r1, [pc, #328]	; (8006820 <I2C_RequestMemoryRead+0x1cc>)
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f000 f8fa 	bl	80068d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d001      	beq.n	80066e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e097      	b.n	8006818 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066e8:	2300      	movs	r3, #0
 80066ea:	617b      	str	r3, [r7, #20]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	617b      	str	r3, [r7, #20]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	617b      	str	r3, [r7, #20]
 80066fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006700:	6a39      	ldr	r1, [r7, #32]
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f000 f964 	bl	80069d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00d      	beq.n	800672a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006712:	2b04      	cmp	r3, #4
 8006714:	d107      	bne.n	8006726 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006724:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e076      	b.n	8006818 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800672a:	88fb      	ldrh	r3, [r7, #6]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d105      	bne.n	800673c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006730:	893b      	ldrh	r3, [r7, #8]
 8006732:	b2da      	uxtb	r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	611a      	str	r2, [r3, #16]
 800673a:	e021      	b.n	8006780 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800673c:	893b      	ldrh	r3, [r7, #8]
 800673e:	0a1b      	lsrs	r3, r3, #8
 8006740:	b29b      	uxth	r3, r3
 8006742:	b2da      	uxtb	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800674a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800674c:	6a39      	ldr	r1, [r7, #32]
 800674e:	68f8      	ldr	r0, [r7, #12]
 8006750:	f000 f93e 	bl	80069d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006754:	4603      	mov	r3, r0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d00d      	beq.n	8006776 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675e:	2b04      	cmp	r3, #4
 8006760:	d107      	bne.n	8006772 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006770:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006772:	2301      	movs	r3, #1
 8006774:	e050      	b.n	8006818 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006776:	893b      	ldrh	r3, [r7, #8]
 8006778:	b2da      	uxtb	r2, r3
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006782:	6a39      	ldr	r1, [r7, #32]
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f000 f923 	bl	80069d0 <I2C_WaitOnTXEFlagUntilTimeout>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00d      	beq.n	80067ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006794:	2b04      	cmp	r3, #4
 8006796:	d107      	bne.n	80067a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e035      	b.n	8006818 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	6a3b      	ldr	r3, [r7, #32]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f000 f82b 	bl	8006824 <I2C_WaitOnFlagUntilTimeout>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00d      	beq.n	80067f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067e2:	d103      	bne.n	80067ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e013      	b.n	8006818 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80067f0:	897b      	ldrh	r3, [r7, #10]
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	f043 0301 	orr.w	r3, r3, #1
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006802:	6a3a      	ldr	r2, [r7, #32]
 8006804:	4906      	ldr	r1, [pc, #24]	; (8006820 <I2C_RequestMemoryRead+0x1cc>)
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f000 f863 	bl	80068d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e000      	b.n	8006818 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3718      	adds	r7, #24
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	00010002 	.word	0x00010002

08006824 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	603b      	str	r3, [r7, #0]
 8006830:	4613      	mov	r3, r2
 8006832:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006834:	e025      	b.n	8006882 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800683c:	d021      	beq.n	8006882 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800683e:	f7fd ffcf 	bl	80047e0 <HAL_GetTick>
 8006842:	4602      	mov	r2, r0
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	683a      	ldr	r2, [r7, #0]
 800684a:	429a      	cmp	r2, r3
 800684c:	d302      	bcc.n	8006854 <I2C_WaitOnFlagUntilTimeout+0x30>
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d116      	bne.n	8006882 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2220      	movs	r2, #32
 800685e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686e:	f043 0220 	orr.w	r2, r3, #32
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e023      	b.n	80068ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	0c1b      	lsrs	r3, r3, #16
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b01      	cmp	r3, #1
 800688a:	d10d      	bne.n	80068a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	695b      	ldr	r3, [r3, #20]
 8006892:	43da      	mvns	r2, r3
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	4013      	ands	r3, r2
 8006898:	b29b      	uxth	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	bf0c      	ite	eq
 800689e:	2301      	moveq	r3, #1
 80068a0:	2300      	movne	r3, #0
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	461a      	mov	r2, r3
 80068a6:	e00c      	b.n	80068c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	43da      	mvns	r2, r3
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	4013      	ands	r3, r2
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	bf0c      	ite	eq
 80068ba:	2301      	moveq	r3, #1
 80068bc:	2300      	movne	r3, #0
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	461a      	mov	r2, r3
 80068c2:	79fb      	ldrb	r3, [r7, #7]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d0b6      	beq.n	8006836 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b084      	sub	sp, #16
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	60f8      	str	r0, [r7, #12]
 80068da:	60b9      	str	r1, [r7, #8]
 80068dc:	607a      	str	r2, [r7, #4]
 80068de:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068e0:	e051      	b.n	8006986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068f0:	d123      	bne.n	800693a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006900:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800690a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2220      	movs	r2, #32
 8006916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006926:	f043 0204 	orr.w	r2, r3, #4
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e046      	b.n	80069c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006940:	d021      	beq.n	8006986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006942:	f7fd ff4d 	bl	80047e0 <HAL_GetTick>
 8006946:	4602      	mov	r2, r0
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	429a      	cmp	r2, r3
 8006950:	d302      	bcc.n	8006958 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d116      	bne.n	8006986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2220      	movs	r2, #32
 8006962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006972:	f043 0220 	orr.w	r2, r3, #32
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e020      	b.n	80069c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	0c1b      	lsrs	r3, r3, #16
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2b01      	cmp	r3, #1
 800698e:	d10c      	bne.n	80069aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	43da      	mvns	r2, r3
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	4013      	ands	r3, r2
 800699c:	b29b      	uxth	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	bf14      	ite	ne
 80069a2:	2301      	movne	r3, #1
 80069a4:	2300      	moveq	r3, #0
 80069a6:	b2db      	uxtb	r3, r3
 80069a8:	e00b      	b.n	80069c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	43da      	mvns	r2, r3
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	4013      	ands	r3, r2
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	bf14      	ite	ne
 80069bc:	2301      	movne	r3, #1
 80069be:	2300      	moveq	r3, #0
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d18d      	bne.n	80068e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3710      	adds	r7, #16
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069dc:	e02d      	b.n	8006a3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f000 f8ce 	bl	8006b80 <I2C_IsAcknowledgeFailed>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d001      	beq.n	80069ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e02d      	b.n	8006a4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f4:	d021      	beq.n	8006a3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069f6:	f7fd fef3 	bl	80047e0 <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d302      	bcc.n	8006a0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d116      	bne.n	8006a3a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2220      	movs	r2, #32
 8006a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a26:	f043 0220 	orr.w	r2, r3, #32
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e007      	b.n	8006a4a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a44:	2b80      	cmp	r3, #128	; 0x80
 8006a46:	d1ca      	bne.n	80069de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b084      	sub	sp, #16
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	60f8      	str	r0, [r7, #12]
 8006a5a:	60b9      	str	r1, [r7, #8]
 8006a5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a5e:	e02d      	b.n	8006abc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f000 f88d 	bl	8006b80 <I2C_IsAcknowledgeFailed>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d001      	beq.n	8006a70 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e02d      	b.n	8006acc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a76:	d021      	beq.n	8006abc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a78:	f7fd feb2 	bl	80047e0 <HAL_GetTick>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d302      	bcc.n	8006a8e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d116      	bne.n	8006abc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2220      	movs	r2, #32
 8006a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa8:	f043 0220 	orr.w	r2, r3, #32
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e007      	b.n	8006acc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	695b      	ldr	r3, [r3, #20]
 8006ac2:	f003 0304 	and.w	r3, r3, #4
 8006ac6:	2b04      	cmp	r3, #4
 8006ac8:	d1ca      	bne.n	8006a60 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3710      	adds	r7, #16
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ae0:	e042      	b.n	8006b68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	695b      	ldr	r3, [r3, #20]
 8006ae8:	f003 0310 	and.w	r3, r3, #16
 8006aec:	2b10      	cmp	r3, #16
 8006aee:	d119      	bne.n	8006b24 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f06f 0210 	mvn.w	r2, #16
 8006af8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2220      	movs	r2, #32
 8006b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e029      	b.n	8006b78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b24:	f7fd fe5c 	bl	80047e0 <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d302      	bcc.n	8006b3a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d116      	bne.n	8006b68 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2220      	movs	r2, #32
 8006b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b54:	f043 0220 	orr.w	r2, r3, #32
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e007      	b.n	8006b78 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b72:	2b40      	cmp	r3, #64	; 0x40
 8006b74:	d1b5      	bne.n	8006ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	695b      	ldr	r3, [r3, #20]
 8006b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b96:	d11b      	bne.n	8006bd0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ba0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2220      	movs	r2, #32
 8006bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bbc:	f043 0204 	orr.w	r2, r3, #4
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e000      	b.n	8006bd2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	370c      	adds	r7, #12
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
	...

08006be0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d101      	bne.n	8006bf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e267      	b.n	80070c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0301 	and.w	r3, r3, #1
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d075      	beq.n	8006cea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006bfe:	4b88      	ldr	r3, [pc, #544]	; (8006e20 <HAL_RCC_OscConfig+0x240>)
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f003 030c 	and.w	r3, r3, #12
 8006c06:	2b04      	cmp	r3, #4
 8006c08:	d00c      	beq.n	8006c24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c0a:	4b85      	ldr	r3, [pc, #532]	; (8006e20 <HAL_RCC_OscConfig+0x240>)
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c12:	2b08      	cmp	r3, #8
 8006c14:	d112      	bne.n	8006c3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c16:	4b82      	ldr	r3, [pc, #520]	; (8006e20 <HAL_RCC_OscConfig+0x240>)
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c22:	d10b      	bne.n	8006c3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c24:	4b7e      	ldr	r3, [pc, #504]	; (8006e20 <HAL_RCC_OscConfig+0x240>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d05b      	beq.n	8006ce8 <HAL_RCC_OscConfig+0x108>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d157      	bne.n	8006ce8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e242      	b.n	80070c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c44:	d106      	bne.n	8006c54 <HAL_RCC_OscConfig+0x74>
 8006c46:	4b76      	ldr	r3, [pc, #472]	; (8006e20 <HAL_RCC_OscConfig+0x240>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a75      	ldr	r2, [pc, #468]	; (8006e20 <HAL_RCC_OscConfig+0x240>)
 8006c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c50:	6013      	str	r3, [r2, #0]
 8006c52:	e01d      	b.n	8006c90 <HAL_RCC_OscConfig+0xb0>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c5c:	d10c      	bne.n	8006c78 <HAL_RCC_OscConfig+0x98>
 8006c5e:	4b70      	ldr	r3, [pc, #448]	; (8006e20 <HAL_RCC_OscConfig+0x240>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a6f      	ldr	r2, [pc, #444]	; (8006e20 <HAL_RCC_OscConfig+0x240>)
 8006c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c68:	6013      	str	r3, [r2, #0]
 8006c6a:	4b6d      	ldr	r3, [pc, #436]	; (8006e20 <HAL_RCC_OscConfig+0x240>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a6c      	ldr	r2, [pc, #432]	; (8006e20 <HAL_RCC_OscConfig+0x240>)
 8006c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c74:	6013      	str	r3, [r2, #0]
 8006c76:	e00b      	b.n	8006c90 <HAL_RCC_OscConfig+0xb0>
 8006c78:	4b69      	ldr	r3, [pc, #420]	; (8006e20 <HAL_RCC_OscConfig+0x240>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a68      	ldr	r2, [pc, #416]	; (8006e20 <HAL_RCC_OscConfig+0x240>)
 8006c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c82:	6013      	str	r3, [r2, #0]
 8006c84:	4b66      	ldr	r3, [pc, #408]	; (8006e20 <HAL_RCC_OscConfig+0x240>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a65      	ldr	r2, [pc, #404]	; (8006e20 <HAL_RCC_OscConfig+0x240>)
 8006c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d013      	beq.n	8006cc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c98:	f7fd fda2 	bl	80047e0 <HAL_GetTick>
 8006c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c9e:	e008      	b.n	8006cb2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ca0:	f7fd fd9e 	bl	80047e0 <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	2b64      	cmp	r3, #100	; 0x64
 8006cac:	d901      	bls.n	8006cb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	e207      	b.n	80070c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cb2:	4b5b      	ldr	r3, [pc, #364]	; (8006e20 <HAL_RCC_OscConfig+0x240>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d0f0      	beq.n	8006ca0 <HAL_RCC_OscConfig+0xc0>
 8006cbe:	e014      	b.n	8006cea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cc0:	f7fd fd8e 	bl	80047e0 <HAL_GetTick>
 8006cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cc6:	e008      	b.n	8006cda <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006cc8:	f7fd fd8a 	bl	80047e0 <HAL_GetTick>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	2b64      	cmp	r3, #100	; 0x64
 8006cd4:	d901      	bls.n	8006cda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e1f3      	b.n	80070c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cda:	4b51      	ldr	r3, [pc, #324]	; (8006e20 <HAL_RCC_OscConfig+0x240>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1f0      	bne.n	8006cc8 <HAL_RCC_OscConfig+0xe8>
 8006ce6:	e000      	b.n	8006cea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0302 	and.w	r3, r3, #2
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d063      	beq.n	8006dbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006cf6:	4b4a      	ldr	r3, [pc, #296]	; (8006e20 <HAL_RCC_OscConfig+0x240>)
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	f003 030c 	and.w	r3, r3, #12
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00b      	beq.n	8006d1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d02:	4b47      	ldr	r3, [pc, #284]	; (8006e20 <HAL_RCC_OscConfig+0x240>)
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006d0a:	2b08      	cmp	r3, #8
 8006d0c:	d11c      	bne.n	8006d48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d0e:	4b44      	ldr	r3, [pc, #272]	; (8006e20 <HAL_RCC_OscConfig+0x240>)
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d116      	bne.n	8006d48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d1a:	4b41      	ldr	r3, [pc, #260]	; (8006e20 <HAL_RCC_OscConfig+0x240>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0302 	and.w	r3, r3, #2
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d005      	beq.n	8006d32 <HAL_RCC_OscConfig+0x152>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d001      	beq.n	8006d32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e1c7      	b.n	80070c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d32:	4b3b      	ldr	r3, [pc, #236]	; (8006e20 <HAL_RCC_OscConfig+0x240>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	00db      	lsls	r3, r3, #3
 8006d40:	4937      	ldr	r1, [pc, #220]	; (8006e20 <HAL_RCC_OscConfig+0x240>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d46:	e03a      	b.n	8006dbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d020      	beq.n	8006d92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d50:	4b34      	ldr	r3, [pc, #208]	; (8006e24 <HAL_RCC_OscConfig+0x244>)
 8006d52:	2201      	movs	r2, #1
 8006d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d56:	f7fd fd43 	bl	80047e0 <HAL_GetTick>
 8006d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d5c:	e008      	b.n	8006d70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d5e:	f7fd fd3f 	bl	80047e0 <HAL_GetTick>
 8006d62:	4602      	mov	r2, r0
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d901      	bls.n	8006d70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e1a8      	b.n	80070c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d70:	4b2b      	ldr	r3, [pc, #172]	; (8006e20 <HAL_RCC_OscConfig+0x240>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0302 	and.w	r3, r3, #2
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d0f0      	beq.n	8006d5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d7c:	4b28      	ldr	r3, [pc, #160]	; (8006e20 <HAL_RCC_OscConfig+0x240>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	691b      	ldr	r3, [r3, #16]
 8006d88:	00db      	lsls	r3, r3, #3
 8006d8a:	4925      	ldr	r1, [pc, #148]	; (8006e20 <HAL_RCC_OscConfig+0x240>)
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	600b      	str	r3, [r1, #0]
 8006d90:	e015      	b.n	8006dbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d92:	4b24      	ldr	r3, [pc, #144]	; (8006e24 <HAL_RCC_OscConfig+0x244>)
 8006d94:	2200      	movs	r2, #0
 8006d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d98:	f7fd fd22 	bl	80047e0 <HAL_GetTick>
 8006d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d9e:	e008      	b.n	8006db2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006da0:	f7fd fd1e 	bl	80047e0 <HAL_GetTick>
 8006da4:	4602      	mov	r2, r0
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d901      	bls.n	8006db2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e187      	b.n	80070c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006db2:	4b1b      	ldr	r3, [pc, #108]	; (8006e20 <HAL_RCC_OscConfig+0x240>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0302 	and.w	r3, r3, #2
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1f0      	bne.n	8006da0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0308 	and.w	r3, r3, #8
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d036      	beq.n	8006e38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d016      	beq.n	8006e00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006dd2:	4b15      	ldr	r3, [pc, #84]	; (8006e28 <HAL_RCC_OscConfig+0x248>)
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dd8:	f7fd fd02 	bl	80047e0 <HAL_GetTick>
 8006ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006dde:	e008      	b.n	8006df2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006de0:	f7fd fcfe 	bl	80047e0 <HAL_GetTick>
 8006de4:	4602      	mov	r2, r0
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d901      	bls.n	8006df2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e167      	b.n	80070c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006df2:	4b0b      	ldr	r3, [pc, #44]	; (8006e20 <HAL_RCC_OscConfig+0x240>)
 8006df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006df6:	f003 0302 	and.w	r3, r3, #2
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d0f0      	beq.n	8006de0 <HAL_RCC_OscConfig+0x200>
 8006dfe:	e01b      	b.n	8006e38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e00:	4b09      	ldr	r3, [pc, #36]	; (8006e28 <HAL_RCC_OscConfig+0x248>)
 8006e02:	2200      	movs	r2, #0
 8006e04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e06:	f7fd fceb 	bl	80047e0 <HAL_GetTick>
 8006e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e0c:	e00e      	b.n	8006e2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e0e:	f7fd fce7 	bl	80047e0 <HAL_GetTick>
 8006e12:	4602      	mov	r2, r0
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d907      	bls.n	8006e2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e150      	b.n	80070c2 <HAL_RCC_OscConfig+0x4e2>
 8006e20:	40023800 	.word	0x40023800
 8006e24:	42470000 	.word	0x42470000
 8006e28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e2c:	4b88      	ldr	r3, [pc, #544]	; (8007050 <HAL_RCC_OscConfig+0x470>)
 8006e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e30:	f003 0302 	and.w	r3, r3, #2
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1ea      	bne.n	8006e0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0304 	and.w	r3, r3, #4
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f000 8097 	beq.w	8006f74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e46:	2300      	movs	r3, #0
 8006e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e4a:	4b81      	ldr	r3, [pc, #516]	; (8007050 <HAL_RCC_OscConfig+0x470>)
 8006e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d10f      	bne.n	8006e76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e56:	2300      	movs	r3, #0
 8006e58:	60bb      	str	r3, [r7, #8]
 8006e5a:	4b7d      	ldr	r3, [pc, #500]	; (8007050 <HAL_RCC_OscConfig+0x470>)
 8006e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5e:	4a7c      	ldr	r2, [pc, #496]	; (8007050 <HAL_RCC_OscConfig+0x470>)
 8006e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e64:	6413      	str	r3, [r2, #64]	; 0x40
 8006e66:	4b7a      	ldr	r3, [pc, #488]	; (8007050 <HAL_RCC_OscConfig+0x470>)
 8006e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e6e:	60bb      	str	r3, [r7, #8]
 8006e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e72:	2301      	movs	r3, #1
 8006e74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e76:	4b77      	ldr	r3, [pc, #476]	; (8007054 <HAL_RCC_OscConfig+0x474>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d118      	bne.n	8006eb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e82:	4b74      	ldr	r3, [pc, #464]	; (8007054 <HAL_RCC_OscConfig+0x474>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a73      	ldr	r2, [pc, #460]	; (8007054 <HAL_RCC_OscConfig+0x474>)
 8006e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e8e:	f7fd fca7 	bl	80047e0 <HAL_GetTick>
 8006e92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e94:	e008      	b.n	8006ea8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e96:	f7fd fca3 	bl	80047e0 <HAL_GetTick>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d901      	bls.n	8006ea8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e10c      	b.n	80070c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ea8:	4b6a      	ldr	r3, [pc, #424]	; (8007054 <HAL_RCC_OscConfig+0x474>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d0f0      	beq.n	8006e96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d106      	bne.n	8006eca <HAL_RCC_OscConfig+0x2ea>
 8006ebc:	4b64      	ldr	r3, [pc, #400]	; (8007050 <HAL_RCC_OscConfig+0x470>)
 8006ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ec0:	4a63      	ldr	r2, [pc, #396]	; (8007050 <HAL_RCC_OscConfig+0x470>)
 8006ec2:	f043 0301 	orr.w	r3, r3, #1
 8006ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8006ec8:	e01c      	b.n	8006f04 <HAL_RCC_OscConfig+0x324>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	2b05      	cmp	r3, #5
 8006ed0:	d10c      	bne.n	8006eec <HAL_RCC_OscConfig+0x30c>
 8006ed2:	4b5f      	ldr	r3, [pc, #380]	; (8007050 <HAL_RCC_OscConfig+0x470>)
 8006ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed6:	4a5e      	ldr	r2, [pc, #376]	; (8007050 <HAL_RCC_OscConfig+0x470>)
 8006ed8:	f043 0304 	orr.w	r3, r3, #4
 8006edc:	6713      	str	r3, [r2, #112]	; 0x70
 8006ede:	4b5c      	ldr	r3, [pc, #368]	; (8007050 <HAL_RCC_OscConfig+0x470>)
 8006ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee2:	4a5b      	ldr	r2, [pc, #364]	; (8007050 <HAL_RCC_OscConfig+0x470>)
 8006ee4:	f043 0301 	orr.w	r3, r3, #1
 8006ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8006eea:	e00b      	b.n	8006f04 <HAL_RCC_OscConfig+0x324>
 8006eec:	4b58      	ldr	r3, [pc, #352]	; (8007050 <HAL_RCC_OscConfig+0x470>)
 8006eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef0:	4a57      	ldr	r2, [pc, #348]	; (8007050 <HAL_RCC_OscConfig+0x470>)
 8006ef2:	f023 0301 	bic.w	r3, r3, #1
 8006ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8006ef8:	4b55      	ldr	r3, [pc, #340]	; (8007050 <HAL_RCC_OscConfig+0x470>)
 8006efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006efc:	4a54      	ldr	r2, [pc, #336]	; (8007050 <HAL_RCC_OscConfig+0x470>)
 8006efe:	f023 0304 	bic.w	r3, r3, #4
 8006f02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d015      	beq.n	8006f38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f0c:	f7fd fc68 	bl	80047e0 <HAL_GetTick>
 8006f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f12:	e00a      	b.n	8006f2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f14:	f7fd fc64 	bl	80047e0 <HAL_GetTick>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d901      	bls.n	8006f2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e0cb      	b.n	80070c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f2a:	4b49      	ldr	r3, [pc, #292]	; (8007050 <HAL_RCC_OscConfig+0x470>)
 8006f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f2e:	f003 0302 	and.w	r3, r3, #2
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d0ee      	beq.n	8006f14 <HAL_RCC_OscConfig+0x334>
 8006f36:	e014      	b.n	8006f62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f38:	f7fd fc52 	bl	80047e0 <HAL_GetTick>
 8006f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f3e:	e00a      	b.n	8006f56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f40:	f7fd fc4e 	bl	80047e0 <HAL_GetTick>
 8006f44:	4602      	mov	r2, r0
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d901      	bls.n	8006f56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006f52:	2303      	movs	r3, #3
 8006f54:	e0b5      	b.n	80070c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f56:	4b3e      	ldr	r3, [pc, #248]	; (8007050 <HAL_RCC_OscConfig+0x470>)
 8006f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f5a:	f003 0302 	and.w	r3, r3, #2
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1ee      	bne.n	8006f40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f62:	7dfb      	ldrb	r3, [r7, #23]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d105      	bne.n	8006f74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f68:	4b39      	ldr	r3, [pc, #228]	; (8007050 <HAL_RCC_OscConfig+0x470>)
 8006f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6c:	4a38      	ldr	r2, [pc, #224]	; (8007050 <HAL_RCC_OscConfig+0x470>)
 8006f6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	699b      	ldr	r3, [r3, #24]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f000 80a1 	beq.w	80070c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f7e:	4b34      	ldr	r3, [pc, #208]	; (8007050 <HAL_RCC_OscConfig+0x470>)
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	f003 030c 	and.w	r3, r3, #12
 8006f86:	2b08      	cmp	r3, #8
 8006f88:	d05c      	beq.n	8007044 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d141      	bne.n	8007016 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f92:	4b31      	ldr	r3, [pc, #196]	; (8007058 <HAL_RCC_OscConfig+0x478>)
 8006f94:	2200      	movs	r2, #0
 8006f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f98:	f7fd fc22 	bl	80047e0 <HAL_GetTick>
 8006f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f9e:	e008      	b.n	8006fb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fa0:	f7fd fc1e 	bl	80047e0 <HAL_GetTick>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	2b02      	cmp	r3, #2
 8006fac:	d901      	bls.n	8006fb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e087      	b.n	80070c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fb2:	4b27      	ldr	r3, [pc, #156]	; (8007050 <HAL_RCC_OscConfig+0x470>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1f0      	bne.n	8006fa0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	69da      	ldr	r2, [r3, #28]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	431a      	orrs	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fcc:	019b      	lsls	r3, r3, #6
 8006fce:	431a      	orrs	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd4:	085b      	lsrs	r3, r3, #1
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	041b      	lsls	r3, r3, #16
 8006fda:	431a      	orrs	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe0:	061b      	lsls	r3, r3, #24
 8006fe2:	491b      	ldr	r1, [pc, #108]	; (8007050 <HAL_RCC_OscConfig+0x470>)
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fe8:	4b1b      	ldr	r3, [pc, #108]	; (8007058 <HAL_RCC_OscConfig+0x478>)
 8006fea:	2201      	movs	r2, #1
 8006fec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fee:	f7fd fbf7 	bl	80047e0 <HAL_GetTick>
 8006ff2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ff4:	e008      	b.n	8007008 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ff6:	f7fd fbf3 	bl	80047e0 <HAL_GetTick>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	2b02      	cmp	r3, #2
 8007002:	d901      	bls.n	8007008 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007004:	2303      	movs	r3, #3
 8007006:	e05c      	b.n	80070c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007008:	4b11      	ldr	r3, [pc, #68]	; (8007050 <HAL_RCC_OscConfig+0x470>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007010:	2b00      	cmp	r3, #0
 8007012:	d0f0      	beq.n	8006ff6 <HAL_RCC_OscConfig+0x416>
 8007014:	e054      	b.n	80070c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007016:	4b10      	ldr	r3, [pc, #64]	; (8007058 <HAL_RCC_OscConfig+0x478>)
 8007018:	2200      	movs	r2, #0
 800701a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800701c:	f7fd fbe0 	bl	80047e0 <HAL_GetTick>
 8007020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007022:	e008      	b.n	8007036 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007024:	f7fd fbdc 	bl	80047e0 <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	2b02      	cmp	r3, #2
 8007030:	d901      	bls.n	8007036 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e045      	b.n	80070c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007036:	4b06      	ldr	r3, [pc, #24]	; (8007050 <HAL_RCC_OscConfig+0x470>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1f0      	bne.n	8007024 <HAL_RCC_OscConfig+0x444>
 8007042:	e03d      	b.n	80070c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	699b      	ldr	r3, [r3, #24]
 8007048:	2b01      	cmp	r3, #1
 800704a:	d107      	bne.n	800705c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e038      	b.n	80070c2 <HAL_RCC_OscConfig+0x4e2>
 8007050:	40023800 	.word	0x40023800
 8007054:	40007000 	.word	0x40007000
 8007058:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800705c:	4b1b      	ldr	r3, [pc, #108]	; (80070cc <HAL_RCC_OscConfig+0x4ec>)
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d028      	beq.n	80070bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007074:	429a      	cmp	r2, r3
 8007076:	d121      	bne.n	80070bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007082:	429a      	cmp	r2, r3
 8007084:	d11a      	bne.n	80070bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800708c:	4013      	ands	r3, r2
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007092:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007094:	4293      	cmp	r3, r2
 8007096:	d111      	bne.n	80070bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a2:	085b      	lsrs	r3, r3, #1
 80070a4:	3b01      	subs	r3, #1
 80070a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d107      	bne.n	80070bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d001      	beq.n	80070c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e000      	b.n	80070c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3718      	adds	r7, #24
 80070c6:	46bd      	mov	sp, r7
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	40023800 	.word	0x40023800

080070d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d101      	bne.n	80070e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e0cc      	b.n	800727e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80070e4:	4b68      	ldr	r3, [pc, #416]	; (8007288 <HAL_RCC_ClockConfig+0x1b8>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0307 	and.w	r3, r3, #7
 80070ec:	683a      	ldr	r2, [r7, #0]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d90c      	bls.n	800710c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070f2:	4b65      	ldr	r3, [pc, #404]	; (8007288 <HAL_RCC_ClockConfig+0x1b8>)
 80070f4:	683a      	ldr	r2, [r7, #0]
 80070f6:	b2d2      	uxtb	r2, r2
 80070f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070fa:	4b63      	ldr	r3, [pc, #396]	; (8007288 <HAL_RCC_ClockConfig+0x1b8>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0307 	and.w	r3, r3, #7
 8007102:	683a      	ldr	r2, [r7, #0]
 8007104:	429a      	cmp	r2, r3
 8007106:	d001      	beq.n	800710c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e0b8      	b.n	800727e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0302 	and.w	r3, r3, #2
 8007114:	2b00      	cmp	r3, #0
 8007116:	d020      	beq.n	800715a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 0304 	and.w	r3, r3, #4
 8007120:	2b00      	cmp	r3, #0
 8007122:	d005      	beq.n	8007130 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007124:	4b59      	ldr	r3, [pc, #356]	; (800728c <HAL_RCC_ClockConfig+0x1bc>)
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	4a58      	ldr	r2, [pc, #352]	; (800728c <HAL_RCC_ClockConfig+0x1bc>)
 800712a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800712e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 0308 	and.w	r3, r3, #8
 8007138:	2b00      	cmp	r3, #0
 800713a:	d005      	beq.n	8007148 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800713c:	4b53      	ldr	r3, [pc, #332]	; (800728c <HAL_RCC_ClockConfig+0x1bc>)
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	4a52      	ldr	r2, [pc, #328]	; (800728c <HAL_RCC_ClockConfig+0x1bc>)
 8007142:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007146:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007148:	4b50      	ldr	r3, [pc, #320]	; (800728c <HAL_RCC_ClockConfig+0x1bc>)
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	494d      	ldr	r1, [pc, #308]	; (800728c <HAL_RCC_ClockConfig+0x1bc>)
 8007156:	4313      	orrs	r3, r2
 8007158:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	2b00      	cmp	r3, #0
 8007164:	d044      	beq.n	80071f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	2b01      	cmp	r3, #1
 800716c:	d107      	bne.n	800717e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800716e:	4b47      	ldr	r3, [pc, #284]	; (800728c <HAL_RCC_ClockConfig+0x1bc>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d119      	bne.n	80071ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e07f      	b.n	800727e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	2b02      	cmp	r3, #2
 8007184:	d003      	beq.n	800718e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800718a:	2b03      	cmp	r3, #3
 800718c:	d107      	bne.n	800719e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800718e:	4b3f      	ldr	r3, [pc, #252]	; (800728c <HAL_RCC_ClockConfig+0x1bc>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d109      	bne.n	80071ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	e06f      	b.n	800727e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800719e:	4b3b      	ldr	r3, [pc, #236]	; (800728c <HAL_RCC_ClockConfig+0x1bc>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0302 	and.w	r3, r3, #2
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d101      	bne.n	80071ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e067      	b.n	800727e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80071ae:	4b37      	ldr	r3, [pc, #220]	; (800728c <HAL_RCC_ClockConfig+0x1bc>)
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	f023 0203 	bic.w	r2, r3, #3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	4934      	ldr	r1, [pc, #208]	; (800728c <HAL_RCC_ClockConfig+0x1bc>)
 80071bc:	4313      	orrs	r3, r2
 80071be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80071c0:	f7fd fb0e 	bl	80047e0 <HAL_GetTick>
 80071c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071c6:	e00a      	b.n	80071de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071c8:	f7fd fb0a 	bl	80047e0 <HAL_GetTick>
 80071cc:	4602      	mov	r2, r0
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d901      	bls.n	80071de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e04f      	b.n	800727e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071de:	4b2b      	ldr	r3, [pc, #172]	; (800728c <HAL_RCC_ClockConfig+0x1bc>)
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f003 020c 	and.w	r2, r3, #12
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d1eb      	bne.n	80071c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80071f0:	4b25      	ldr	r3, [pc, #148]	; (8007288 <HAL_RCC_ClockConfig+0x1b8>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 0307 	and.w	r3, r3, #7
 80071f8:	683a      	ldr	r2, [r7, #0]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d20c      	bcs.n	8007218 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071fe:	4b22      	ldr	r3, [pc, #136]	; (8007288 <HAL_RCC_ClockConfig+0x1b8>)
 8007200:	683a      	ldr	r2, [r7, #0]
 8007202:	b2d2      	uxtb	r2, r2
 8007204:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007206:	4b20      	ldr	r3, [pc, #128]	; (8007288 <HAL_RCC_ClockConfig+0x1b8>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f003 0307 	and.w	r3, r3, #7
 800720e:	683a      	ldr	r2, [r7, #0]
 8007210:	429a      	cmp	r2, r3
 8007212:	d001      	beq.n	8007218 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	e032      	b.n	800727e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 0304 	and.w	r3, r3, #4
 8007220:	2b00      	cmp	r3, #0
 8007222:	d008      	beq.n	8007236 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007224:	4b19      	ldr	r3, [pc, #100]	; (800728c <HAL_RCC_ClockConfig+0x1bc>)
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	4916      	ldr	r1, [pc, #88]	; (800728c <HAL_RCC_ClockConfig+0x1bc>)
 8007232:	4313      	orrs	r3, r2
 8007234:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 0308 	and.w	r3, r3, #8
 800723e:	2b00      	cmp	r3, #0
 8007240:	d009      	beq.n	8007256 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007242:	4b12      	ldr	r3, [pc, #72]	; (800728c <HAL_RCC_ClockConfig+0x1bc>)
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	00db      	lsls	r3, r3, #3
 8007250:	490e      	ldr	r1, [pc, #56]	; (800728c <HAL_RCC_ClockConfig+0x1bc>)
 8007252:	4313      	orrs	r3, r2
 8007254:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007256:	f000 f821 	bl	800729c <HAL_RCC_GetSysClockFreq>
 800725a:	4602      	mov	r2, r0
 800725c:	4b0b      	ldr	r3, [pc, #44]	; (800728c <HAL_RCC_ClockConfig+0x1bc>)
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	091b      	lsrs	r3, r3, #4
 8007262:	f003 030f 	and.w	r3, r3, #15
 8007266:	490a      	ldr	r1, [pc, #40]	; (8007290 <HAL_RCC_ClockConfig+0x1c0>)
 8007268:	5ccb      	ldrb	r3, [r1, r3]
 800726a:	fa22 f303 	lsr.w	r3, r2, r3
 800726e:	4a09      	ldr	r2, [pc, #36]	; (8007294 <HAL_RCC_ClockConfig+0x1c4>)
 8007270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007272:	4b09      	ldr	r3, [pc, #36]	; (8007298 <HAL_RCC_ClockConfig+0x1c8>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4618      	mov	r0, r3
 8007278:	f7fd f8e2 	bl	8004440 <HAL_InitTick>

  return HAL_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	40023c00 	.word	0x40023c00
 800728c:	40023800 	.word	0x40023800
 8007290:	080118d8 	.word	0x080118d8
 8007294:	20000050 	.word	0x20000050
 8007298:	20000054 	.word	0x20000054

0800729c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800729c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072a0:	b090      	sub	sp, #64	; 0x40
 80072a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80072a4:	2300      	movs	r3, #0
 80072a6:	637b      	str	r3, [r7, #52]	; 0x34
 80072a8:	2300      	movs	r3, #0
 80072aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072ac:	2300      	movs	r3, #0
 80072ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80072b0:	2300      	movs	r3, #0
 80072b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80072b4:	4b59      	ldr	r3, [pc, #356]	; (800741c <HAL_RCC_GetSysClockFreq+0x180>)
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	f003 030c 	and.w	r3, r3, #12
 80072bc:	2b08      	cmp	r3, #8
 80072be:	d00d      	beq.n	80072dc <HAL_RCC_GetSysClockFreq+0x40>
 80072c0:	2b08      	cmp	r3, #8
 80072c2:	f200 80a1 	bhi.w	8007408 <HAL_RCC_GetSysClockFreq+0x16c>
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d002      	beq.n	80072d0 <HAL_RCC_GetSysClockFreq+0x34>
 80072ca:	2b04      	cmp	r3, #4
 80072cc:	d003      	beq.n	80072d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80072ce:	e09b      	b.n	8007408 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80072d0:	4b53      	ldr	r3, [pc, #332]	; (8007420 <HAL_RCC_GetSysClockFreq+0x184>)
 80072d2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80072d4:	e09b      	b.n	800740e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80072d6:	4b53      	ldr	r3, [pc, #332]	; (8007424 <HAL_RCC_GetSysClockFreq+0x188>)
 80072d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80072da:	e098      	b.n	800740e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80072dc:	4b4f      	ldr	r3, [pc, #316]	; (800741c <HAL_RCC_GetSysClockFreq+0x180>)
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072e4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80072e6:	4b4d      	ldr	r3, [pc, #308]	; (800741c <HAL_RCC_GetSysClockFreq+0x180>)
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d028      	beq.n	8007344 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072f2:	4b4a      	ldr	r3, [pc, #296]	; (800741c <HAL_RCC_GetSysClockFreq+0x180>)
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	099b      	lsrs	r3, r3, #6
 80072f8:	2200      	movs	r2, #0
 80072fa:	623b      	str	r3, [r7, #32]
 80072fc:	627a      	str	r2, [r7, #36]	; 0x24
 80072fe:	6a3b      	ldr	r3, [r7, #32]
 8007300:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007304:	2100      	movs	r1, #0
 8007306:	4b47      	ldr	r3, [pc, #284]	; (8007424 <HAL_RCC_GetSysClockFreq+0x188>)
 8007308:	fb03 f201 	mul.w	r2, r3, r1
 800730c:	2300      	movs	r3, #0
 800730e:	fb00 f303 	mul.w	r3, r0, r3
 8007312:	4413      	add	r3, r2
 8007314:	4a43      	ldr	r2, [pc, #268]	; (8007424 <HAL_RCC_GetSysClockFreq+0x188>)
 8007316:	fba0 1202 	umull	r1, r2, r0, r2
 800731a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800731c:	460a      	mov	r2, r1
 800731e:	62ba      	str	r2, [r7, #40]	; 0x28
 8007320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007322:	4413      	add	r3, r2
 8007324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007328:	2200      	movs	r2, #0
 800732a:	61bb      	str	r3, [r7, #24]
 800732c:	61fa      	str	r2, [r7, #28]
 800732e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007332:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007336:	f7f9 fcbf 	bl	8000cb8 <__aeabi_uldivmod>
 800733a:	4602      	mov	r2, r0
 800733c:	460b      	mov	r3, r1
 800733e:	4613      	mov	r3, r2
 8007340:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007342:	e053      	b.n	80073ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007344:	4b35      	ldr	r3, [pc, #212]	; (800741c <HAL_RCC_GetSysClockFreq+0x180>)
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	099b      	lsrs	r3, r3, #6
 800734a:	2200      	movs	r2, #0
 800734c:	613b      	str	r3, [r7, #16]
 800734e:	617a      	str	r2, [r7, #20]
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007356:	f04f 0b00 	mov.w	fp, #0
 800735a:	4652      	mov	r2, sl
 800735c:	465b      	mov	r3, fp
 800735e:	f04f 0000 	mov.w	r0, #0
 8007362:	f04f 0100 	mov.w	r1, #0
 8007366:	0159      	lsls	r1, r3, #5
 8007368:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800736c:	0150      	lsls	r0, r2, #5
 800736e:	4602      	mov	r2, r0
 8007370:	460b      	mov	r3, r1
 8007372:	ebb2 080a 	subs.w	r8, r2, sl
 8007376:	eb63 090b 	sbc.w	r9, r3, fp
 800737a:	f04f 0200 	mov.w	r2, #0
 800737e:	f04f 0300 	mov.w	r3, #0
 8007382:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007386:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800738a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800738e:	ebb2 0408 	subs.w	r4, r2, r8
 8007392:	eb63 0509 	sbc.w	r5, r3, r9
 8007396:	f04f 0200 	mov.w	r2, #0
 800739a:	f04f 0300 	mov.w	r3, #0
 800739e:	00eb      	lsls	r3, r5, #3
 80073a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073a4:	00e2      	lsls	r2, r4, #3
 80073a6:	4614      	mov	r4, r2
 80073a8:	461d      	mov	r5, r3
 80073aa:	eb14 030a 	adds.w	r3, r4, sl
 80073ae:	603b      	str	r3, [r7, #0]
 80073b0:	eb45 030b 	adc.w	r3, r5, fp
 80073b4:	607b      	str	r3, [r7, #4]
 80073b6:	f04f 0200 	mov.w	r2, #0
 80073ba:	f04f 0300 	mov.w	r3, #0
 80073be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80073c2:	4629      	mov	r1, r5
 80073c4:	028b      	lsls	r3, r1, #10
 80073c6:	4621      	mov	r1, r4
 80073c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80073cc:	4621      	mov	r1, r4
 80073ce:	028a      	lsls	r2, r1, #10
 80073d0:	4610      	mov	r0, r2
 80073d2:	4619      	mov	r1, r3
 80073d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073d6:	2200      	movs	r2, #0
 80073d8:	60bb      	str	r3, [r7, #8]
 80073da:	60fa      	str	r2, [r7, #12]
 80073dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073e0:	f7f9 fc6a 	bl	8000cb8 <__aeabi_uldivmod>
 80073e4:	4602      	mov	r2, r0
 80073e6:	460b      	mov	r3, r1
 80073e8:	4613      	mov	r3, r2
 80073ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80073ec:	4b0b      	ldr	r3, [pc, #44]	; (800741c <HAL_RCC_GetSysClockFreq+0x180>)
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	0c1b      	lsrs	r3, r3, #16
 80073f2:	f003 0303 	and.w	r3, r3, #3
 80073f6:	3301      	adds	r3, #1
 80073f8:	005b      	lsls	r3, r3, #1
 80073fa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80073fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80073fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007400:	fbb2 f3f3 	udiv	r3, r2, r3
 8007404:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007406:	e002      	b.n	800740e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007408:	4b05      	ldr	r3, [pc, #20]	; (8007420 <HAL_RCC_GetSysClockFreq+0x184>)
 800740a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800740c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800740e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007410:	4618      	mov	r0, r3
 8007412:	3740      	adds	r7, #64	; 0x40
 8007414:	46bd      	mov	sp, r7
 8007416:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800741a:	bf00      	nop
 800741c:	40023800 	.word	0x40023800
 8007420:	00f42400 	.word	0x00f42400
 8007424:	017d7840 	.word	0x017d7840

08007428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007428:	b480      	push	{r7}
 800742a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800742c:	4b03      	ldr	r3, [pc, #12]	; (800743c <HAL_RCC_GetHCLKFreq+0x14>)
 800742e:	681b      	ldr	r3, [r3, #0]
}
 8007430:	4618      	mov	r0, r3
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	20000050 	.word	0x20000050

08007440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007444:	f7ff fff0 	bl	8007428 <HAL_RCC_GetHCLKFreq>
 8007448:	4602      	mov	r2, r0
 800744a:	4b05      	ldr	r3, [pc, #20]	; (8007460 <HAL_RCC_GetPCLK1Freq+0x20>)
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	0a9b      	lsrs	r3, r3, #10
 8007450:	f003 0307 	and.w	r3, r3, #7
 8007454:	4903      	ldr	r1, [pc, #12]	; (8007464 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007456:	5ccb      	ldrb	r3, [r1, r3]
 8007458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800745c:	4618      	mov	r0, r3
 800745e:	bd80      	pop	{r7, pc}
 8007460:	40023800 	.word	0x40023800
 8007464:	080118e8 	.word	0x080118e8

08007468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800746c:	f7ff ffdc 	bl	8007428 <HAL_RCC_GetHCLKFreq>
 8007470:	4602      	mov	r2, r0
 8007472:	4b05      	ldr	r3, [pc, #20]	; (8007488 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	0b5b      	lsrs	r3, r3, #13
 8007478:	f003 0307 	and.w	r3, r3, #7
 800747c:	4903      	ldr	r1, [pc, #12]	; (800748c <HAL_RCC_GetPCLK2Freq+0x24>)
 800747e:	5ccb      	ldrb	r3, [r1, r3]
 8007480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007484:	4618      	mov	r0, r3
 8007486:	bd80      	pop	{r7, pc}
 8007488:	40023800 	.word	0x40023800
 800748c:	080118e8 	.word	0x080118e8

08007490 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	220f      	movs	r2, #15
 800749e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80074a0:	4b12      	ldr	r3, [pc, #72]	; (80074ec <HAL_RCC_GetClockConfig+0x5c>)
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	f003 0203 	and.w	r2, r3, #3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80074ac:	4b0f      	ldr	r3, [pc, #60]	; (80074ec <HAL_RCC_GetClockConfig+0x5c>)
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80074b8:	4b0c      	ldr	r3, [pc, #48]	; (80074ec <HAL_RCC_GetClockConfig+0x5c>)
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80074c4:	4b09      	ldr	r3, [pc, #36]	; (80074ec <HAL_RCC_GetClockConfig+0x5c>)
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	08db      	lsrs	r3, r3, #3
 80074ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80074d2:	4b07      	ldr	r3, [pc, #28]	; (80074f0 <HAL_RCC_GetClockConfig+0x60>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0207 	and.w	r2, r3, #7
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	601a      	str	r2, [r3, #0]
}
 80074de:	bf00      	nop
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	40023800 	.word	0x40023800
 80074f0:	40023c00 	.word	0x40023c00

080074f4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d101      	bne.n	8007506 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e022      	b.n	800754c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800750c:	b2db      	uxtb	r3, r3
 800750e:	2b00      	cmp	r3, #0
 8007510:	d105      	bne.n	800751e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f7fc fd91 	bl	8004040 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2203      	movs	r2, #3
 8007522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f814 	bl	8007554 <HAL_SD_InitCard>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d001      	beq.n	8007536 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e00a      	b.n	800754c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	3708      	adds	r7, #8
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007554:	b5b0      	push	{r4, r5, r7, lr}
 8007556:	b08e      	sub	sp, #56	; 0x38
 8007558:	af04      	add	r7, sp, #16
 800755a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800755c:	2300      	movs	r3, #0
 800755e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007560:	2300      	movs	r3, #0
 8007562:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007564:	2300      	movs	r3, #0
 8007566:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007568:	2300      	movs	r3, #0
 800756a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800756c:	2300      	movs	r3, #0
 800756e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007570:	2376      	movs	r3, #118	; 0x76
 8007572:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681d      	ldr	r5, [r3, #0]
 8007578:	466c      	mov	r4, sp
 800757a:	f107 0314 	add.w	r3, r7, #20
 800757e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007582:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007586:	f107 0308 	add.w	r3, r7, #8
 800758a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800758c:	4628      	mov	r0, r5
 800758e:	f002 f835 	bl	80095fc <SDIO_Init>
 8007592:	4603      	mov	r3, r0
 8007594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007598:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800759c:	2b00      	cmp	r3, #0
 800759e:	d001      	beq.n	80075a4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e04f      	b.n	8007644 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80075a4:	4b29      	ldr	r3, [pc, #164]	; (800764c <HAL_SD_InitCard+0xf8>)
 80075a6:	2200      	movs	r2, #0
 80075a8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4618      	mov	r0, r3
 80075b0:	f002 f86d 	bl	800968e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80075b4:	4b25      	ldr	r3, [pc, #148]	; (800764c <HAL_SD_InitCard+0xf8>)
 80075b6:	2201      	movs	r2, #1
 80075b8:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80075ba:	2002      	movs	r0, #2
 80075bc:	f7fd f91c 	bl	80047f8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 ff03 	bl	80083cc <SD_PowerON>
 80075c6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80075c8:	6a3b      	ldr	r3, [r7, #32]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00b      	beq.n	80075e6 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075da:	6a3b      	ldr	r3, [r7, #32]
 80075dc:	431a      	orrs	r2, r3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e02e      	b.n	8007644 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 fe22 	bl	8008230 <SD_InitCard>
 80075ec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80075ee:	6a3b      	ldr	r3, [r7, #32]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00b      	beq.n	800760c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007600:	6a3b      	ldr	r3, [r7, #32]
 8007602:	431a      	orrs	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e01b      	b.n	8007644 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007614:	4618      	mov	r0, r3
 8007616:	f002 f8cc 	bl	80097b2 <SDMMC_CmdBlockLength>
 800761a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800761c:	6a3b      	ldr	r3, [r7, #32]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00f      	beq.n	8007642 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a0a      	ldr	r2, [pc, #40]	; (8007650 <HAL_SD_InitCard+0xfc>)
 8007628:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800762e:	6a3b      	ldr	r3, [r7, #32]
 8007630:	431a      	orrs	r2, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e000      	b.n	8007644 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3728      	adds	r7, #40	; 0x28
 8007648:	46bd      	mov	sp, r7
 800764a:	bdb0      	pop	{r4, r5, r7, pc}
 800764c:	422580a0 	.word	0x422580a0
 8007650:	004005ff 	.word	0x004005ff

08007654 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b092      	sub	sp, #72	; 0x48
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]
 8007660:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007662:	f7fd f8bd 	bl	80047e0 <HAL_GetTick>
 8007666:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d107      	bne.n	8007686 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e1bd      	b.n	8007a02 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800768c:	b2db      	uxtb	r3, r3
 800768e:	2b01      	cmp	r3, #1
 8007690:	f040 81b0 	bne.w	80079f4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800769a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	441a      	add	r2, r3
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d907      	bls.n	80076b8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ac:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e1a4      	b.n	8007a02 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2203      	movs	r2, #3
 80076bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2200      	movs	r2, #0
 80076c6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d002      	beq.n	80076d6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80076d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d2:	025b      	lsls	r3, r3, #9
 80076d4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80076d6:	f04f 33ff 	mov.w	r3, #4294967295
 80076da:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	025b      	lsls	r3, r3, #9
 80076e0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80076e2:	2390      	movs	r3, #144	; 0x90
 80076e4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80076e6:	2302      	movs	r3, #2
 80076e8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80076ea:	2300      	movs	r3, #0
 80076ec:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80076ee:	2301      	movs	r3, #1
 80076f0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f107 0214 	add.w	r2, r7, #20
 80076fa:	4611      	mov	r1, r2
 80076fc:	4618      	mov	r0, r3
 80076fe:	f002 f82c 	bl	800975a <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d90a      	bls.n	800771e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2202      	movs	r2, #2
 800770c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007714:	4618      	mov	r0, r3
 8007716:	f002 f890 	bl	800983a <SDMMC_CmdReadMultiBlock>
 800771a:	6478      	str	r0, [r7, #68]	; 0x44
 800771c:	e009      	b.n	8007732 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2201      	movs	r2, #1
 8007722:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800772a:	4618      	mov	r0, r3
 800772c:	f002 f863 	bl	80097f6 <SDMMC_CmdReadSingleBlock>
 8007730:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007734:	2b00      	cmp	r3, #0
 8007736:	d012      	beq.n	800775e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a7a      	ldr	r2, [pc, #488]	; (8007928 <HAL_SD_ReadBlocks+0x2d4>)
 800773e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007746:	431a      	orrs	r2, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2200      	movs	r2, #0
 8007758:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e151      	b.n	8007a02 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007762:	e061      	b.n	8007828 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800776a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800776e:	2b00      	cmp	r3, #0
 8007770:	d03c      	beq.n	80077ec <HAL_SD_ReadBlocks+0x198>
 8007772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007774:	2b00      	cmp	r3, #0
 8007776:	d039      	beq.n	80077ec <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8007778:	2300      	movs	r3, #0
 800777a:	643b      	str	r3, [r7, #64]	; 0x40
 800777c:	e033      	b.n	80077e6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4618      	mov	r0, r3
 8007784:	f001 ff65 	bl	8009652 <SDIO_ReadFIFO>
 8007788:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800778a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778c:	b2da      	uxtb	r2, r3
 800778e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007790:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007794:	3301      	adds	r3, #1
 8007796:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800779a:	3b01      	subs	r3, #1
 800779c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800779e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a0:	0a1b      	lsrs	r3, r3, #8
 80077a2:	b2da      	uxtb	r2, r3
 80077a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80077a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077aa:	3301      	adds	r3, #1
 80077ac:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80077ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077b0:	3b01      	subs	r3, #1
 80077b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80077b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b6:	0c1b      	lsrs	r3, r3, #16
 80077b8:	b2da      	uxtb	r2, r3
 80077ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077bc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80077be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c0:	3301      	adds	r3, #1
 80077c2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80077c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077c6:	3b01      	subs	r3, #1
 80077c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80077ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077cc:	0e1b      	lsrs	r3, r3, #24
 80077ce:	b2da      	uxtb	r2, r3
 80077d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80077d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d6:	3301      	adds	r3, #1
 80077d8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80077da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077dc:	3b01      	subs	r3, #1
 80077de:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80077e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077e2:	3301      	adds	r3, #1
 80077e4:	643b      	str	r3, [r7, #64]	; 0x40
 80077e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077e8:	2b07      	cmp	r3, #7
 80077ea:	d9c8      	bls.n	800777e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80077ec:	f7fc fff8 	bl	80047e0 <HAL_GetTick>
 80077f0:	4602      	mov	r2, r0
 80077f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d902      	bls.n	8007802 <HAL_SD_ReadBlocks+0x1ae>
 80077fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d112      	bne.n	8007828 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a48      	ldr	r2, [pc, #288]	; (8007928 <HAL_SD_ReadBlocks+0x2d4>)
 8007808:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2201      	movs	r2, #1
 800781a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e0ec      	b.n	8007a02 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800782e:	f240 332a 	movw	r3, #810	; 0x32a
 8007832:	4013      	ands	r3, r2
 8007834:	2b00      	cmp	r3, #0
 8007836:	d095      	beq.n	8007764 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800783e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007842:	2b00      	cmp	r3, #0
 8007844:	d022      	beq.n	800788c <HAL_SD_ReadBlocks+0x238>
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d91f      	bls.n	800788c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007850:	2b03      	cmp	r3, #3
 8007852:	d01b      	beq.n	800788c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4618      	mov	r0, r3
 800785a:	f002 f855 	bl	8009908 <SDMMC_CmdStopTransfer>
 800785e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007862:	2b00      	cmp	r3, #0
 8007864:	d012      	beq.n	800788c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a2f      	ldr	r2, [pc, #188]	; (8007928 <HAL_SD_ReadBlocks+0x2d4>)
 800786c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007872:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007874:	431a      	orrs	r2, r3
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2201      	movs	r2, #1
 800787e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e0ba      	b.n	8007a02 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007892:	f003 0308 	and.w	r3, r3, #8
 8007896:	2b00      	cmp	r3, #0
 8007898:	d012      	beq.n	80078c0 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a22      	ldr	r2, [pc, #136]	; (8007928 <HAL_SD_ReadBlocks+0x2d4>)
 80078a0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a6:	f043 0208 	orr.w	r2, r3, #8
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2201      	movs	r2, #1
 80078b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2200      	movs	r2, #0
 80078ba:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e0a0      	b.n	8007a02 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078c6:	f003 0302 	and.w	r3, r3, #2
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d012      	beq.n	80078f4 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a15      	ldr	r2, [pc, #84]	; (8007928 <HAL_SD_ReadBlocks+0x2d4>)
 80078d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078da:	f043 0202 	orr.w	r2, r3, #2
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	e086      	b.n	8007a02 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078fa:	f003 0320 	and.w	r3, r3, #32
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d063      	beq.n	80079ca <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a08      	ldr	r2, [pc, #32]	; (8007928 <HAL_SD_ReadBlocks+0x2d4>)
 8007908:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790e:	f043 0220 	orr.w	r2, r3, #32
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2201      	movs	r2, #1
 800791a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e06c      	b.n	8007a02 <HAL_SD_ReadBlocks+0x3ae>
 8007928:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4618      	mov	r0, r3
 8007932:	f001 fe8e 	bl	8009652 <SDIO_ReadFIFO>
 8007936:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8007938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793a:	b2da      	uxtb	r2, r3
 800793c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800793e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007942:	3301      	adds	r3, #1
 8007944:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007948:	3b01      	subs	r3, #1
 800794a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800794c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800794e:	0a1b      	lsrs	r3, r3, #8
 8007950:	b2da      	uxtb	r2, r3
 8007952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007954:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007958:	3301      	adds	r3, #1
 800795a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800795c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800795e:	3b01      	subs	r3, #1
 8007960:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007964:	0c1b      	lsrs	r3, r3, #16
 8007966:	b2da      	uxtb	r2, r3
 8007968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800796a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800796c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800796e:	3301      	adds	r3, #1
 8007970:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007974:	3b01      	subs	r3, #1
 8007976:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797a:	0e1b      	lsrs	r3, r3, #24
 800797c:	b2da      	uxtb	r2, r3
 800797e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007980:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007984:	3301      	adds	r3, #1
 8007986:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800798a:	3b01      	subs	r3, #1
 800798c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800798e:	f7fc ff27 	bl	80047e0 <HAL_GetTick>
 8007992:	4602      	mov	r2, r0
 8007994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007996:	1ad3      	subs	r3, r2, r3
 8007998:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800799a:	429a      	cmp	r2, r3
 800799c:	d902      	bls.n	80079a4 <HAL_SD_ReadBlocks+0x350>
 800799e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d112      	bne.n	80079ca <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a18      	ldr	r2, [pc, #96]	; (8007a0c <HAL_SD_ReadBlocks+0x3b8>)
 80079aa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	e01b      	b.n	8007a02 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d002      	beq.n	80079de <HAL_SD_ReadBlocks+0x38a>
 80079d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1a6      	bne.n	800792c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f240 523a 	movw	r2, #1338	; 0x53a
 80079e6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80079f0:	2300      	movs	r3, #0
 80079f2:	e006      	b.n	8007a02 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
  }
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3748      	adds	r7, #72	; 0x48
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	004005ff 	.word	0x004005ff

08007a10 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b092      	sub	sp, #72	; 0x48
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	60b9      	str	r1, [r7, #8]
 8007a1a:	607a      	str	r2, [r7, #4]
 8007a1c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007a1e:	f7fc fedf 	bl	80047e0 <HAL_GetTick>
 8007a22:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d107      	bne.n	8007a42 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a36:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e166      	b.n	8007d10 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	f040 8159 	bne.w	8007d02 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2200      	movs	r2, #0
 8007a54:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007a56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	441a      	add	r2, r3
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d907      	bls.n	8007a74 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a68:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e14d      	b.n	8007d10 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2203      	movs	r2, #3
 8007a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2200      	movs	r2, #0
 8007a82:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d002      	beq.n	8007a92 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8007a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8e:	025b      	lsls	r3, r3, #9
 8007a90:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007a92:	f04f 33ff 	mov.w	r3, #4294967295
 8007a96:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	025b      	lsls	r3, r3, #9
 8007a9c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007a9e:	2390      	movs	r3, #144	; 0x90
 8007aa0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f107 0218 	add.w	r2, r7, #24
 8007ab6:	4611      	mov	r1, r2
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f001 fe4e 	bl	800975a <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d90a      	bls.n	8007ada <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2220      	movs	r2, #32
 8007ac8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f001 fef6 	bl	80098c2 <SDMMC_CmdWriteMultiBlock>
 8007ad6:	6478      	str	r0, [r7, #68]	; 0x44
 8007ad8:	e009      	b.n	8007aee <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2210      	movs	r2, #16
 8007ade:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f001 fec9 	bl	800987e <SDMMC_CmdWriteSingleBlock>
 8007aec:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d012      	beq.n	8007b1a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a87      	ldr	r2, [pc, #540]	; (8007d18 <HAL_SD_WriteBlocks+0x308>)
 8007afa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b02:	431a      	orrs	r2, r3
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2200      	movs	r2, #0
 8007b14:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e0fa      	b.n	8007d10 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007b1e:	e065      	b.n	8007bec <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d040      	beq.n	8007bb0 <HAL_SD_WriteBlocks+0x1a0>
 8007b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d03d      	beq.n	8007bb0 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8007b34:	2300      	movs	r3, #0
 8007b36:	643b      	str	r3, [r7, #64]	; 0x40
 8007b38:	e037      	b.n	8007baa <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8007b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b42:	3301      	adds	r3, #1
 8007b44:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8007b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	021a      	lsls	r2, r3, #8
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b60:	3b01      	subs	r3, #1
 8007b62:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	041a      	lsls	r2, r3, #16
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b72:	3301      	adds	r3, #1
 8007b74:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	061a      	lsls	r2, r3, #24
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b90:	3b01      	subs	r3, #1
 8007b92:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f107 0214 	add.w	r2, r7, #20
 8007b9c:	4611      	mov	r1, r2
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f001 fd64 	bl	800966c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007ba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	643b      	str	r3, [r7, #64]	; 0x40
 8007baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bac:	2b07      	cmp	r3, #7
 8007bae:	d9c4      	bls.n	8007b3a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007bb0:	f7fc fe16 	bl	80047e0 <HAL_GetTick>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb8:	1ad3      	subs	r3, r2, r3
 8007bba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d902      	bls.n	8007bc6 <HAL_SD_WriteBlocks+0x1b6>
 8007bc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d112      	bne.n	8007bec <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a53      	ldr	r2, [pc, #332]	; (8007d18 <HAL_SD_WriteBlocks+0x308>)
 8007bcc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bd4:	431a      	orrs	r2, r3
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007be8:	2303      	movs	r3, #3
 8007bea:	e091      	b.n	8007d10 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bf2:	f240 331a 	movw	r3, #794	; 0x31a
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d091      	beq.n	8007b20 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d022      	beq.n	8007c50 <HAL_SD_WriteBlocks+0x240>
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d91f      	bls.n	8007c50 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c14:	2b03      	cmp	r3, #3
 8007c16:	d01b      	beq.n	8007c50 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f001 fe73 	bl	8009908 <SDMMC_CmdStopTransfer>
 8007c22:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d012      	beq.n	8007c50 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a3a      	ldr	r2, [pc, #232]	; (8007d18 <HAL_SD_WriteBlocks+0x308>)
 8007c30:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c38:	431a      	orrs	r2, r3
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e05f      	b.n	8007d10 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c56:	f003 0308 	and.w	r3, r3, #8
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d012      	beq.n	8007c84 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a2d      	ldr	r2, [pc, #180]	; (8007d18 <HAL_SD_WriteBlocks+0x308>)
 8007c64:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6a:	f043 0208 	orr.w	r2, r3, #8
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2201      	movs	r2, #1
 8007c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	e045      	b.n	8007d10 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c8a:	f003 0302 	and.w	r3, r3, #2
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d012      	beq.n	8007cb8 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a20      	ldr	r2, [pc, #128]	; (8007d18 <HAL_SD_WriteBlocks+0x308>)
 8007c98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9e:	f043 0202 	orr.w	r2, r3, #2
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e02b      	b.n	8007d10 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cbe:	f003 0310 	and.w	r3, r3, #16
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d012      	beq.n	8007cec <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a13      	ldr	r2, [pc, #76]	; (8007d18 <HAL_SD_WriteBlocks+0x308>)
 8007ccc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd2:	f043 0210 	orr.w	r2, r3, #16
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	e011      	b.n	8007d10 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f240 523a 	movw	r2, #1338	; 0x53a
 8007cf4:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	e006      	b.n	8007d10 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d06:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
  }
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3748      	adds	r7, #72	; 0x48
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	004005ff 	.word	0x004005ff

08007d1c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d2a:	0f9b      	lsrs	r3, r3, #30
 8007d2c:	b2da      	uxtb	r2, r3
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d36:	0e9b      	lsrs	r3, r3, #26
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	f003 030f 	and.w	r3, r3, #15
 8007d3e:	b2da      	uxtb	r2, r3
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d48:	0e1b      	lsrs	r3, r3, #24
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	f003 0303 	and.w	r3, r3, #3
 8007d50:	b2da      	uxtb	r2, r3
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d5a:	0c1b      	lsrs	r3, r3, #16
 8007d5c:	b2da      	uxtb	r2, r3
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d66:	0a1b      	lsrs	r3, r3, #8
 8007d68:	b2da      	uxtb	r2, r3
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d72:	b2da      	uxtb	r2, r3
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d7c:	0d1b      	lsrs	r3, r3, #20
 8007d7e:	b29a      	uxth	r2, r3
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d88:	0c1b      	lsrs	r3, r3, #16
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	f003 030f 	and.w	r3, r3, #15
 8007d90:	b2da      	uxtb	r2, r3
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d9a:	0bdb      	lsrs	r3, r3, #15
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	f003 0301 	and.w	r3, r3, #1
 8007da2:	b2da      	uxtb	r2, r3
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dac:	0b9b      	lsrs	r3, r3, #14
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	f003 0301 	and.w	r3, r3, #1
 8007db4:	b2da      	uxtb	r2, r3
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dbe:	0b5b      	lsrs	r3, r3, #13
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	f003 0301 	and.w	r3, r3, #1
 8007dc6:	b2da      	uxtb	r2, r3
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dd0:	0b1b      	lsrs	r3, r3, #12
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	f003 0301 	and.w	r3, r3, #1
 8007dd8:	b2da      	uxtb	r2, r3
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	2200      	movs	r2, #0
 8007de2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d163      	bne.n	8007eb4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007df0:	009a      	lsls	r2, r3, #2
 8007df2:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007df6:	4013      	ands	r3, r2
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007dfc:	0f92      	lsrs	r2, r2, #30
 8007dfe:	431a      	orrs	r2, r3
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e08:	0edb      	lsrs	r3, r3, #27
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	f003 0307 	and.w	r3, r3, #7
 8007e10:	b2da      	uxtb	r2, r3
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e1a:	0e1b      	lsrs	r3, r3, #24
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	f003 0307 	and.w	r3, r3, #7
 8007e22:	b2da      	uxtb	r2, r3
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e2c:	0d5b      	lsrs	r3, r3, #21
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	f003 0307 	and.w	r3, r3, #7
 8007e34:	b2da      	uxtb	r2, r3
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e3e:	0c9b      	lsrs	r3, r3, #18
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	f003 0307 	and.w	r3, r3, #7
 8007e46:	b2da      	uxtb	r2, r3
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e50:	0bdb      	lsrs	r3, r3, #15
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	f003 0307 	and.w	r3, r3, #7
 8007e58:	b2da      	uxtb	r2, r3
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	1c5a      	adds	r2, r3, #1
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	7e1b      	ldrb	r3, [r3, #24]
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	f003 0307 	and.w	r3, r3, #7
 8007e72:	3302      	adds	r3, #2
 8007e74:	2201      	movs	r2, #1
 8007e76:	fa02 f303 	lsl.w	r3, r2, r3
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007e7e:	fb03 f202 	mul.w	r2, r3, r2
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	7a1b      	ldrb	r3, [r3, #8]
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	f003 030f 	and.w	r3, r3, #15
 8007e90:	2201      	movs	r2, #1
 8007e92:	409a      	lsls	r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007ea0:	0a52      	lsrs	r2, r2, #9
 8007ea2:	fb03 f202 	mul.w	r2, r3, r2
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007eb0:	661a      	str	r2, [r3, #96]	; 0x60
 8007eb2:	e031      	b.n	8007f18 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d11d      	bne.n	8007ef8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ec0:	041b      	lsls	r3, r3, #16
 8007ec2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eca:	0c1b      	lsrs	r3, r3, #16
 8007ecc:	431a      	orrs	r2, r3
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	029a      	lsls	r2, r3, #10
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007eec:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	661a      	str	r2, [r3, #96]	; 0x60
 8007ef6:	e00f      	b.n	8007f18 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a58      	ldr	r2, [pc, #352]	; (8008060 <HAL_SD_GetCardCSD+0x344>)
 8007efe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	e09d      	b.n	8008054 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f1c:	0b9b      	lsrs	r3, r3, #14
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	f003 0301 	and.w	r3, r3, #1
 8007f24:	b2da      	uxtb	r2, r3
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f2e:	09db      	lsrs	r3, r3, #7
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f36:	b2da      	uxtb	r2, r3
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f46:	b2da      	uxtb	r2, r3
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f50:	0fdb      	lsrs	r3, r3, #31
 8007f52:	b2da      	uxtb	r2, r3
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f5c:	0f5b      	lsrs	r3, r3, #29
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	f003 0303 	and.w	r3, r3, #3
 8007f64:	b2da      	uxtb	r2, r3
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f6e:	0e9b      	lsrs	r3, r3, #26
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	f003 0307 	and.w	r3, r3, #7
 8007f76:	b2da      	uxtb	r2, r3
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f80:	0d9b      	lsrs	r3, r3, #22
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	f003 030f 	and.w	r3, r3, #15
 8007f88:	b2da      	uxtb	r2, r3
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f92:	0d5b      	lsrs	r3, r3, #21
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	f003 0301 	and.w	r3, r3, #1
 8007f9a:	b2da      	uxtb	r2, r3
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fae:	0c1b      	lsrs	r3, r3, #16
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	f003 0301 	and.w	r3, r3, #1
 8007fb6:	b2da      	uxtb	r2, r3
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc2:	0bdb      	lsrs	r3, r3, #15
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	f003 0301 	and.w	r3, r3, #1
 8007fca:	b2da      	uxtb	r2, r3
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd6:	0b9b      	lsrs	r3, r3, #14
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	f003 0301 	and.w	r3, r3, #1
 8007fde:	b2da      	uxtb	r2, r3
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fea:	0b5b      	lsrs	r3, r3, #13
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	f003 0301 	and.w	r3, r3, #1
 8007ff2:	b2da      	uxtb	r2, r3
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ffe:	0b1b      	lsrs	r3, r3, #12
 8008000:	b2db      	uxtb	r3, r3
 8008002:	f003 0301 	and.w	r3, r3, #1
 8008006:	b2da      	uxtb	r2, r3
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008012:	0a9b      	lsrs	r3, r3, #10
 8008014:	b2db      	uxtb	r3, r3
 8008016:	f003 0303 	and.w	r3, r3, #3
 800801a:	b2da      	uxtb	r2, r3
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008026:	0a1b      	lsrs	r3, r3, #8
 8008028:	b2db      	uxtb	r3, r3
 800802a:	f003 0303 	and.w	r3, r3, #3
 800802e:	b2da      	uxtb	r2, r3
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800803a:	085b      	lsrs	r3, r3, #1
 800803c:	b2db      	uxtb	r3, r3
 800803e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008042:	b2da      	uxtb	r2, r3
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	2201      	movs	r2, #1
 800804e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	370c      	adds	r7, #12
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr
 8008060:	004005ff 	.word	0x004005ff

08008064 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80080bc:	b5b0      	push	{r4, r5, r7, lr}
 80080be:	b08e      	sub	sp, #56	; 0x38
 80080c0:	af04      	add	r7, sp, #16
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80080c6:	2300      	movs	r3, #0
 80080c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2203      	movs	r2, #3
 80080d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080d8:	2b03      	cmp	r3, #3
 80080da:	d02e      	beq.n	800813a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080e2:	d106      	bne.n	80080f2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	639a      	str	r2, [r3, #56]	; 0x38
 80080f0:	e029      	b.n	8008146 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080f8:	d10a      	bne.n	8008110 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 fa1c 	bl	8008538 <SD_WideBus_Enable>
 8008100:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008106:	6a3b      	ldr	r3, [r7, #32]
 8008108:	431a      	orrs	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	639a      	str	r2, [r3, #56]	; 0x38
 800810e:	e01a      	b.n	8008146 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d10a      	bne.n	800812c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 fa59 	bl	80085ce <SD_WideBus_Disable>
 800811c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008122:	6a3b      	ldr	r3, [r7, #32]
 8008124:	431a      	orrs	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	639a      	str	r2, [r3, #56]	; 0x38
 800812a:	e00c      	b.n	8008146 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008130:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	639a      	str	r2, [r3, #56]	; 0x38
 8008138:	e005      	b.n	8008146 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00b      	beq.n	8008166 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a26      	ldr	r2, [pc, #152]	; (80081ec <HAL_SD_ConfigWideBusOperation+0x130>)
 8008154:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2201      	movs	r2, #1
 800815a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008164:	e01f      	b.n	80081a6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	695b      	ldr	r3, [r3, #20]
 8008180:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	699b      	ldr	r3, [r3, #24]
 8008186:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681d      	ldr	r5, [r3, #0]
 800818c:	466c      	mov	r4, sp
 800818e:	f107 0314 	add.w	r3, r7, #20
 8008192:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008196:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800819a:	f107 0308 	add.w	r3, r7, #8
 800819e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80081a0:	4628      	mov	r0, r5
 80081a2:	f001 fa2b 	bl	80095fc <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80081ae:	4618      	mov	r0, r3
 80081b0:	f001 faff 	bl	80097b2 <SDMMC_CmdBlockLength>
 80081b4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081b6:	6a3b      	ldr	r3, [r7, #32]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00c      	beq.n	80081d6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a0a      	ldr	r2, [pc, #40]	; (80081ec <HAL_SD_ConfigWideBusOperation+0x130>)
 80081c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081c8:	6a3b      	ldr	r3, [r7, #32]
 80081ca:	431a      	orrs	r2, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2201      	movs	r2, #1
 80081da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80081de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3728      	adds	r7, #40	; 0x28
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bdb0      	pop	{r4, r5, r7, pc}
 80081ea:	bf00      	nop
 80081ec:	004005ff 	.word	0x004005ff

080081f0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b086      	sub	sp, #24
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80081f8:	2300      	movs	r3, #0
 80081fa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80081fc:	f107 030c 	add.w	r3, r7, #12
 8008200:	4619      	mov	r1, r3
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 f970 	bl	80084e8 <SD_SendStatus>
 8008208:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d005      	beq.n	800821c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	431a      	orrs	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	0a5b      	lsrs	r3, r3, #9
 8008220:	f003 030f 	and.w	r3, r3, #15
 8008224:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008226:	693b      	ldr	r3, [r7, #16]
}
 8008228:	4618      	mov	r0, r3
 800822a:	3718      	adds	r7, #24
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008230:	b5b0      	push	{r4, r5, r7, lr}
 8008232:	b094      	sub	sp, #80	; 0x50
 8008234:	af04      	add	r7, sp, #16
 8008236:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008238:	2301      	movs	r3, #1
 800823a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4618      	mov	r0, r3
 8008242:	f001 fa32 	bl	80096aa <SDIO_GetPowerState>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d102      	bne.n	8008252 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800824c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008250:	e0b8      	b.n	80083c4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008256:	2b03      	cmp	r3, #3
 8008258:	d02f      	beq.n	80082ba <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4618      	mov	r0, r3
 8008260:	f001 fc5c 	bl	8009b1c <SDMMC_CmdSendCID>
 8008264:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008268:	2b00      	cmp	r3, #0
 800826a:	d001      	beq.n	8008270 <SD_InitCard+0x40>
    {
      return errorstate;
 800826c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800826e:	e0a9      	b.n	80083c4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2100      	movs	r1, #0
 8008276:	4618      	mov	r0, r3
 8008278:	f001 fa5c 	bl	8009734 <SDIO_GetResponse>
 800827c:	4602      	mov	r2, r0
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2104      	movs	r1, #4
 8008288:	4618      	mov	r0, r3
 800828a:	f001 fa53 	bl	8009734 <SDIO_GetResponse>
 800828e:	4602      	mov	r2, r0
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2108      	movs	r1, #8
 800829a:	4618      	mov	r0, r3
 800829c:	f001 fa4a 	bl	8009734 <SDIO_GetResponse>
 80082a0:	4602      	mov	r2, r0
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	210c      	movs	r1, #12
 80082ac:	4618      	mov	r0, r3
 80082ae:	f001 fa41 	bl	8009734 <SDIO_GetResponse>
 80082b2:	4602      	mov	r2, r0
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082be:	2b03      	cmp	r3, #3
 80082c0:	d00d      	beq.n	80082de <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f107 020e 	add.w	r2, r7, #14
 80082ca:	4611      	mov	r1, r2
 80082cc:	4618      	mov	r0, r3
 80082ce:	f001 fc62 	bl	8009b96 <SDMMC_CmdSetRelAdd>
 80082d2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80082d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d001      	beq.n	80082de <SD_InitCard+0xae>
    {
      return errorstate;
 80082da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082dc:	e072      	b.n	80083c4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082e2:	2b03      	cmp	r3, #3
 80082e4:	d036      	beq.n	8008354 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80082e6:	89fb      	ldrh	r3, [r7, #14]
 80082e8:	461a      	mov	r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082f6:	041b      	lsls	r3, r3, #16
 80082f8:	4619      	mov	r1, r3
 80082fa:	4610      	mov	r0, r2
 80082fc:	f001 fc2c 	bl	8009b58 <SDMMC_CmdSendCSD>
 8008300:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008304:	2b00      	cmp	r3, #0
 8008306:	d001      	beq.n	800830c <SD_InitCard+0xdc>
    {
      return errorstate;
 8008308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800830a:	e05b      	b.n	80083c4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2100      	movs	r1, #0
 8008312:	4618      	mov	r0, r3
 8008314:	f001 fa0e 	bl	8009734 <SDIO_GetResponse>
 8008318:	4602      	mov	r2, r0
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2104      	movs	r1, #4
 8008324:	4618      	mov	r0, r3
 8008326:	f001 fa05 	bl	8009734 <SDIO_GetResponse>
 800832a:	4602      	mov	r2, r0
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2108      	movs	r1, #8
 8008336:	4618      	mov	r0, r3
 8008338:	f001 f9fc 	bl	8009734 <SDIO_GetResponse>
 800833c:	4602      	mov	r2, r0
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	210c      	movs	r1, #12
 8008348:	4618      	mov	r0, r3
 800834a:	f001 f9f3 	bl	8009734 <SDIO_GetResponse>
 800834e:	4602      	mov	r2, r0
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2104      	movs	r1, #4
 800835a:	4618      	mov	r0, r3
 800835c:	f001 f9ea 	bl	8009734 <SDIO_GetResponse>
 8008360:	4603      	mov	r3, r0
 8008362:	0d1a      	lsrs	r2, r3, #20
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008368:	f107 0310 	add.w	r3, r7, #16
 800836c:	4619      	mov	r1, r3
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f7ff fcd4 	bl	8007d1c <HAL_SD_GetCardCSD>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d002      	beq.n	8008380 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800837a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800837e:	e021      	b.n	80083c4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6819      	ldr	r1, [r3, #0]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008388:	041b      	lsls	r3, r3, #16
 800838a:	2200      	movs	r2, #0
 800838c:	461c      	mov	r4, r3
 800838e:	4615      	mov	r5, r2
 8008390:	4622      	mov	r2, r4
 8008392:	462b      	mov	r3, r5
 8008394:	4608      	mov	r0, r1
 8008396:	f001 fad9 	bl	800994c <SDMMC_CmdSelDesel>
 800839a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800839c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d001      	beq.n	80083a6 <SD_InitCard+0x176>
  {
    return errorstate;
 80083a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083a4:	e00e      	b.n	80083c4 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681d      	ldr	r5, [r3, #0]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	466c      	mov	r4, sp
 80083ae:	f103 0210 	add.w	r2, r3, #16
 80083b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80083b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80083b8:	3304      	adds	r3, #4
 80083ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80083bc:	4628      	mov	r0, r5
 80083be:	f001 f91d 	bl	80095fc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3740      	adds	r7, #64	; 0x40
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bdb0      	pop	{r4, r5, r7, pc}

080083cc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b086      	sub	sp, #24
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083d4:	2300      	movs	r3, #0
 80083d6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80083d8:	2300      	movs	r3, #0
 80083da:	617b      	str	r3, [r7, #20]
 80083dc:	2300      	movs	r3, #0
 80083de:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4618      	mov	r0, r3
 80083e6:	f001 fad4 	bl	8009992 <SDMMC_CmdGoIdleState>
 80083ea:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d001      	beq.n	80083f6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	e072      	b.n	80084dc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4618      	mov	r0, r3
 80083fc:	f001 fae7 	bl	80099ce <SDMMC_CmdOperCond>
 8008400:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d00d      	beq.n	8008424 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4618      	mov	r0, r3
 8008414:	f001 fabd 	bl	8009992 <SDMMC_CmdGoIdleState>
 8008418:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d004      	beq.n	800842a <SD_PowerON+0x5e>
    {
      return errorstate;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	e05b      	b.n	80084dc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800842e:	2b01      	cmp	r3, #1
 8008430:	d137      	bne.n	80084a2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2100      	movs	r1, #0
 8008438:	4618      	mov	r0, r3
 800843a:	f001 fae7 	bl	8009a0c <SDMMC_CmdAppCommand>
 800843e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d02d      	beq.n	80084a2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008446:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800844a:	e047      	b.n	80084dc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2100      	movs	r1, #0
 8008452:	4618      	mov	r0, r3
 8008454:	f001 fada 	bl	8009a0c <SDMMC_CmdAppCommand>
 8008458:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d001      	beq.n	8008464 <SD_PowerON+0x98>
    {
      return errorstate;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	e03b      	b.n	80084dc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	491e      	ldr	r1, [pc, #120]	; (80084e4 <SD_PowerON+0x118>)
 800846a:	4618      	mov	r0, r3
 800846c:	f001 faf0 	bl	8009a50 <SDMMC_CmdAppOperCommand>
 8008470:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d002      	beq.n	800847e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008478:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800847c:	e02e      	b.n	80084dc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2100      	movs	r1, #0
 8008484:	4618      	mov	r0, r3
 8008486:	f001 f955 	bl	8009734 <SDIO_GetResponse>
 800848a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	0fdb      	lsrs	r3, r3, #31
 8008490:	2b01      	cmp	r3, #1
 8008492:	d101      	bne.n	8008498 <SD_PowerON+0xcc>
 8008494:	2301      	movs	r3, #1
 8008496:	e000      	b.n	800849a <SD_PowerON+0xce>
 8008498:	2300      	movs	r3, #0
 800849a:	613b      	str	r3, [r7, #16]

    count++;
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	3301      	adds	r3, #1
 80084a0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d802      	bhi.n	80084b2 <SD_PowerON+0xe6>
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d0cc      	beq.n	800844c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d902      	bls.n	80084c2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80084bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80084c0:	e00c      	b.n	80084dc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d003      	beq.n	80084d4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	645a      	str	r2, [r3, #68]	; 0x44
 80084d2:	e002      	b.n	80084da <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2200      	movs	r2, #0
 80084d8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80084da:	2300      	movs	r3, #0
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3718      	adds	r7, #24
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	c1100000 	.word	0xc1100000

080084e8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d102      	bne.n	80084fe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80084f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80084fc:	e018      	b.n	8008530 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008506:	041b      	lsls	r3, r3, #16
 8008508:	4619      	mov	r1, r3
 800850a:	4610      	mov	r0, r2
 800850c:	f001 fb64 	bl	8009bd8 <SDMMC_CmdSendStatus>
 8008510:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d001      	beq.n	800851c <SD_SendStatus+0x34>
  {
    return errorstate;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	e009      	b.n	8008530 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2100      	movs	r1, #0
 8008522:	4618      	mov	r0, r3
 8008524:	f001 f906 	bl	8009734 <SDIO_GetResponse>
 8008528:	4602      	mov	r2, r0
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800852e:	2300      	movs	r3, #0
}
 8008530:	4618      	mov	r0, r3
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b086      	sub	sp, #24
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008540:	2300      	movs	r3, #0
 8008542:	60fb      	str	r3, [r7, #12]
 8008544:	2300      	movs	r3, #0
 8008546:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2100      	movs	r1, #0
 800854e:	4618      	mov	r0, r3
 8008550:	f001 f8f0 	bl	8009734 <SDIO_GetResponse>
 8008554:	4603      	mov	r3, r0
 8008556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800855a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800855e:	d102      	bne.n	8008566 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008560:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008564:	e02f      	b.n	80085c6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008566:	f107 030c 	add.w	r3, r7, #12
 800856a:	4619      	mov	r1, r3
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 f879 	bl	8008664 <SD_FindSCR>
 8008572:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d001      	beq.n	800857e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	e023      	b.n	80085c6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008584:	2b00      	cmp	r3, #0
 8008586:	d01c      	beq.n	80085c2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008590:	041b      	lsls	r3, r3, #16
 8008592:	4619      	mov	r1, r3
 8008594:	4610      	mov	r0, r2
 8008596:	f001 fa39 	bl	8009a0c <SDMMC_CmdAppCommand>
 800859a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d001      	beq.n	80085a6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	e00f      	b.n	80085c6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2102      	movs	r1, #2
 80085ac:	4618      	mov	r0, r3
 80085ae:	f001 fa72 	bl	8009a96 <SDMMC_CmdBusWidth>
 80085b2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d001      	beq.n	80085be <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	e003      	b.n	80085c6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80085be:	2300      	movs	r3, #0
 80085c0:	e001      	b.n	80085c6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80085c2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3718      	adds	r7, #24
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b086      	sub	sp, #24
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80085d6:	2300      	movs	r3, #0
 80085d8:	60fb      	str	r3, [r7, #12]
 80085da:	2300      	movs	r3, #0
 80085dc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2100      	movs	r1, #0
 80085e4:	4618      	mov	r0, r3
 80085e6:	f001 f8a5 	bl	8009734 <SDIO_GetResponse>
 80085ea:	4603      	mov	r3, r0
 80085ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085f4:	d102      	bne.n	80085fc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80085f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80085fa:	e02f      	b.n	800865c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80085fc:	f107 030c 	add.w	r3, r7, #12
 8008600:	4619      	mov	r1, r3
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f82e 	bl	8008664 <SD_FindSCR>
 8008608:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d001      	beq.n	8008614 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	e023      	b.n	800865c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800861a:	2b00      	cmp	r3, #0
 800861c:	d01c      	beq.n	8008658 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008626:	041b      	lsls	r3, r3, #16
 8008628:	4619      	mov	r1, r3
 800862a:	4610      	mov	r0, r2
 800862c:	f001 f9ee 	bl	8009a0c <SDMMC_CmdAppCommand>
 8008630:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d001      	beq.n	800863c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	e00f      	b.n	800865c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2100      	movs	r1, #0
 8008642:	4618      	mov	r0, r3
 8008644:	f001 fa27 	bl	8009a96 <SDMMC_CmdBusWidth>
 8008648:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d001      	beq.n	8008654 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	e003      	b.n	800865c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008654:	2300      	movs	r3, #0
 8008656:	e001      	b.n	800865c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008658:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800865c:	4618      	mov	r0, r3
 800865e:	3718      	adds	r7, #24
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008664:	b590      	push	{r4, r7, lr}
 8008666:	b08f      	sub	sp, #60	; 0x3c
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800866e:	f7fc f8b7 	bl	80047e0 <HAL_GetTick>
 8008672:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008674:	2300      	movs	r3, #0
 8008676:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008678:	2300      	movs	r3, #0
 800867a:	60bb      	str	r3, [r7, #8]
 800867c:	2300      	movs	r3, #0
 800867e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2108      	movs	r1, #8
 800868a:	4618      	mov	r0, r3
 800868c:	f001 f891 	bl	80097b2 <SDMMC_CmdBlockLength>
 8008690:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008694:	2b00      	cmp	r3, #0
 8008696:	d001      	beq.n	800869c <SD_FindSCR+0x38>
  {
    return errorstate;
 8008698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800869a:	e0b2      	b.n	8008802 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086a4:	041b      	lsls	r3, r3, #16
 80086a6:	4619      	mov	r1, r3
 80086a8:	4610      	mov	r0, r2
 80086aa:	f001 f9af 	bl	8009a0c <SDMMC_CmdAppCommand>
 80086ae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80086b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d001      	beq.n	80086ba <SD_FindSCR+0x56>
  {
    return errorstate;
 80086b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b8:	e0a3      	b.n	8008802 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80086ba:	f04f 33ff 	mov.w	r3, #4294967295
 80086be:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80086c0:	2308      	movs	r3, #8
 80086c2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80086c4:	2330      	movs	r3, #48	; 0x30
 80086c6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80086c8:	2302      	movs	r3, #2
 80086ca:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80086cc:	2300      	movs	r3, #0
 80086ce:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80086d0:	2301      	movs	r3, #1
 80086d2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f107 0210 	add.w	r2, r7, #16
 80086dc:	4611      	mov	r1, r2
 80086de:	4618      	mov	r0, r3
 80086e0:	f001 f83b 	bl	800975a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4618      	mov	r0, r3
 80086ea:	f001 f9f6 	bl	8009ada <SDMMC_CmdSendSCR>
 80086ee:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80086f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d02a      	beq.n	800874c <SD_FindSCR+0xe8>
  {
    return errorstate;
 80086f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f8:	e083      	b.n	8008802 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00f      	beq.n	8008728 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6819      	ldr	r1, [r3, #0]
 800870c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	f107 0208 	add.w	r2, r7, #8
 8008714:	18d4      	adds	r4, r2, r3
 8008716:	4608      	mov	r0, r1
 8008718:	f000 ff9b 	bl	8009652 <SDIO_ReadFIFO>
 800871c:	4603      	mov	r3, r0
 800871e:	6023      	str	r3, [r4, #0]
      index++;
 8008720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008722:	3301      	adds	r3, #1
 8008724:	637b      	str	r3, [r7, #52]	; 0x34
 8008726:	e006      	b.n	8008736 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800872e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008732:	2b00      	cmp	r3, #0
 8008734:	d012      	beq.n	800875c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008736:	f7fc f853 	bl	80047e0 <HAL_GetTick>
 800873a:	4602      	mov	r2, r0
 800873c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873e:	1ad3      	subs	r3, r2, r3
 8008740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008744:	d102      	bne.n	800874c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008746:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800874a:	e05a      	b.n	8008802 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008752:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8008756:	2b00      	cmp	r3, #0
 8008758:	d0cf      	beq.n	80086fa <SD_FindSCR+0x96>
 800875a:	e000      	b.n	800875e <SD_FindSCR+0xfa>
      break;
 800875c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008764:	f003 0308 	and.w	r3, r3, #8
 8008768:	2b00      	cmp	r3, #0
 800876a:	d005      	beq.n	8008778 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2208      	movs	r2, #8
 8008772:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008774:	2308      	movs	r3, #8
 8008776:	e044      	b.n	8008802 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800877e:	f003 0302 	and.w	r3, r3, #2
 8008782:	2b00      	cmp	r3, #0
 8008784:	d005      	beq.n	8008792 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2202      	movs	r2, #2
 800878c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800878e:	2302      	movs	r3, #2
 8008790:	e037      	b.n	8008802 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008798:	f003 0320 	and.w	r3, r3, #32
 800879c:	2b00      	cmp	r3, #0
 800879e:	d005      	beq.n	80087ac <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2220      	movs	r2, #32
 80087a6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80087a8:	2320      	movs	r3, #32
 80087aa:	e02a      	b.n	8008802 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f240 523a 	movw	r2, #1338	; 0x53a
 80087b4:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	061a      	lsls	r2, r3, #24
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	021b      	lsls	r3, r3, #8
 80087be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80087c2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	0a1b      	lsrs	r3, r3, #8
 80087c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80087cc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	0e1b      	lsrs	r3, r3, #24
 80087d2:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80087d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d6:	601a      	str	r2, [r3, #0]
    scr++;
 80087d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087da:	3304      	adds	r3, #4
 80087dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	061a      	lsls	r2, r3, #24
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	021b      	lsls	r3, r3, #8
 80087e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80087ea:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	0a1b      	lsrs	r3, r3, #8
 80087f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80087f4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	0e1b      	lsrs	r3, r3, #24
 80087fa:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80087fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087fe:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008800:	2300      	movs	r3, #0
}
 8008802:	4618      	mov	r0, r3
 8008804:	373c      	adds	r7, #60	; 0x3c
 8008806:	46bd      	mov	sp, r7
 8008808:	bd90      	pop	{r4, r7, pc}

0800880a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800880a:	b580      	push	{r7, lr}
 800880c:	b082      	sub	sp, #8
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d101      	bne.n	800881c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	e07b      	b.n	8008914 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008820:	2b00      	cmp	r3, #0
 8008822:	d108      	bne.n	8008836 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800882c:	d009      	beq.n	8008842 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	61da      	str	r2, [r3, #28]
 8008834:	e005      	b.n	8008842 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800884e:	b2db      	uxtb	r3, r3
 8008850:	2b00      	cmp	r3, #0
 8008852:	d106      	bne.n	8008862 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f7fb fc57 	bl	8004110 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2202      	movs	r2, #2
 8008866:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008878:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800888a:	431a      	orrs	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008894:	431a      	orrs	r2, r3
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	f003 0302 	and.w	r3, r3, #2
 800889e:	431a      	orrs	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	695b      	ldr	r3, [r3, #20]
 80088a4:	f003 0301 	and.w	r3, r3, #1
 80088a8:	431a      	orrs	r2, r3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	699b      	ldr	r3, [r3, #24]
 80088ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80088b2:	431a      	orrs	r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	69db      	ldr	r3, [r3, #28]
 80088b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80088bc:	431a      	orrs	r2, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6a1b      	ldr	r3, [r3, #32]
 80088c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088c6:	ea42 0103 	orr.w	r1, r2, r3
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	430a      	orrs	r2, r1
 80088d8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	699b      	ldr	r3, [r3, #24]
 80088de:	0c1b      	lsrs	r3, r3, #16
 80088e0:	f003 0104 	and.w	r1, r3, #4
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e8:	f003 0210 	and.w	r2, r3, #16
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	430a      	orrs	r2, r1
 80088f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	69da      	ldr	r2, [r3, #28]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008902:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2201      	movs	r2, #1
 800890e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008912:	2300      	movs	r3, #0
}
 8008914:	4618      	mov	r0, r3
 8008916:	3708      	adds	r7, #8
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d101      	bne.n	800892e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800892a:	2301      	movs	r3, #1
 800892c:	e041      	b.n	80089b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008934:	b2db      	uxtb	r3, r3
 8008936:	2b00      	cmp	r3, #0
 8008938:	d106      	bne.n	8008948 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 f839 	bl	80089ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2202      	movs	r2, #2
 800894c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	3304      	adds	r3, #4
 8008958:	4619      	mov	r1, r3
 800895a:	4610      	mov	r0, r2
 800895c:	f000 f9d8 	bl	8008d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2201      	movs	r2, #1
 8008974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2201      	movs	r2, #1
 800897c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2201      	movs	r2, #1
 800898c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2201      	movs	r2, #1
 8008994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2201      	movs	r2, #1
 800899c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2201      	movs	r2, #1
 80089a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2201      	movs	r2, #1
 80089ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3708      	adds	r7, #8
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80089ba:	b480      	push	{r7}
 80089bc:	b083      	sub	sp, #12
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80089c2:	bf00      	nop
 80089c4:	370c      	adds	r7, #12
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
	...

080089d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d001      	beq.n	80089e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	e04e      	b.n	8008a86 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2202      	movs	r2, #2
 80089ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	68da      	ldr	r2, [r3, #12]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f042 0201 	orr.w	r2, r2, #1
 80089fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a23      	ldr	r2, [pc, #140]	; (8008a94 <HAL_TIM_Base_Start_IT+0xc4>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d022      	beq.n	8008a50 <HAL_TIM_Base_Start_IT+0x80>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a12:	d01d      	beq.n	8008a50 <HAL_TIM_Base_Start_IT+0x80>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a1f      	ldr	r2, [pc, #124]	; (8008a98 <HAL_TIM_Base_Start_IT+0xc8>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d018      	beq.n	8008a50 <HAL_TIM_Base_Start_IT+0x80>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a1e      	ldr	r2, [pc, #120]	; (8008a9c <HAL_TIM_Base_Start_IT+0xcc>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d013      	beq.n	8008a50 <HAL_TIM_Base_Start_IT+0x80>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a1c      	ldr	r2, [pc, #112]	; (8008aa0 <HAL_TIM_Base_Start_IT+0xd0>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d00e      	beq.n	8008a50 <HAL_TIM_Base_Start_IT+0x80>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a1b      	ldr	r2, [pc, #108]	; (8008aa4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d009      	beq.n	8008a50 <HAL_TIM_Base_Start_IT+0x80>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a19      	ldr	r2, [pc, #100]	; (8008aa8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d004      	beq.n	8008a50 <HAL_TIM_Base_Start_IT+0x80>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a18      	ldr	r2, [pc, #96]	; (8008aac <HAL_TIM_Base_Start_IT+0xdc>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d111      	bne.n	8008a74 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	f003 0307 	and.w	r3, r3, #7
 8008a5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2b06      	cmp	r3, #6
 8008a60:	d010      	beq.n	8008a84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f042 0201 	orr.w	r2, r2, #1
 8008a70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a72:	e007      	b.n	8008a84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f042 0201 	orr.w	r2, r2, #1
 8008a82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a84:	2300      	movs	r3, #0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3714      	adds	r7, #20
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	40010000 	.word	0x40010000
 8008a98:	40000400 	.word	0x40000400
 8008a9c:	40000800 	.word	0x40000800
 8008aa0:	40000c00 	.word	0x40000c00
 8008aa4:	40010400 	.word	0x40010400
 8008aa8:	40014000 	.word	0x40014000
 8008aac:	40001800 	.word	0x40001800

08008ab0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	f003 0302 	and.w	r3, r3, #2
 8008ac2:	2b02      	cmp	r3, #2
 8008ac4:	d122      	bne.n	8008b0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	f003 0302 	and.w	r3, r3, #2
 8008ad0:	2b02      	cmp	r3, #2
 8008ad2:	d11b      	bne.n	8008b0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f06f 0202 	mvn.w	r2, #2
 8008adc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	699b      	ldr	r3, [r3, #24]
 8008aea:	f003 0303 	and.w	r3, r3, #3
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d003      	beq.n	8008afa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 f8ee 	bl	8008cd4 <HAL_TIM_IC_CaptureCallback>
 8008af8:	e005      	b.n	8008b06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 f8e0 	bl	8008cc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 f8f1 	bl	8008ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	691b      	ldr	r3, [r3, #16]
 8008b12:	f003 0304 	and.w	r3, r3, #4
 8008b16:	2b04      	cmp	r3, #4
 8008b18:	d122      	bne.n	8008b60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	f003 0304 	and.w	r3, r3, #4
 8008b24:	2b04      	cmp	r3, #4
 8008b26:	d11b      	bne.n	8008b60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f06f 0204 	mvn.w	r2, #4
 8008b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2202      	movs	r2, #2
 8008b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	699b      	ldr	r3, [r3, #24]
 8008b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d003      	beq.n	8008b4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 f8c4 	bl	8008cd4 <HAL_TIM_IC_CaptureCallback>
 8008b4c:	e005      	b.n	8008b5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 f8b6 	bl	8008cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 f8c7 	bl	8008ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	691b      	ldr	r3, [r3, #16]
 8008b66:	f003 0308 	and.w	r3, r3, #8
 8008b6a:	2b08      	cmp	r3, #8
 8008b6c:	d122      	bne.n	8008bb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	f003 0308 	and.w	r3, r3, #8
 8008b78:	2b08      	cmp	r3, #8
 8008b7a:	d11b      	bne.n	8008bb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f06f 0208 	mvn.w	r2, #8
 8008b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2204      	movs	r2, #4
 8008b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	69db      	ldr	r3, [r3, #28]
 8008b92:	f003 0303 	and.w	r3, r3, #3
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d003      	beq.n	8008ba2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 f89a 	bl	8008cd4 <HAL_TIM_IC_CaptureCallback>
 8008ba0:	e005      	b.n	8008bae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 f88c 	bl	8008cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 f89d 	bl	8008ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	691b      	ldr	r3, [r3, #16]
 8008bba:	f003 0310 	and.w	r3, r3, #16
 8008bbe:	2b10      	cmp	r3, #16
 8008bc0:	d122      	bne.n	8008c08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	f003 0310 	and.w	r3, r3, #16
 8008bcc:	2b10      	cmp	r3, #16
 8008bce:	d11b      	bne.n	8008c08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f06f 0210 	mvn.w	r2, #16
 8008bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2208      	movs	r2, #8
 8008bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	69db      	ldr	r3, [r3, #28]
 8008be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d003      	beq.n	8008bf6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 f870 	bl	8008cd4 <HAL_TIM_IC_CaptureCallback>
 8008bf4:	e005      	b.n	8008c02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 f862 	bl	8008cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 f873 	bl	8008ce8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	691b      	ldr	r3, [r3, #16]
 8008c0e:	f003 0301 	and.w	r3, r3, #1
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d10e      	bne.n	8008c34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	f003 0301 	and.w	r3, r3, #1
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d107      	bne.n	8008c34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f06f 0201 	mvn.w	r2, #1
 8008c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f7fb f94a 	bl	8003ec8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	691b      	ldr	r3, [r3, #16]
 8008c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c3e:	2b80      	cmp	r3, #128	; 0x80
 8008c40:	d10e      	bne.n	8008c60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c4c:	2b80      	cmp	r3, #128	; 0x80
 8008c4e:	d107      	bne.n	8008c60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f902 	bl	8008e64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	691b      	ldr	r3, [r3, #16]
 8008c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c6a:	2b40      	cmp	r3, #64	; 0x40
 8008c6c:	d10e      	bne.n	8008c8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c78:	2b40      	cmp	r3, #64	; 0x40
 8008c7a:	d107      	bne.n	8008c8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 f838 	bl	8008cfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	691b      	ldr	r3, [r3, #16]
 8008c92:	f003 0320 	and.w	r3, r3, #32
 8008c96:	2b20      	cmp	r3, #32
 8008c98:	d10e      	bne.n	8008cb8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	f003 0320 	and.w	r3, r3, #32
 8008ca4:	2b20      	cmp	r3, #32
 8008ca6:	d107      	bne.n	8008cb8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f06f 0220 	mvn.w	r2, #32
 8008cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 f8cc 	bl	8008e50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008cb8:	bf00      	nop
 8008cba:	3708      	adds	r7, #8
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008cc8:	bf00      	nop
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008cdc:	bf00      	nop
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008cf0:	bf00      	nop
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d04:	bf00      	nop
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b085      	sub	sp, #20
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4a40      	ldr	r2, [pc, #256]	; (8008e24 <TIM_Base_SetConfig+0x114>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d013      	beq.n	8008d50 <TIM_Base_SetConfig+0x40>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d2e:	d00f      	beq.n	8008d50 <TIM_Base_SetConfig+0x40>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4a3d      	ldr	r2, [pc, #244]	; (8008e28 <TIM_Base_SetConfig+0x118>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d00b      	beq.n	8008d50 <TIM_Base_SetConfig+0x40>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4a3c      	ldr	r2, [pc, #240]	; (8008e2c <TIM_Base_SetConfig+0x11c>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d007      	beq.n	8008d50 <TIM_Base_SetConfig+0x40>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4a3b      	ldr	r2, [pc, #236]	; (8008e30 <TIM_Base_SetConfig+0x120>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d003      	beq.n	8008d50 <TIM_Base_SetConfig+0x40>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4a3a      	ldr	r2, [pc, #232]	; (8008e34 <TIM_Base_SetConfig+0x124>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d108      	bne.n	8008d62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	68fa      	ldr	r2, [r7, #12]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a2f      	ldr	r2, [pc, #188]	; (8008e24 <TIM_Base_SetConfig+0x114>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d02b      	beq.n	8008dc2 <TIM_Base_SetConfig+0xb2>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d70:	d027      	beq.n	8008dc2 <TIM_Base_SetConfig+0xb2>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4a2c      	ldr	r2, [pc, #176]	; (8008e28 <TIM_Base_SetConfig+0x118>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d023      	beq.n	8008dc2 <TIM_Base_SetConfig+0xb2>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	4a2b      	ldr	r2, [pc, #172]	; (8008e2c <TIM_Base_SetConfig+0x11c>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d01f      	beq.n	8008dc2 <TIM_Base_SetConfig+0xb2>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	4a2a      	ldr	r2, [pc, #168]	; (8008e30 <TIM_Base_SetConfig+0x120>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d01b      	beq.n	8008dc2 <TIM_Base_SetConfig+0xb2>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4a29      	ldr	r2, [pc, #164]	; (8008e34 <TIM_Base_SetConfig+0x124>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d017      	beq.n	8008dc2 <TIM_Base_SetConfig+0xb2>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4a28      	ldr	r2, [pc, #160]	; (8008e38 <TIM_Base_SetConfig+0x128>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d013      	beq.n	8008dc2 <TIM_Base_SetConfig+0xb2>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4a27      	ldr	r2, [pc, #156]	; (8008e3c <TIM_Base_SetConfig+0x12c>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d00f      	beq.n	8008dc2 <TIM_Base_SetConfig+0xb2>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	4a26      	ldr	r2, [pc, #152]	; (8008e40 <TIM_Base_SetConfig+0x130>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d00b      	beq.n	8008dc2 <TIM_Base_SetConfig+0xb2>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4a25      	ldr	r2, [pc, #148]	; (8008e44 <TIM_Base_SetConfig+0x134>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d007      	beq.n	8008dc2 <TIM_Base_SetConfig+0xb2>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4a24      	ldr	r2, [pc, #144]	; (8008e48 <TIM_Base_SetConfig+0x138>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d003      	beq.n	8008dc2 <TIM_Base_SetConfig+0xb2>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4a23      	ldr	r2, [pc, #140]	; (8008e4c <TIM_Base_SetConfig+0x13c>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d108      	bne.n	8008dd4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	68fa      	ldr	r2, [r7, #12]
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	695b      	ldr	r3, [r3, #20]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	68fa      	ldr	r2, [r7, #12]
 8008de6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	689a      	ldr	r2, [r3, #8]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4a0a      	ldr	r2, [pc, #40]	; (8008e24 <TIM_Base_SetConfig+0x114>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d003      	beq.n	8008e08 <TIM_Base_SetConfig+0xf8>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	4a0c      	ldr	r2, [pc, #48]	; (8008e34 <TIM_Base_SetConfig+0x124>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d103      	bne.n	8008e10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	691a      	ldr	r2, [r3, #16]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2201      	movs	r2, #1
 8008e14:	615a      	str	r2, [r3, #20]
}
 8008e16:	bf00      	nop
 8008e18:	3714      	adds	r7, #20
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop
 8008e24:	40010000 	.word	0x40010000
 8008e28:	40000400 	.word	0x40000400
 8008e2c:	40000800 	.word	0x40000800
 8008e30:	40000c00 	.word	0x40000c00
 8008e34:	40010400 	.word	0x40010400
 8008e38:	40014000 	.word	0x40014000
 8008e3c:	40014400 	.word	0x40014400
 8008e40:	40014800 	.word	0x40014800
 8008e44:	40001800 	.word	0x40001800
 8008e48:	40001c00 	.word	0x40001c00
 8008e4c:	40002000 	.word	0x40002000

08008e50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e58:	bf00      	nop
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e6c:	bf00      	nop
 8008e6e:	370c      	adds	r7, #12
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d101      	bne.n	8008e8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e86:	2301      	movs	r3, #1
 8008e88:	e03f      	b.n	8008f0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e90:	b2db      	uxtb	r3, r3
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d106      	bne.n	8008ea4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f7fb f9b4 	bl	800420c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2224      	movs	r2, #36	; 0x24
 8008ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	68da      	ldr	r2, [r3, #12]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008eba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 f929 	bl	8009114 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	691a      	ldr	r2, [r3, #16]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ed0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	695a      	ldr	r2, [r3, #20]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ee0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	68da      	ldr	r2, [r3, #12]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ef0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2220      	movs	r2, #32
 8008efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2220      	movs	r2, #32
 8008f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3708      	adds	r7, #8
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b08a      	sub	sp, #40	; 0x28
 8008f16:	af02      	add	r7, sp, #8
 8008f18:	60f8      	str	r0, [r7, #12]
 8008f1a:	60b9      	str	r1, [r7, #8]
 8008f1c:	603b      	str	r3, [r7, #0]
 8008f1e:	4613      	mov	r3, r2
 8008f20:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008f22:	2300      	movs	r3, #0
 8008f24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	2b20      	cmp	r3, #32
 8008f30:	d17c      	bne.n	800902c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d002      	beq.n	8008f3e <HAL_UART_Transmit+0x2c>
 8008f38:	88fb      	ldrh	r3, [r7, #6]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d101      	bne.n	8008f42 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e075      	b.n	800902e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d101      	bne.n	8008f50 <HAL_UART_Transmit+0x3e>
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	e06e      	b.n	800902e <HAL_UART_Transmit+0x11c>
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2221      	movs	r2, #33	; 0x21
 8008f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f66:	f7fb fc3b 	bl	80047e0 <HAL_GetTick>
 8008f6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	88fa      	ldrh	r2, [r7, #6]
 8008f70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	88fa      	ldrh	r2, [r7, #6]
 8008f76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f80:	d108      	bne.n	8008f94 <HAL_UART_Transmit+0x82>
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	691b      	ldr	r3, [r3, #16]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d104      	bne.n	8008f94 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	61bb      	str	r3, [r7, #24]
 8008f92:	e003      	b.n	8008f9c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008fa4:	e02a      	b.n	8008ffc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	9300      	str	r3, [sp, #0]
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	2200      	movs	r2, #0
 8008fae:	2180      	movs	r1, #128	; 0x80
 8008fb0:	68f8      	ldr	r0, [r7, #12]
 8008fb2:	f000 f840 	bl	8009036 <UART_WaitOnFlagUntilTimeout>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d001      	beq.n	8008fc0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008fbc:	2303      	movs	r3, #3
 8008fbe:	e036      	b.n	800902e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d10b      	bne.n	8008fde <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	881b      	ldrh	r3, [r3, #0]
 8008fca:	461a      	mov	r2, r3
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008fd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	3302      	adds	r3, #2
 8008fda:	61bb      	str	r3, [r7, #24]
 8008fdc:	e007      	b.n	8008fee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	781a      	ldrb	r2, [r3, #0]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	3301      	adds	r3, #1
 8008fec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	3b01      	subs	r3, #1
 8008ff6:	b29a      	uxth	r2, r3
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009000:	b29b      	uxth	r3, r3
 8009002:	2b00      	cmp	r3, #0
 8009004:	d1cf      	bne.n	8008fa6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	9300      	str	r3, [sp, #0]
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	2200      	movs	r2, #0
 800900e:	2140      	movs	r1, #64	; 0x40
 8009010:	68f8      	ldr	r0, [r7, #12]
 8009012:	f000 f810 	bl	8009036 <UART_WaitOnFlagUntilTimeout>
 8009016:	4603      	mov	r3, r0
 8009018:	2b00      	cmp	r3, #0
 800901a:	d001      	beq.n	8009020 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800901c:	2303      	movs	r3, #3
 800901e:	e006      	b.n	800902e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2220      	movs	r2, #32
 8009024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009028:	2300      	movs	r3, #0
 800902a:	e000      	b.n	800902e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800902c:	2302      	movs	r3, #2
  }
}
 800902e:	4618      	mov	r0, r3
 8009030:	3720      	adds	r7, #32
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b090      	sub	sp, #64	; 0x40
 800903a:	af00      	add	r7, sp, #0
 800903c:	60f8      	str	r0, [r7, #12]
 800903e:	60b9      	str	r1, [r7, #8]
 8009040:	603b      	str	r3, [r7, #0]
 8009042:	4613      	mov	r3, r2
 8009044:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009046:	e050      	b.n	80090ea <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800904a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800904e:	d04c      	beq.n	80090ea <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009052:	2b00      	cmp	r3, #0
 8009054:	d007      	beq.n	8009066 <UART_WaitOnFlagUntilTimeout+0x30>
 8009056:	f7fb fbc3 	bl	80047e0 <HAL_GetTick>
 800905a:	4602      	mov	r2, r0
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009062:	429a      	cmp	r2, r3
 8009064:	d241      	bcs.n	80090ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	330c      	adds	r3, #12
 800906c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009070:	e853 3f00 	ldrex	r3, [r3]
 8009074:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009078:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800907c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	330c      	adds	r3, #12
 8009084:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009086:	637a      	str	r2, [r7, #52]	; 0x34
 8009088:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800908c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800908e:	e841 2300 	strex	r3, r2, [r1]
 8009092:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1e5      	bne.n	8009066 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	3314      	adds	r3, #20
 80090a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	e853 3f00 	ldrex	r3, [r3]
 80090a8:	613b      	str	r3, [r7, #16]
   return(result);
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	f023 0301 	bic.w	r3, r3, #1
 80090b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	3314      	adds	r3, #20
 80090b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090ba:	623a      	str	r2, [r7, #32]
 80090bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090be:	69f9      	ldr	r1, [r7, #28]
 80090c0:	6a3a      	ldr	r2, [r7, #32]
 80090c2:	e841 2300 	strex	r3, r2, [r1]
 80090c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d1e5      	bne.n	800909a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2220      	movs	r2, #32
 80090d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2220      	movs	r2, #32
 80090da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80090e6:	2303      	movs	r3, #3
 80090e8:	e00f      	b.n	800910a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	4013      	ands	r3, r2
 80090f4:	68ba      	ldr	r2, [r7, #8]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	bf0c      	ite	eq
 80090fa:	2301      	moveq	r3, #1
 80090fc:	2300      	movne	r3, #0
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	461a      	mov	r2, r3
 8009102:	79fb      	ldrb	r3, [r7, #7]
 8009104:	429a      	cmp	r2, r3
 8009106:	d09f      	beq.n	8009048 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	3740      	adds	r7, #64	; 0x40
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
	...

08009114 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009114:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009118:	b0c0      	sub	sp, #256	; 0x100
 800911a:	af00      	add	r7, sp, #0
 800911c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800912c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009130:	68d9      	ldr	r1, [r3, #12]
 8009132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	ea40 0301 	orr.w	r3, r0, r1
 800913c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800913e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009142:	689a      	ldr	r2, [r3, #8]
 8009144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009148:	691b      	ldr	r3, [r3, #16]
 800914a:	431a      	orrs	r2, r3
 800914c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009150:	695b      	ldr	r3, [r3, #20]
 8009152:	431a      	orrs	r2, r3
 8009154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009158:	69db      	ldr	r3, [r3, #28]
 800915a:	4313      	orrs	r3, r2
 800915c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800916c:	f021 010c 	bic.w	r1, r1, #12
 8009170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800917a:	430b      	orrs	r3, r1
 800917c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800917e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	695b      	ldr	r3, [r3, #20]
 8009186:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800918a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800918e:	6999      	ldr	r1, [r3, #24]
 8009190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	ea40 0301 	orr.w	r3, r0, r1
 800919a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800919c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	4b8f      	ldr	r3, [pc, #572]	; (80093e0 <UART_SetConfig+0x2cc>)
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d005      	beq.n	80091b4 <UART_SetConfig+0xa0>
 80091a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	4b8d      	ldr	r3, [pc, #564]	; (80093e4 <UART_SetConfig+0x2d0>)
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d104      	bne.n	80091be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80091b4:	f7fe f958 	bl	8007468 <HAL_RCC_GetPCLK2Freq>
 80091b8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80091bc:	e003      	b.n	80091c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80091be:	f7fe f93f 	bl	8007440 <HAL_RCC_GetPCLK1Freq>
 80091c2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091ca:	69db      	ldr	r3, [r3, #28]
 80091cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091d0:	f040 810c 	bne.w	80093ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80091d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091d8:	2200      	movs	r2, #0
 80091da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80091de:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80091e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80091e6:	4622      	mov	r2, r4
 80091e8:	462b      	mov	r3, r5
 80091ea:	1891      	adds	r1, r2, r2
 80091ec:	65b9      	str	r1, [r7, #88]	; 0x58
 80091ee:	415b      	adcs	r3, r3
 80091f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80091f6:	4621      	mov	r1, r4
 80091f8:	eb12 0801 	adds.w	r8, r2, r1
 80091fc:	4629      	mov	r1, r5
 80091fe:	eb43 0901 	adc.w	r9, r3, r1
 8009202:	f04f 0200 	mov.w	r2, #0
 8009206:	f04f 0300 	mov.w	r3, #0
 800920a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800920e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009212:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009216:	4690      	mov	r8, r2
 8009218:	4699      	mov	r9, r3
 800921a:	4623      	mov	r3, r4
 800921c:	eb18 0303 	adds.w	r3, r8, r3
 8009220:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009224:	462b      	mov	r3, r5
 8009226:	eb49 0303 	adc.w	r3, r9, r3
 800922a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800922e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800923a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800923e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009242:	460b      	mov	r3, r1
 8009244:	18db      	adds	r3, r3, r3
 8009246:	653b      	str	r3, [r7, #80]	; 0x50
 8009248:	4613      	mov	r3, r2
 800924a:	eb42 0303 	adc.w	r3, r2, r3
 800924e:	657b      	str	r3, [r7, #84]	; 0x54
 8009250:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009254:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009258:	f7f7 fd2e 	bl	8000cb8 <__aeabi_uldivmod>
 800925c:	4602      	mov	r2, r0
 800925e:	460b      	mov	r3, r1
 8009260:	4b61      	ldr	r3, [pc, #388]	; (80093e8 <UART_SetConfig+0x2d4>)
 8009262:	fba3 2302 	umull	r2, r3, r3, r2
 8009266:	095b      	lsrs	r3, r3, #5
 8009268:	011c      	lsls	r4, r3, #4
 800926a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800926e:	2200      	movs	r2, #0
 8009270:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009274:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009278:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800927c:	4642      	mov	r2, r8
 800927e:	464b      	mov	r3, r9
 8009280:	1891      	adds	r1, r2, r2
 8009282:	64b9      	str	r1, [r7, #72]	; 0x48
 8009284:	415b      	adcs	r3, r3
 8009286:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009288:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800928c:	4641      	mov	r1, r8
 800928e:	eb12 0a01 	adds.w	sl, r2, r1
 8009292:	4649      	mov	r1, r9
 8009294:	eb43 0b01 	adc.w	fp, r3, r1
 8009298:	f04f 0200 	mov.w	r2, #0
 800929c:	f04f 0300 	mov.w	r3, #0
 80092a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80092a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80092a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80092ac:	4692      	mov	sl, r2
 80092ae:	469b      	mov	fp, r3
 80092b0:	4643      	mov	r3, r8
 80092b2:	eb1a 0303 	adds.w	r3, sl, r3
 80092b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80092ba:	464b      	mov	r3, r9
 80092bc:	eb4b 0303 	adc.w	r3, fp, r3
 80092c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80092c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	2200      	movs	r2, #0
 80092cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80092d0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80092d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80092d8:	460b      	mov	r3, r1
 80092da:	18db      	adds	r3, r3, r3
 80092dc:	643b      	str	r3, [r7, #64]	; 0x40
 80092de:	4613      	mov	r3, r2
 80092e0:	eb42 0303 	adc.w	r3, r2, r3
 80092e4:	647b      	str	r3, [r7, #68]	; 0x44
 80092e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80092ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80092ee:	f7f7 fce3 	bl	8000cb8 <__aeabi_uldivmod>
 80092f2:	4602      	mov	r2, r0
 80092f4:	460b      	mov	r3, r1
 80092f6:	4611      	mov	r1, r2
 80092f8:	4b3b      	ldr	r3, [pc, #236]	; (80093e8 <UART_SetConfig+0x2d4>)
 80092fa:	fba3 2301 	umull	r2, r3, r3, r1
 80092fe:	095b      	lsrs	r3, r3, #5
 8009300:	2264      	movs	r2, #100	; 0x64
 8009302:	fb02 f303 	mul.w	r3, r2, r3
 8009306:	1acb      	subs	r3, r1, r3
 8009308:	00db      	lsls	r3, r3, #3
 800930a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800930e:	4b36      	ldr	r3, [pc, #216]	; (80093e8 <UART_SetConfig+0x2d4>)
 8009310:	fba3 2302 	umull	r2, r3, r3, r2
 8009314:	095b      	lsrs	r3, r3, #5
 8009316:	005b      	lsls	r3, r3, #1
 8009318:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800931c:	441c      	add	r4, r3
 800931e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009322:	2200      	movs	r2, #0
 8009324:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009328:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800932c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009330:	4642      	mov	r2, r8
 8009332:	464b      	mov	r3, r9
 8009334:	1891      	adds	r1, r2, r2
 8009336:	63b9      	str	r1, [r7, #56]	; 0x38
 8009338:	415b      	adcs	r3, r3
 800933a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800933c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009340:	4641      	mov	r1, r8
 8009342:	1851      	adds	r1, r2, r1
 8009344:	6339      	str	r1, [r7, #48]	; 0x30
 8009346:	4649      	mov	r1, r9
 8009348:	414b      	adcs	r3, r1
 800934a:	637b      	str	r3, [r7, #52]	; 0x34
 800934c:	f04f 0200 	mov.w	r2, #0
 8009350:	f04f 0300 	mov.w	r3, #0
 8009354:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009358:	4659      	mov	r1, fp
 800935a:	00cb      	lsls	r3, r1, #3
 800935c:	4651      	mov	r1, sl
 800935e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009362:	4651      	mov	r1, sl
 8009364:	00ca      	lsls	r2, r1, #3
 8009366:	4610      	mov	r0, r2
 8009368:	4619      	mov	r1, r3
 800936a:	4603      	mov	r3, r0
 800936c:	4642      	mov	r2, r8
 800936e:	189b      	adds	r3, r3, r2
 8009370:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009374:	464b      	mov	r3, r9
 8009376:	460a      	mov	r2, r1
 8009378:	eb42 0303 	adc.w	r3, r2, r3
 800937c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800938c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009390:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009394:	460b      	mov	r3, r1
 8009396:	18db      	adds	r3, r3, r3
 8009398:	62bb      	str	r3, [r7, #40]	; 0x28
 800939a:	4613      	mov	r3, r2
 800939c:	eb42 0303 	adc.w	r3, r2, r3
 80093a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80093aa:	f7f7 fc85 	bl	8000cb8 <__aeabi_uldivmod>
 80093ae:	4602      	mov	r2, r0
 80093b0:	460b      	mov	r3, r1
 80093b2:	4b0d      	ldr	r3, [pc, #52]	; (80093e8 <UART_SetConfig+0x2d4>)
 80093b4:	fba3 1302 	umull	r1, r3, r3, r2
 80093b8:	095b      	lsrs	r3, r3, #5
 80093ba:	2164      	movs	r1, #100	; 0x64
 80093bc:	fb01 f303 	mul.w	r3, r1, r3
 80093c0:	1ad3      	subs	r3, r2, r3
 80093c2:	00db      	lsls	r3, r3, #3
 80093c4:	3332      	adds	r3, #50	; 0x32
 80093c6:	4a08      	ldr	r2, [pc, #32]	; (80093e8 <UART_SetConfig+0x2d4>)
 80093c8:	fba2 2303 	umull	r2, r3, r2, r3
 80093cc:	095b      	lsrs	r3, r3, #5
 80093ce:	f003 0207 	and.w	r2, r3, #7
 80093d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4422      	add	r2, r4
 80093da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80093dc:	e105      	b.n	80095ea <UART_SetConfig+0x4d6>
 80093de:	bf00      	nop
 80093e0:	40011000 	.word	0x40011000
 80093e4:	40011400 	.word	0x40011400
 80093e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80093ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093f0:	2200      	movs	r2, #0
 80093f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80093f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80093fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80093fe:	4642      	mov	r2, r8
 8009400:	464b      	mov	r3, r9
 8009402:	1891      	adds	r1, r2, r2
 8009404:	6239      	str	r1, [r7, #32]
 8009406:	415b      	adcs	r3, r3
 8009408:	627b      	str	r3, [r7, #36]	; 0x24
 800940a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800940e:	4641      	mov	r1, r8
 8009410:	1854      	adds	r4, r2, r1
 8009412:	4649      	mov	r1, r9
 8009414:	eb43 0501 	adc.w	r5, r3, r1
 8009418:	f04f 0200 	mov.w	r2, #0
 800941c:	f04f 0300 	mov.w	r3, #0
 8009420:	00eb      	lsls	r3, r5, #3
 8009422:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009426:	00e2      	lsls	r2, r4, #3
 8009428:	4614      	mov	r4, r2
 800942a:	461d      	mov	r5, r3
 800942c:	4643      	mov	r3, r8
 800942e:	18e3      	adds	r3, r4, r3
 8009430:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009434:	464b      	mov	r3, r9
 8009436:	eb45 0303 	adc.w	r3, r5, r3
 800943a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800943e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	2200      	movs	r2, #0
 8009446:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800944a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800944e:	f04f 0200 	mov.w	r2, #0
 8009452:	f04f 0300 	mov.w	r3, #0
 8009456:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800945a:	4629      	mov	r1, r5
 800945c:	008b      	lsls	r3, r1, #2
 800945e:	4621      	mov	r1, r4
 8009460:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009464:	4621      	mov	r1, r4
 8009466:	008a      	lsls	r2, r1, #2
 8009468:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800946c:	f7f7 fc24 	bl	8000cb8 <__aeabi_uldivmod>
 8009470:	4602      	mov	r2, r0
 8009472:	460b      	mov	r3, r1
 8009474:	4b60      	ldr	r3, [pc, #384]	; (80095f8 <UART_SetConfig+0x4e4>)
 8009476:	fba3 2302 	umull	r2, r3, r3, r2
 800947a:	095b      	lsrs	r3, r3, #5
 800947c:	011c      	lsls	r4, r3, #4
 800947e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009482:	2200      	movs	r2, #0
 8009484:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009488:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800948c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009490:	4642      	mov	r2, r8
 8009492:	464b      	mov	r3, r9
 8009494:	1891      	adds	r1, r2, r2
 8009496:	61b9      	str	r1, [r7, #24]
 8009498:	415b      	adcs	r3, r3
 800949a:	61fb      	str	r3, [r7, #28]
 800949c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80094a0:	4641      	mov	r1, r8
 80094a2:	1851      	adds	r1, r2, r1
 80094a4:	6139      	str	r1, [r7, #16]
 80094a6:	4649      	mov	r1, r9
 80094a8:	414b      	adcs	r3, r1
 80094aa:	617b      	str	r3, [r7, #20]
 80094ac:	f04f 0200 	mov.w	r2, #0
 80094b0:	f04f 0300 	mov.w	r3, #0
 80094b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80094b8:	4659      	mov	r1, fp
 80094ba:	00cb      	lsls	r3, r1, #3
 80094bc:	4651      	mov	r1, sl
 80094be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80094c2:	4651      	mov	r1, sl
 80094c4:	00ca      	lsls	r2, r1, #3
 80094c6:	4610      	mov	r0, r2
 80094c8:	4619      	mov	r1, r3
 80094ca:	4603      	mov	r3, r0
 80094cc:	4642      	mov	r2, r8
 80094ce:	189b      	adds	r3, r3, r2
 80094d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80094d4:	464b      	mov	r3, r9
 80094d6:	460a      	mov	r2, r1
 80094d8:	eb42 0303 	adc.w	r3, r2, r3
 80094dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80094e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80094ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 80094ec:	f04f 0200 	mov.w	r2, #0
 80094f0:	f04f 0300 	mov.w	r3, #0
 80094f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80094f8:	4649      	mov	r1, r9
 80094fa:	008b      	lsls	r3, r1, #2
 80094fc:	4641      	mov	r1, r8
 80094fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009502:	4641      	mov	r1, r8
 8009504:	008a      	lsls	r2, r1, #2
 8009506:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800950a:	f7f7 fbd5 	bl	8000cb8 <__aeabi_uldivmod>
 800950e:	4602      	mov	r2, r0
 8009510:	460b      	mov	r3, r1
 8009512:	4b39      	ldr	r3, [pc, #228]	; (80095f8 <UART_SetConfig+0x4e4>)
 8009514:	fba3 1302 	umull	r1, r3, r3, r2
 8009518:	095b      	lsrs	r3, r3, #5
 800951a:	2164      	movs	r1, #100	; 0x64
 800951c:	fb01 f303 	mul.w	r3, r1, r3
 8009520:	1ad3      	subs	r3, r2, r3
 8009522:	011b      	lsls	r3, r3, #4
 8009524:	3332      	adds	r3, #50	; 0x32
 8009526:	4a34      	ldr	r2, [pc, #208]	; (80095f8 <UART_SetConfig+0x4e4>)
 8009528:	fba2 2303 	umull	r2, r3, r2, r3
 800952c:	095b      	lsrs	r3, r3, #5
 800952e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009532:	441c      	add	r4, r3
 8009534:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009538:	2200      	movs	r2, #0
 800953a:	673b      	str	r3, [r7, #112]	; 0x70
 800953c:	677a      	str	r2, [r7, #116]	; 0x74
 800953e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009542:	4642      	mov	r2, r8
 8009544:	464b      	mov	r3, r9
 8009546:	1891      	adds	r1, r2, r2
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	415b      	adcs	r3, r3
 800954c:	60fb      	str	r3, [r7, #12]
 800954e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009552:	4641      	mov	r1, r8
 8009554:	1851      	adds	r1, r2, r1
 8009556:	6039      	str	r1, [r7, #0]
 8009558:	4649      	mov	r1, r9
 800955a:	414b      	adcs	r3, r1
 800955c:	607b      	str	r3, [r7, #4]
 800955e:	f04f 0200 	mov.w	r2, #0
 8009562:	f04f 0300 	mov.w	r3, #0
 8009566:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800956a:	4659      	mov	r1, fp
 800956c:	00cb      	lsls	r3, r1, #3
 800956e:	4651      	mov	r1, sl
 8009570:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009574:	4651      	mov	r1, sl
 8009576:	00ca      	lsls	r2, r1, #3
 8009578:	4610      	mov	r0, r2
 800957a:	4619      	mov	r1, r3
 800957c:	4603      	mov	r3, r0
 800957e:	4642      	mov	r2, r8
 8009580:	189b      	adds	r3, r3, r2
 8009582:	66bb      	str	r3, [r7, #104]	; 0x68
 8009584:	464b      	mov	r3, r9
 8009586:	460a      	mov	r2, r1
 8009588:	eb42 0303 	adc.w	r3, r2, r3
 800958c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800958e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	2200      	movs	r2, #0
 8009596:	663b      	str	r3, [r7, #96]	; 0x60
 8009598:	667a      	str	r2, [r7, #100]	; 0x64
 800959a:	f04f 0200 	mov.w	r2, #0
 800959e:	f04f 0300 	mov.w	r3, #0
 80095a2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80095a6:	4649      	mov	r1, r9
 80095a8:	008b      	lsls	r3, r1, #2
 80095aa:	4641      	mov	r1, r8
 80095ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80095b0:	4641      	mov	r1, r8
 80095b2:	008a      	lsls	r2, r1, #2
 80095b4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80095b8:	f7f7 fb7e 	bl	8000cb8 <__aeabi_uldivmod>
 80095bc:	4602      	mov	r2, r0
 80095be:	460b      	mov	r3, r1
 80095c0:	4b0d      	ldr	r3, [pc, #52]	; (80095f8 <UART_SetConfig+0x4e4>)
 80095c2:	fba3 1302 	umull	r1, r3, r3, r2
 80095c6:	095b      	lsrs	r3, r3, #5
 80095c8:	2164      	movs	r1, #100	; 0x64
 80095ca:	fb01 f303 	mul.w	r3, r1, r3
 80095ce:	1ad3      	subs	r3, r2, r3
 80095d0:	011b      	lsls	r3, r3, #4
 80095d2:	3332      	adds	r3, #50	; 0x32
 80095d4:	4a08      	ldr	r2, [pc, #32]	; (80095f8 <UART_SetConfig+0x4e4>)
 80095d6:	fba2 2303 	umull	r2, r3, r2, r3
 80095da:	095b      	lsrs	r3, r3, #5
 80095dc:	f003 020f 	and.w	r2, r3, #15
 80095e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4422      	add	r2, r4
 80095e8:	609a      	str	r2, [r3, #8]
}
 80095ea:	bf00      	nop
 80095ec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80095f0:	46bd      	mov	sp, r7
 80095f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80095f6:	bf00      	nop
 80095f8:	51eb851f 	.word	0x51eb851f

080095fc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80095fc:	b084      	sub	sp, #16
 80095fe:	b480      	push	{r7}
 8009600:	b085      	sub	sp, #20
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
 8009606:	f107 001c 	add.w	r0, r7, #28
 800960a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800960e:	2300      	movs	r3, #0
 8009610:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009612:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009614:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009616:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800961a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800961c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800961e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009622:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009626:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009628:	68fa      	ldr	r2, [r7, #12]
 800962a:	4313      	orrs	r3, r2
 800962c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8009636:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800963a:	68fa      	ldr	r2, [r7, #12]
 800963c:	431a      	orrs	r2, r3
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009642:	2300      	movs	r3, #0
}
 8009644:	4618      	mov	r0, r3
 8009646:	3714      	adds	r7, #20
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	b004      	add	sp, #16
 8009650:	4770      	bx	lr

08009652 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009652:	b480      	push	{r7}
 8009654:	b083      	sub	sp, #12
 8009656:	af00      	add	r7, sp, #0
 8009658:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009660:	4618      	mov	r0, r3
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009680:	2300      	movs	r3, #0
}
 8009682:	4618      	mov	r0, r3
 8009684:	370c      	adds	r7, #12
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr

0800968e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800968e:	b480      	push	{r7}
 8009690:	b083      	sub	sp, #12
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2203      	movs	r2, #3
 800969a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800969c:	2300      	movs	r3, #0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	370c      	adds	r7, #12
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr

080096aa <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80096aa:	b480      	push	{r7}
 80096ac:	b083      	sub	sp, #12
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f003 0303 	and.w	r3, r3, #3
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	370c      	adds	r7, #12
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr

080096c6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80096c6:	b480      	push	{r7}
 80096c8:	b085      	sub	sp, #20
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
 80096ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80096d0:	2300      	movs	r3, #0
 80096d2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80096e4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80096ea:	431a      	orrs	r2, r3
                       Command->CPSM);
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80096f0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80096f2:	68fa      	ldr	r2, [r7, #12]
 80096f4:	4313      	orrs	r3, r2
 80096f6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009700:	f023 030f 	bic.w	r3, r3, #15
 8009704:	68fa      	ldr	r2, [r7, #12]
 8009706:	431a      	orrs	r2, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3714      	adds	r7, #20
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr

0800971a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800971a:	b480      	push	{r7}
 800971c:	b083      	sub	sp, #12
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	691b      	ldr	r3, [r3, #16]
 8009726:	b2db      	uxtb	r3, r3
}
 8009728:	4618      	mov	r0, r3
 800972a:	370c      	adds	r7, #12
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009734:	b480      	push	{r7}
 8009736:	b085      	sub	sp, #20
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	3314      	adds	r3, #20
 8009742:	461a      	mov	r2, r3
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	4413      	add	r3, r2
 8009748:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
}  
 800974e:	4618      	mov	r0, r3
 8009750:	3714      	adds	r7, #20
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr

0800975a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800975a:	b480      	push	{r7}
 800975c:	b085      	sub	sp, #20
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
 8009762:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009764:	2300      	movs	r3, #0
 8009766:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	685a      	ldr	r2, [r3, #4]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009780:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009786:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800978c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	4313      	orrs	r3, r2
 8009792:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009798:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	431a      	orrs	r2, r3
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80097a4:	2300      	movs	r3, #0

}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3714      	adds	r7, #20
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr

080097b2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b088      	sub	sp, #32
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
 80097ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80097c0:	2310      	movs	r3, #16
 80097c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80097c4:	2340      	movs	r3, #64	; 0x40
 80097c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80097c8:	2300      	movs	r3, #0
 80097ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80097cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80097d2:	f107 0308 	add.w	r3, r7, #8
 80097d6:	4619      	mov	r1, r3
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f7ff ff74 	bl	80096c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80097de:	f241 3288 	movw	r2, #5000	; 0x1388
 80097e2:	2110      	movs	r1, #16
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f000 fa19 	bl	8009c1c <SDMMC_GetCmdResp1>
 80097ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097ec:	69fb      	ldr	r3, [r7, #28]
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3720      	adds	r7, #32
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b088      	sub	sp, #32
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
 80097fe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009804:	2311      	movs	r3, #17
 8009806:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009808:	2340      	movs	r3, #64	; 0x40
 800980a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800980c:	2300      	movs	r3, #0
 800980e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009814:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009816:	f107 0308 	add.w	r3, r7, #8
 800981a:	4619      	mov	r1, r3
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f7ff ff52 	bl	80096c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009822:	f241 3288 	movw	r2, #5000	; 0x1388
 8009826:	2111      	movs	r1, #17
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 f9f7 	bl	8009c1c <SDMMC_GetCmdResp1>
 800982e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009830:	69fb      	ldr	r3, [r7, #28]
}
 8009832:	4618      	mov	r0, r3
 8009834:	3720      	adds	r7, #32
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}

0800983a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800983a:	b580      	push	{r7, lr}
 800983c:	b088      	sub	sp, #32
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
 8009842:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009848:	2312      	movs	r3, #18
 800984a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800984c:	2340      	movs	r3, #64	; 0x40
 800984e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009850:	2300      	movs	r3, #0
 8009852:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009854:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009858:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800985a:	f107 0308 	add.w	r3, r7, #8
 800985e:	4619      	mov	r1, r3
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f7ff ff30 	bl	80096c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009866:	f241 3288 	movw	r2, #5000	; 0x1388
 800986a:	2112      	movs	r1, #18
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 f9d5 	bl	8009c1c <SDMMC_GetCmdResp1>
 8009872:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009874:	69fb      	ldr	r3, [r7, #28]
}
 8009876:	4618      	mov	r0, r3
 8009878:	3720      	adds	r7, #32
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}

0800987e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800987e:	b580      	push	{r7, lr}
 8009880:	b088      	sub	sp, #32
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
 8009886:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800988c:	2318      	movs	r3, #24
 800988e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009890:	2340      	movs	r3, #64	; 0x40
 8009892:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009894:	2300      	movs	r3, #0
 8009896:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009898:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800989c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800989e:	f107 0308 	add.w	r3, r7, #8
 80098a2:	4619      	mov	r1, r3
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f7ff ff0e 	bl	80096c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80098aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80098ae:	2118      	movs	r1, #24
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 f9b3 	bl	8009c1c <SDMMC_GetCmdResp1>
 80098b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098b8:	69fb      	ldr	r3, [r7, #28]
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3720      	adds	r7, #32
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}

080098c2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b088      	sub	sp, #32
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
 80098ca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80098d0:	2319      	movs	r3, #25
 80098d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80098d4:	2340      	movs	r3, #64	; 0x40
 80098d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80098d8:	2300      	movs	r3, #0
 80098da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098e2:	f107 0308 	add.w	r3, r7, #8
 80098e6:	4619      	mov	r1, r3
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f7ff feec 	bl	80096c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80098ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80098f2:	2119      	movs	r1, #25
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 f991 	bl	8009c1c <SDMMC_GetCmdResp1>
 80098fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098fc:	69fb      	ldr	r3, [r7, #28]
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3720      	adds	r7, #32
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
	...

08009908 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b088      	sub	sp, #32
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009910:	2300      	movs	r3, #0
 8009912:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009914:	230c      	movs	r3, #12
 8009916:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009918:	2340      	movs	r3, #64	; 0x40
 800991a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800991c:	2300      	movs	r3, #0
 800991e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009924:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009926:	f107 0308 	add.w	r3, r7, #8
 800992a:	4619      	mov	r1, r3
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f7ff feca 	bl	80096c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009932:	4a05      	ldr	r2, [pc, #20]	; (8009948 <SDMMC_CmdStopTransfer+0x40>)
 8009934:	210c      	movs	r1, #12
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 f970 	bl	8009c1c <SDMMC_GetCmdResp1>
 800993c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800993e:	69fb      	ldr	r3, [r7, #28]
}
 8009940:	4618      	mov	r0, r3
 8009942:	3720      	adds	r7, #32
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}
 8009948:	05f5e100 	.word	0x05f5e100

0800994c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b08a      	sub	sp, #40	; 0x28
 8009950:	af00      	add	r7, sp, #0
 8009952:	60f8      	str	r0, [r7, #12]
 8009954:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800995c:	2307      	movs	r3, #7
 800995e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009960:	2340      	movs	r3, #64	; 0x40
 8009962:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009964:	2300      	movs	r3, #0
 8009966:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800996c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800996e:	f107 0310 	add.w	r3, r7, #16
 8009972:	4619      	mov	r1, r3
 8009974:	68f8      	ldr	r0, [r7, #12]
 8009976:	f7ff fea6 	bl	80096c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800997a:	f241 3288 	movw	r2, #5000	; 0x1388
 800997e:	2107      	movs	r1, #7
 8009980:	68f8      	ldr	r0, [r7, #12]
 8009982:	f000 f94b 	bl	8009c1c <SDMMC_GetCmdResp1>
 8009986:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800998a:	4618      	mov	r0, r3
 800998c:	3728      	adds	r7, #40	; 0x28
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}

08009992 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009992:	b580      	push	{r7, lr}
 8009994:	b088      	sub	sp, #32
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800999a:	2300      	movs	r3, #0
 800999c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800999e:	2300      	movs	r3, #0
 80099a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80099a2:	2300      	movs	r3, #0
 80099a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099a6:	2300      	movs	r3, #0
 80099a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099b0:	f107 0308 	add.w	r3, r7, #8
 80099b4:	4619      	mov	r1, r3
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f7ff fe85 	bl	80096c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 fb65 	bl	800a08c <SDMMC_GetCmdError>
 80099c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099c4:	69fb      	ldr	r3, [r7, #28]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3720      	adds	r7, #32
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b088      	sub	sp, #32
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80099d6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80099da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80099dc:	2308      	movs	r3, #8
 80099de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80099e0:	2340      	movs	r3, #64	; 0x40
 80099e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099e4:	2300      	movs	r3, #0
 80099e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099ee:	f107 0308 	add.w	r3, r7, #8
 80099f2:	4619      	mov	r1, r3
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f7ff fe66 	bl	80096c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 faf8 	bl	8009ff0 <SDMMC_GetCmdResp7>
 8009a00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a02:	69fb      	ldr	r3, [r7, #28]
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3720      	adds	r7, #32
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b088      	sub	sp, #32
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009a1a:	2337      	movs	r3, #55	; 0x37
 8009a1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a1e:	2340      	movs	r3, #64	; 0x40
 8009a20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a22:	2300      	movs	r3, #0
 8009a24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a2c:	f107 0308 	add.w	r3, r7, #8
 8009a30:	4619      	mov	r1, r3
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f7ff fe47 	bl	80096c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a3c:	2137      	movs	r1, #55	; 0x37
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 f8ec 	bl	8009c1c <SDMMC_GetCmdResp1>
 8009a44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a46:	69fb      	ldr	r3, [r7, #28]
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3720      	adds	r7, #32
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b088      	sub	sp, #32
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009a66:	2329      	movs	r3, #41	; 0x29
 8009a68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a6a:	2340      	movs	r3, #64	; 0x40
 8009a6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a78:	f107 0308 	add.w	r3, r7, #8
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f7ff fe21 	bl	80096c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 f9ff 	bl	8009e88 <SDMMC_GetCmdResp3>
 8009a8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a8c:	69fb      	ldr	r3, [r7, #28]
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3720      	adds	r7, #32
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}

08009a96 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b088      	sub	sp, #32
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
 8009a9e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009aa4:	2306      	movs	r3, #6
 8009aa6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009aa8:	2340      	movs	r3, #64	; 0x40
 8009aaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009aac:	2300      	movs	r3, #0
 8009aae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ab0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ab4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ab6:	f107 0308 	add.w	r3, r7, #8
 8009aba:	4619      	mov	r1, r3
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f7ff fe02 	bl	80096c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ac6:	2106      	movs	r1, #6
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 f8a7 	bl	8009c1c <SDMMC_GetCmdResp1>
 8009ace:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ad0:	69fb      	ldr	r3, [r7, #28]
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3720      	adds	r7, #32
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}

08009ada <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8009ada:	b580      	push	{r7, lr}
 8009adc:	b088      	sub	sp, #32
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009ae6:	2333      	movs	r3, #51	; 0x33
 8009ae8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009aea:	2340      	movs	r3, #64	; 0x40
 8009aec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009aee:	2300      	movs	r3, #0
 8009af0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009af6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009af8:	f107 0308 	add.w	r3, r7, #8
 8009afc:	4619      	mov	r1, r3
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f7ff fde1 	bl	80096c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b08:	2133      	movs	r1, #51	; 0x33
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 f886 	bl	8009c1c <SDMMC_GetCmdResp1>
 8009b10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b12:	69fb      	ldr	r3, [r7, #28]
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3720      	adds	r7, #32
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b088      	sub	sp, #32
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009b24:	2300      	movs	r3, #0
 8009b26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009b28:	2302      	movs	r3, #2
 8009b2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009b2c:	23c0      	movs	r3, #192	; 0xc0
 8009b2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b30:	2300      	movs	r3, #0
 8009b32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b38:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b3a:	f107 0308 	add.w	r3, r7, #8
 8009b3e:	4619      	mov	r1, r3
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f7ff fdc0 	bl	80096c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 f956 	bl	8009df8 <SDMMC_GetCmdResp2>
 8009b4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b4e:	69fb      	ldr	r3, [r7, #28]
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3720      	adds	r7, #32
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b088      	sub	sp, #32
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009b66:	2309      	movs	r3, #9
 8009b68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009b6a:	23c0      	movs	r3, #192	; 0xc0
 8009b6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b78:	f107 0308 	add.w	r3, r7, #8
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f7ff fda1 	bl	80096c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 f937 	bl	8009df8 <SDMMC_GetCmdResp2>
 8009b8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b8c:	69fb      	ldr	r3, [r7, #28]
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3720      	adds	r7, #32
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b088      	sub	sp, #32
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
 8009b9e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009ba4:	2303      	movs	r3, #3
 8009ba6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ba8:	2340      	movs	r3, #64	; 0x40
 8009baa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009bac:	2300      	movs	r3, #0
 8009bae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009bb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bb4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009bb6:	f107 0308 	add.w	r3, r7, #8
 8009bba:	4619      	mov	r1, r3
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f7ff fd82 	bl	80096c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009bc2:	683a      	ldr	r2, [r7, #0]
 8009bc4:	2103      	movs	r1, #3
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 f99c 	bl	8009f04 <SDMMC_GetCmdResp6>
 8009bcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bce:	69fb      	ldr	r3, [r7, #28]
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3720      	adds	r7, #32
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b088      	sub	sp, #32
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009be6:	230d      	movs	r3, #13
 8009be8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009bea:	2340      	movs	r3, #64	; 0x40
 8009bec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bf6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009bf8:	f107 0308 	add.w	r3, r7, #8
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f7ff fd61 	bl	80096c6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c08:	210d      	movs	r1, #13
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 f806 	bl	8009c1c <SDMMC_GetCmdResp1>
 8009c10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c12:	69fb      	ldr	r3, [r7, #28]
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3720      	adds	r7, #32
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b088      	sub	sp, #32
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	60f8      	str	r0, [r7, #12]
 8009c24:	460b      	mov	r3, r1
 8009c26:	607a      	str	r2, [r7, #4]
 8009c28:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009c2a:	4b70      	ldr	r3, [pc, #448]	; (8009dec <SDMMC_GetCmdResp1+0x1d0>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a70      	ldr	r2, [pc, #448]	; (8009df0 <SDMMC_GetCmdResp1+0x1d4>)
 8009c30:	fba2 2303 	umull	r2, r3, r2, r3
 8009c34:	0a5a      	lsrs	r2, r3, #9
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	fb02 f303 	mul.w	r3, r2, r3
 8009c3c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009c3e:	69fb      	ldr	r3, [r7, #28]
 8009c40:	1e5a      	subs	r2, r3, #1
 8009c42:	61fa      	str	r2, [r7, #28]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d102      	bne.n	8009c4e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009c48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c4c:	e0c9      	b.n	8009de2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c52:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009c54:	69bb      	ldr	r3, [r7, #24]
 8009c56:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d0ef      	beq.n	8009c3e <SDMMC_GetCmdResp1+0x22>
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d1ea      	bne.n	8009c3e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c6c:	f003 0304 	and.w	r3, r3, #4
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d004      	beq.n	8009c7e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2204      	movs	r2, #4
 8009c78:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009c7a:	2304      	movs	r3, #4
 8009c7c:	e0b1      	b.n	8009de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c82:	f003 0301 	and.w	r3, r3, #1
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d004      	beq.n	8009c94 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c90:	2301      	movs	r3, #1
 8009c92:	e0a6      	b.n	8009de2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	22c5      	movs	r2, #197	; 0xc5
 8009c98:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009c9a:	68f8      	ldr	r0, [r7, #12]
 8009c9c:	f7ff fd3d 	bl	800971a <SDIO_GetCommandResponse>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	7afb      	ldrb	r3, [r7, #11]
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d001      	beq.n	8009cae <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009caa:	2301      	movs	r3, #1
 8009cac:	e099      	b.n	8009de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009cae:	2100      	movs	r1, #0
 8009cb0:	68f8      	ldr	r0, [r7, #12]
 8009cb2:	f7ff fd3f 	bl	8009734 <SDIO_GetResponse>
 8009cb6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009cb8:	697a      	ldr	r2, [r7, #20]
 8009cba:	4b4e      	ldr	r3, [pc, #312]	; (8009df4 <SDMMC_GetCmdResp1+0x1d8>)
 8009cbc:	4013      	ands	r3, r2
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d101      	bne.n	8009cc6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	e08d      	b.n	8009de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	da02      	bge.n	8009cd2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009ccc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009cd0:	e087      	b.n	8009de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d001      	beq.n	8009ce0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009cdc:	2340      	movs	r3, #64	; 0x40
 8009cde:	e080      	b.n	8009de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d001      	beq.n	8009cee <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009cea:	2380      	movs	r3, #128	; 0x80
 8009cec:	e079      	b.n	8009de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d002      	beq.n	8009cfe <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009cf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cfc:	e071      	b.n	8009de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d002      	beq.n	8009d0e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009d08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d0c:	e069      	b.n	8009de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d002      	beq.n	8009d1e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009d18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d1c:	e061      	b.n	8009de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d002      	beq.n	8009d2e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009d28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009d2c:	e059      	b.n	8009de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d002      	beq.n	8009d3e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d3c:	e051      	b.n	8009de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d002      	beq.n	8009d4e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009d48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009d4c:	e049      	b.n	8009de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d002      	beq.n	8009d5e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009d58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009d5c:	e041      	b.n	8009de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d002      	beq.n	8009d6e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009d68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d6c:	e039      	b.n	8009de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d002      	beq.n	8009d7e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009d78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009d7c:	e031      	b.n	8009de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d002      	beq.n	8009d8e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009d88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009d8c:	e029      	b.n	8009de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d002      	beq.n	8009d9e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009d98:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009d9c:	e021      	b.n	8009de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d002      	beq.n	8009dae <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009da8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009dac:	e019      	b.n	8009de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d002      	beq.n	8009dbe <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009db8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009dbc:	e011      	b.n	8009de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d002      	beq.n	8009dce <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009dc8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009dcc:	e009      	b.n	8009de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	f003 0308 	and.w	r3, r3, #8
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d002      	beq.n	8009dde <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009dd8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009ddc:	e001      	b.n	8009de2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009dde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3720      	adds	r7, #32
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
 8009dea:	bf00      	nop
 8009dec:	20000050 	.word	0x20000050
 8009df0:	10624dd3 	.word	0x10624dd3
 8009df4:	fdffe008 	.word	0xfdffe008

08009df8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b085      	sub	sp, #20
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009e00:	4b1f      	ldr	r3, [pc, #124]	; (8009e80 <SDMMC_GetCmdResp2+0x88>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a1f      	ldr	r2, [pc, #124]	; (8009e84 <SDMMC_GetCmdResp2+0x8c>)
 8009e06:	fba2 2303 	umull	r2, r3, r2, r3
 8009e0a:	0a5b      	lsrs	r3, r3, #9
 8009e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e10:	fb02 f303 	mul.w	r3, r2, r3
 8009e14:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	1e5a      	subs	r2, r3, #1
 8009e1a:	60fa      	str	r2, [r7, #12]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d102      	bne.n	8009e26 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009e20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e24:	e026      	b.n	8009e74 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e2a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d0ef      	beq.n	8009e16 <SDMMC_GetCmdResp2+0x1e>
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d1ea      	bne.n	8009e16 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e44:	f003 0304 	and.w	r3, r3, #4
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d004      	beq.n	8009e56 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2204      	movs	r2, #4
 8009e50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e52:	2304      	movs	r3, #4
 8009e54:	e00e      	b.n	8009e74 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e5a:	f003 0301 	and.w	r3, r3, #1
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d004      	beq.n	8009e6c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2201      	movs	r2, #1
 8009e66:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e003      	b.n	8009e74 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	22c5      	movs	r2, #197	; 0xc5
 8009e70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009e72:	2300      	movs	r3, #0
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3714      	adds	r7, #20
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr
 8009e80:	20000050 	.word	0x20000050
 8009e84:	10624dd3 	.word	0x10624dd3

08009e88 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b085      	sub	sp, #20
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009e90:	4b1a      	ldr	r3, [pc, #104]	; (8009efc <SDMMC_GetCmdResp3+0x74>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a1a      	ldr	r2, [pc, #104]	; (8009f00 <SDMMC_GetCmdResp3+0x78>)
 8009e96:	fba2 2303 	umull	r2, r3, r2, r3
 8009e9a:	0a5b      	lsrs	r3, r3, #9
 8009e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ea0:	fb02 f303 	mul.w	r3, r2, r3
 8009ea4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	1e5a      	subs	r2, r3, #1
 8009eaa:	60fa      	str	r2, [r7, #12]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d102      	bne.n	8009eb6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009eb0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009eb4:	e01b      	b.n	8009eee <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d0ef      	beq.n	8009ea6 <SDMMC_GetCmdResp3+0x1e>
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d1ea      	bne.n	8009ea6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ed4:	f003 0304 	and.w	r3, r3, #4
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d004      	beq.n	8009ee6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2204      	movs	r2, #4
 8009ee0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009ee2:	2304      	movs	r3, #4
 8009ee4:	e003      	b.n	8009eee <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	22c5      	movs	r2, #197	; 0xc5
 8009eea:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3714      	adds	r7, #20
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop
 8009efc:	20000050 	.word	0x20000050
 8009f00:	10624dd3 	.word	0x10624dd3

08009f04 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b088      	sub	sp, #32
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	607a      	str	r2, [r7, #4]
 8009f10:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009f12:	4b35      	ldr	r3, [pc, #212]	; (8009fe8 <SDMMC_GetCmdResp6+0xe4>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4a35      	ldr	r2, [pc, #212]	; (8009fec <SDMMC_GetCmdResp6+0xe8>)
 8009f18:	fba2 2303 	umull	r2, r3, r2, r3
 8009f1c:	0a5b      	lsrs	r3, r3, #9
 8009f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f22:	fb02 f303 	mul.w	r3, r2, r3
 8009f26:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	1e5a      	subs	r2, r3, #1
 8009f2c:	61fa      	str	r2, [r7, #28]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d102      	bne.n	8009f38 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f32:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f36:	e052      	b.n	8009fde <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f3c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f3e:	69bb      	ldr	r3, [r7, #24]
 8009f40:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d0ef      	beq.n	8009f28 <SDMMC_GetCmdResp6+0x24>
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d1ea      	bne.n	8009f28 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f56:	f003 0304 	and.w	r3, r3, #4
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d004      	beq.n	8009f68 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2204      	movs	r2, #4
 8009f62:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f64:	2304      	movs	r3, #4
 8009f66:	e03a      	b.n	8009fde <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f6c:	f003 0301 	and.w	r3, r3, #1
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d004      	beq.n	8009f7e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2201      	movs	r2, #1
 8009f78:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	e02f      	b.n	8009fde <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009f7e:	68f8      	ldr	r0, [r7, #12]
 8009f80:	f7ff fbcb 	bl	800971a <SDIO_GetCommandResponse>
 8009f84:	4603      	mov	r3, r0
 8009f86:	461a      	mov	r2, r3
 8009f88:	7afb      	ldrb	r3, [r7, #11]
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d001      	beq.n	8009f92 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e025      	b.n	8009fde <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	22c5      	movs	r2, #197	; 0xc5
 8009f96:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009f98:	2100      	movs	r1, #0
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f7ff fbca 	bl	8009734 <SDIO_GetResponse>
 8009fa0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d106      	bne.n	8009fba <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	0c1b      	lsrs	r3, r3, #16
 8009fb0:	b29a      	uxth	r2, r3
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	e011      	b.n	8009fde <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d002      	beq.n	8009fca <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009fc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009fc8:	e009      	b.n	8009fde <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d002      	beq.n	8009fda <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009fd8:	e001      	b.n	8009fde <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009fda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3720      	adds	r7, #32
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	20000050 	.word	0x20000050
 8009fec:	10624dd3 	.word	0x10624dd3

08009ff0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b085      	sub	sp, #20
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009ff8:	4b22      	ldr	r3, [pc, #136]	; (800a084 <SDMMC_GetCmdResp7+0x94>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a22      	ldr	r2, [pc, #136]	; (800a088 <SDMMC_GetCmdResp7+0x98>)
 8009ffe:	fba2 2303 	umull	r2, r3, r2, r3
 800a002:	0a5b      	lsrs	r3, r3, #9
 800a004:	f241 3288 	movw	r2, #5000	; 0x1388
 800a008:	fb02 f303 	mul.w	r3, r2, r3
 800a00c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	1e5a      	subs	r2, r3, #1
 800a012:	60fa      	str	r2, [r7, #12]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d102      	bne.n	800a01e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a018:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a01c:	e02c      	b.n	800a078 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a022:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d0ef      	beq.n	800a00e <SDMMC_GetCmdResp7+0x1e>
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a034:	2b00      	cmp	r3, #0
 800a036:	d1ea      	bne.n	800a00e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a03c:	f003 0304 	and.w	r3, r3, #4
 800a040:	2b00      	cmp	r3, #0
 800a042:	d004      	beq.n	800a04e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2204      	movs	r2, #4
 800a048:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a04a:	2304      	movs	r3, #4
 800a04c:	e014      	b.n	800a078 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a052:	f003 0301 	and.w	r3, r3, #1
 800a056:	2b00      	cmp	r3, #0
 800a058:	d004      	beq.n	800a064 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2201      	movs	r2, #1
 800a05e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a060:	2301      	movs	r3, #1
 800a062:	e009      	b.n	800a078 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d002      	beq.n	800a076 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2240      	movs	r2, #64	; 0x40
 800a074:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a076:	2300      	movs	r3, #0
  
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3714      	adds	r7, #20
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr
 800a084:	20000050 	.word	0x20000050
 800a088:	10624dd3 	.word	0x10624dd3

0800a08c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b085      	sub	sp, #20
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a094:	4b11      	ldr	r3, [pc, #68]	; (800a0dc <SDMMC_GetCmdError+0x50>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a11      	ldr	r2, [pc, #68]	; (800a0e0 <SDMMC_GetCmdError+0x54>)
 800a09a:	fba2 2303 	umull	r2, r3, r2, r3
 800a09e:	0a5b      	lsrs	r3, r3, #9
 800a0a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0a4:	fb02 f303 	mul.w	r3, r2, r3
 800a0a8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	1e5a      	subs	r2, r3, #1
 800a0ae:	60fa      	str	r2, [r7, #12]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d102      	bne.n	800a0ba <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a0b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a0b8:	e009      	b.n	800a0ce <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d0f1      	beq.n	800a0aa <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	22c5      	movs	r2, #197	; 0xc5
 800a0ca:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a0cc:	2300      	movs	r3, #0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3714      	adds	r7, #20
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop
 800a0dc:	20000050 	.word	0x20000050
 800a0e0:	10624dd3 	.word	0x10624dd3

0800a0e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a0e8:	4904      	ldr	r1, [pc, #16]	; (800a0fc <MX_FATFS_Init+0x18>)
 800a0ea:	4805      	ldr	r0, [pc, #20]	; (800a100 <MX_FATFS_Init+0x1c>)
 800a0ec:	f002 fdc6 	bl	800cc7c <FATFS_LinkDriver>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	4b03      	ldr	r3, [pc, #12]	; (800a104 <MX_FATFS_Init+0x20>)
 800a0f6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a0f8:	bf00      	nop
 800a0fa:	bd80      	pop	{r7, pc}
 800a0fc:	20000bfc 	.word	0x20000bfc
 800a100:	080118f8 	.word	0x080118f8
 800a104:	20000bf8 	.word	0x20000bf8

0800a108 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a108:	b480      	push	{r7}
 800a10a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a10c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a10e:	4618      	mov	r0, r3
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a11e:	2300      	movs	r3, #0
 800a120:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a122:	f000 f879 	bl	800a218 <BSP_SD_IsDetected>
 800a126:	4603      	mov	r3, r0
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d001      	beq.n	800a130 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a12c:	2301      	movs	r3, #1
 800a12e:	e012      	b.n	800a156 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a130:	480b      	ldr	r0, [pc, #44]	; (800a160 <BSP_SD_Init+0x48>)
 800a132:	f7fd f9df 	bl	80074f4 <HAL_SD_Init>
 800a136:	4603      	mov	r3, r0
 800a138:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a13a:	79fb      	ldrb	r3, [r7, #7]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d109      	bne.n	800a154 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800a140:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a144:	4806      	ldr	r0, [pc, #24]	; (800a160 <BSP_SD_Init+0x48>)
 800a146:	f7fd ffb9 	bl	80080bc <HAL_SD_ConfigWideBusOperation>
 800a14a:	4603      	mov	r3, r0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d001      	beq.n	800a154 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a150:	2301      	movs	r3, #1
 800a152:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a154:	79fb      	ldrb	r3, [r7, #7]
}
 800a156:	4618      	mov	r0, r3
 800a158:	3708      	adds	r7, #8
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop
 800a160:	200006bc 	.word	0x200006bc

0800a164 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b088      	sub	sp, #32
 800a168:	af02      	add	r7, sp, #8
 800a16a:	60f8      	str	r0, [r7, #12]
 800a16c:	60b9      	str	r1, [r7, #8]
 800a16e:	607a      	str	r2, [r7, #4]
 800a170:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a172:	2300      	movs	r3, #0
 800a174:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	9300      	str	r3, [sp, #0]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	68ba      	ldr	r2, [r7, #8]
 800a17e:	68f9      	ldr	r1, [r7, #12]
 800a180:	4806      	ldr	r0, [pc, #24]	; (800a19c <BSP_SD_ReadBlocks+0x38>)
 800a182:	f7fd fa67 	bl	8007654 <HAL_SD_ReadBlocks>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d001      	beq.n	800a190 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a18c:	2301      	movs	r3, #1
 800a18e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a190:	7dfb      	ldrb	r3, [r7, #23]
}
 800a192:	4618      	mov	r0, r3
 800a194:	3718      	adds	r7, #24
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	200006bc 	.word	0x200006bc

0800a1a0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b088      	sub	sp, #32
 800a1a4:	af02      	add	r7, sp, #8
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	607a      	str	r2, [r7, #4]
 800a1ac:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	9300      	str	r3, [sp, #0]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	68ba      	ldr	r2, [r7, #8]
 800a1ba:	68f9      	ldr	r1, [r7, #12]
 800a1bc:	4806      	ldr	r0, [pc, #24]	; (800a1d8 <BSP_SD_WriteBlocks+0x38>)
 800a1be:	f7fd fc27 	bl	8007a10 <HAL_SD_WriteBlocks>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d001      	beq.n	800a1cc <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a1cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3718      	adds	r7, #24
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	200006bc 	.word	0x200006bc

0800a1dc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a1e0:	4805      	ldr	r0, [pc, #20]	; (800a1f8 <BSP_SD_GetCardState+0x1c>)
 800a1e2:	f7fe f805 	bl	80081f0 <HAL_SD_GetCardState>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	2b04      	cmp	r3, #4
 800a1ea:	bf14      	ite	ne
 800a1ec:	2301      	movne	r3, #1
 800a1ee:	2300      	moveq	r3, #0
 800a1f0:	b2db      	uxtb	r3, r3
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	bd80      	pop	{r7, pc}
 800a1f6:	bf00      	nop
 800a1f8:	200006bc 	.word	0x200006bc

0800a1fc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a204:	6879      	ldr	r1, [r7, #4]
 800a206:	4803      	ldr	r0, [pc, #12]	; (800a214 <BSP_SD_GetCardInfo+0x18>)
 800a208:	f7fd ff2c 	bl	8008064 <HAL_SD_GetCardInfo>
}
 800a20c:	bf00      	nop
 800a20e:	3708      	adds	r7, #8
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}
 800a214:	200006bc 	.word	0x200006bc

0800a218 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a21e:	2301      	movs	r3, #1
 800a220:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800a222:	79fb      	ldrb	r3, [r7, #7]
 800a224:	b2db      	uxtb	r3, r3
}
 800a226:	4618      	mov	r0, r3
 800a228:	370c      	adds	r7, #12
 800a22a:	46bd      	mov	sp, r7
 800a22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a230:	4770      	bx	lr
	...

0800a234 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b082      	sub	sp, #8
 800a238:	af00      	add	r7, sp, #0
 800a23a:	4603      	mov	r3, r0
 800a23c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a23e:	4b0b      	ldr	r3, [pc, #44]	; (800a26c <SD_CheckStatus+0x38>)
 800a240:	2201      	movs	r2, #1
 800a242:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a244:	f7ff ffca 	bl	800a1dc <BSP_SD_GetCardState>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d107      	bne.n	800a25e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a24e:	4b07      	ldr	r3, [pc, #28]	; (800a26c <SD_CheckStatus+0x38>)
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	b2db      	uxtb	r3, r3
 800a254:	f023 0301 	bic.w	r3, r3, #1
 800a258:	b2da      	uxtb	r2, r3
 800a25a:	4b04      	ldr	r3, [pc, #16]	; (800a26c <SD_CheckStatus+0x38>)
 800a25c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a25e:	4b03      	ldr	r3, [pc, #12]	; (800a26c <SD_CheckStatus+0x38>)
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	b2db      	uxtb	r3, r3
}
 800a264:	4618      	mov	r0, r3
 800a266:	3708      	adds	r7, #8
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	20000059 	.word	0x20000059

0800a270 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
 800a276:	4603      	mov	r3, r0
 800a278:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800a27a:	4b0b      	ldr	r3, [pc, #44]	; (800a2a8 <SD_initialize+0x38>)
 800a27c:	2201      	movs	r2, #1
 800a27e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a280:	f7ff ff4a 	bl	800a118 <BSP_SD_Init>
 800a284:	4603      	mov	r3, r0
 800a286:	2b00      	cmp	r3, #0
 800a288:	d107      	bne.n	800a29a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800a28a:	79fb      	ldrb	r3, [r7, #7]
 800a28c:	4618      	mov	r0, r3
 800a28e:	f7ff ffd1 	bl	800a234 <SD_CheckStatus>
 800a292:	4603      	mov	r3, r0
 800a294:	461a      	mov	r2, r3
 800a296:	4b04      	ldr	r3, [pc, #16]	; (800a2a8 <SD_initialize+0x38>)
 800a298:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a29a:	4b03      	ldr	r3, [pc, #12]	; (800a2a8 <SD_initialize+0x38>)
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	b2db      	uxtb	r3, r3
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3708      	adds	r7, #8
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	20000059 	.word	0x20000059

0800a2ac <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a2b6:	79fb      	ldrb	r3, [r7, #7]
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f7ff ffbb 	bl	800a234 <SD_CheckStatus>
 800a2be:	4603      	mov	r3, r0
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3708      	adds	r7, #8
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}

0800a2c8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b086      	sub	sp, #24
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60b9      	str	r1, [r7, #8]
 800a2d0:	607a      	str	r2, [r7, #4]
 800a2d2:	603b      	str	r3, [r7, #0]
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a2dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a2e0:	683a      	ldr	r2, [r7, #0]
 800a2e2:	6879      	ldr	r1, [r7, #4]
 800a2e4:	68b8      	ldr	r0, [r7, #8]
 800a2e6:	f7ff ff3d 	bl	800a164 <BSP_SD_ReadBlocks>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d107      	bne.n	800a300 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a2f0:	bf00      	nop
 800a2f2:	f7ff ff73 	bl	800a1dc <BSP_SD_GetCardState>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d1fa      	bne.n	800a2f2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a300:	7dfb      	ldrb	r3, [r7, #23]
}
 800a302:	4618      	mov	r0, r3
 800a304:	3718      	adds	r7, #24
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}

0800a30a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a30a:	b580      	push	{r7, lr}
 800a30c:	b086      	sub	sp, #24
 800a30e:	af00      	add	r7, sp, #0
 800a310:	60b9      	str	r1, [r7, #8]
 800a312:	607a      	str	r2, [r7, #4]
 800a314:	603b      	str	r3, [r7, #0]
 800a316:	4603      	mov	r3, r0
 800a318:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a31a:	2301      	movs	r3, #1
 800a31c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a31e:	f04f 33ff 	mov.w	r3, #4294967295
 800a322:	683a      	ldr	r2, [r7, #0]
 800a324:	6879      	ldr	r1, [r7, #4]
 800a326:	68b8      	ldr	r0, [r7, #8]
 800a328:	f7ff ff3a 	bl	800a1a0 <BSP_SD_WriteBlocks>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d107      	bne.n	800a342 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800a332:	bf00      	nop
 800a334:	f7ff ff52 	bl	800a1dc <BSP_SD_GetCardState>
 800a338:	4603      	mov	r3, r0
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d1fa      	bne.n	800a334 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800a33e:	2300      	movs	r3, #0
 800a340:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800a342:	7dfb      	ldrb	r3, [r7, #23]
}
 800a344:	4618      	mov	r0, r3
 800a346:	3718      	adds	r7, #24
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b08c      	sub	sp, #48	; 0x30
 800a350:	af00      	add	r7, sp, #0
 800a352:	4603      	mov	r3, r0
 800a354:	603a      	str	r2, [r7, #0]
 800a356:	71fb      	strb	r3, [r7, #7]
 800a358:	460b      	mov	r3, r1
 800a35a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a35c:	2301      	movs	r3, #1
 800a35e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a362:	4b25      	ldr	r3, [pc, #148]	; (800a3f8 <SD_ioctl+0xac>)
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	b2db      	uxtb	r3, r3
 800a368:	f003 0301 	and.w	r3, r3, #1
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d001      	beq.n	800a374 <SD_ioctl+0x28>
 800a370:	2303      	movs	r3, #3
 800a372:	e03c      	b.n	800a3ee <SD_ioctl+0xa2>

  switch (cmd)
 800a374:	79bb      	ldrb	r3, [r7, #6]
 800a376:	2b03      	cmp	r3, #3
 800a378:	d834      	bhi.n	800a3e4 <SD_ioctl+0x98>
 800a37a:	a201      	add	r2, pc, #4	; (adr r2, 800a380 <SD_ioctl+0x34>)
 800a37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a380:	0800a391 	.word	0x0800a391
 800a384:	0800a399 	.word	0x0800a399
 800a388:	0800a3b1 	.word	0x0800a3b1
 800a38c:	0800a3cb 	.word	0x0800a3cb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a390:	2300      	movs	r3, #0
 800a392:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a396:	e028      	b.n	800a3ea <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a398:	f107 030c 	add.w	r3, r7, #12
 800a39c:	4618      	mov	r0, r3
 800a39e:	f7ff ff2d 	bl	800a1fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a3a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a3ae:	e01c      	b.n	800a3ea <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a3b0:	f107 030c 	add.w	r3, r7, #12
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f7ff ff21 	bl	800a1fc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3bc:	b29a      	uxth	r2, r3
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a3c8:	e00f      	b.n	800a3ea <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a3ca:	f107 030c 	add.w	r3, r7, #12
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7ff ff14 	bl	800a1fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d6:	0a5a      	lsrs	r2, r3, #9
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a3e2:	e002      	b.n	800a3ea <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a3e4:	2304      	movs	r3, #4
 800a3e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a3ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3730      	adds	r7, #48	; 0x30
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
 800a3f6:	bf00      	nop
 800a3f8:	20000059 	.word	0x20000059

0800a3fc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
 800a402:	4603      	mov	r3, r0
 800a404:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a406:	79fb      	ldrb	r3, [r7, #7]
 800a408:	4a08      	ldr	r2, [pc, #32]	; (800a42c <disk_status+0x30>)
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	4413      	add	r3, r2
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	79fa      	ldrb	r2, [r7, #7]
 800a414:	4905      	ldr	r1, [pc, #20]	; (800a42c <disk_status+0x30>)
 800a416:	440a      	add	r2, r1
 800a418:	7a12      	ldrb	r2, [r2, #8]
 800a41a:	4610      	mov	r0, r2
 800a41c:	4798      	blx	r3
 800a41e:	4603      	mov	r3, r0
 800a420:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a422:	7bfb      	ldrb	r3, [r7, #15]
}
 800a424:	4618      	mov	r0, r3
 800a426:	3710      	adds	r7, #16
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}
 800a42c:	20000c28 	.word	0x20000c28

0800a430 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	4603      	mov	r3, r0
 800a438:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a43a:	2300      	movs	r3, #0
 800a43c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a43e:	79fb      	ldrb	r3, [r7, #7]
 800a440:	4a0d      	ldr	r2, [pc, #52]	; (800a478 <disk_initialize+0x48>)
 800a442:	5cd3      	ldrb	r3, [r2, r3]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d111      	bne.n	800a46c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a448:	79fb      	ldrb	r3, [r7, #7]
 800a44a:	4a0b      	ldr	r2, [pc, #44]	; (800a478 <disk_initialize+0x48>)
 800a44c:	2101      	movs	r1, #1
 800a44e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a450:	79fb      	ldrb	r3, [r7, #7]
 800a452:	4a09      	ldr	r2, [pc, #36]	; (800a478 <disk_initialize+0x48>)
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	4413      	add	r3, r2
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	79fa      	ldrb	r2, [r7, #7]
 800a45e:	4906      	ldr	r1, [pc, #24]	; (800a478 <disk_initialize+0x48>)
 800a460:	440a      	add	r2, r1
 800a462:	7a12      	ldrb	r2, [r2, #8]
 800a464:	4610      	mov	r0, r2
 800a466:	4798      	blx	r3
 800a468:	4603      	mov	r3, r0
 800a46a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a46c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3710      	adds	r7, #16
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
 800a476:	bf00      	nop
 800a478:	20000c28 	.word	0x20000c28

0800a47c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a47c:	b590      	push	{r4, r7, lr}
 800a47e:	b087      	sub	sp, #28
 800a480:	af00      	add	r7, sp, #0
 800a482:	60b9      	str	r1, [r7, #8]
 800a484:	607a      	str	r2, [r7, #4]
 800a486:	603b      	str	r3, [r7, #0]
 800a488:	4603      	mov	r3, r0
 800a48a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a48c:	7bfb      	ldrb	r3, [r7, #15]
 800a48e:	4a0a      	ldr	r2, [pc, #40]	; (800a4b8 <disk_read+0x3c>)
 800a490:	009b      	lsls	r3, r3, #2
 800a492:	4413      	add	r3, r2
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	689c      	ldr	r4, [r3, #8]
 800a498:	7bfb      	ldrb	r3, [r7, #15]
 800a49a:	4a07      	ldr	r2, [pc, #28]	; (800a4b8 <disk_read+0x3c>)
 800a49c:	4413      	add	r3, r2
 800a49e:	7a18      	ldrb	r0, [r3, #8]
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	687a      	ldr	r2, [r7, #4]
 800a4a4:	68b9      	ldr	r1, [r7, #8]
 800a4a6:	47a0      	blx	r4
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	75fb      	strb	r3, [r7, #23]
  return res;
 800a4ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	371c      	adds	r7, #28
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd90      	pop	{r4, r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	20000c28 	.word	0x20000c28

0800a4bc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a4bc:	b590      	push	{r4, r7, lr}
 800a4be:	b087      	sub	sp, #28
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	60b9      	str	r1, [r7, #8]
 800a4c4:	607a      	str	r2, [r7, #4]
 800a4c6:	603b      	str	r3, [r7, #0]
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a4cc:	7bfb      	ldrb	r3, [r7, #15]
 800a4ce:	4a0a      	ldr	r2, [pc, #40]	; (800a4f8 <disk_write+0x3c>)
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	4413      	add	r3, r2
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	68dc      	ldr	r4, [r3, #12]
 800a4d8:	7bfb      	ldrb	r3, [r7, #15]
 800a4da:	4a07      	ldr	r2, [pc, #28]	; (800a4f8 <disk_write+0x3c>)
 800a4dc:	4413      	add	r3, r2
 800a4de:	7a18      	ldrb	r0, [r3, #8]
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	687a      	ldr	r2, [r7, #4]
 800a4e4:	68b9      	ldr	r1, [r7, #8]
 800a4e6:	47a0      	blx	r4
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	75fb      	strb	r3, [r7, #23]
  return res;
 800a4ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	371c      	adds	r7, #28
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd90      	pop	{r4, r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	20000c28 	.word	0x20000c28

0800a4fc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b084      	sub	sp, #16
 800a500:	af00      	add	r7, sp, #0
 800a502:	4603      	mov	r3, r0
 800a504:	603a      	str	r2, [r7, #0]
 800a506:	71fb      	strb	r3, [r7, #7]
 800a508:	460b      	mov	r3, r1
 800a50a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a50c:	79fb      	ldrb	r3, [r7, #7]
 800a50e:	4a09      	ldr	r2, [pc, #36]	; (800a534 <disk_ioctl+0x38>)
 800a510:	009b      	lsls	r3, r3, #2
 800a512:	4413      	add	r3, r2
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	691b      	ldr	r3, [r3, #16]
 800a518:	79fa      	ldrb	r2, [r7, #7]
 800a51a:	4906      	ldr	r1, [pc, #24]	; (800a534 <disk_ioctl+0x38>)
 800a51c:	440a      	add	r2, r1
 800a51e:	7a10      	ldrb	r0, [r2, #8]
 800a520:	79b9      	ldrb	r1, [r7, #6]
 800a522:	683a      	ldr	r2, [r7, #0]
 800a524:	4798      	blx	r3
 800a526:	4603      	mov	r3, r0
 800a528:	73fb      	strb	r3, [r7, #15]
  return res;
 800a52a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3710      	adds	r7, #16
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}
 800a534:	20000c28 	.word	0x20000c28

0800a538 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a538:	b480      	push	{r7}
 800a53a:	b085      	sub	sp, #20
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	3301      	adds	r3, #1
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a548:	89fb      	ldrh	r3, [r7, #14]
 800a54a:	021b      	lsls	r3, r3, #8
 800a54c:	b21a      	sxth	r2, r3
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	b21b      	sxth	r3, r3
 800a554:	4313      	orrs	r3, r2
 800a556:	b21b      	sxth	r3, r3
 800a558:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a55a:	89fb      	ldrh	r3, [r7, #14]
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3714      	adds	r7, #20
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr

0800a568 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a568:	b480      	push	{r7}
 800a56a:	b085      	sub	sp, #20
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	3303      	adds	r3, #3
 800a574:	781b      	ldrb	r3, [r3, #0]
 800a576:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	021b      	lsls	r3, r3, #8
 800a57c:	687a      	ldr	r2, [r7, #4]
 800a57e:	3202      	adds	r2, #2
 800a580:	7812      	ldrb	r2, [r2, #0]
 800a582:	4313      	orrs	r3, r2
 800a584:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	021b      	lsls	r3, r3, #8
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	3201      	adds	r2, #1
 800a58e:	7812      	ldrb	r2, [r2, #0]
 800a590:	4313      	orrs	r3, r2
 800a592:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	021b      	lsls	r3, r3, #8
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	7812      	ldrb	r2, [r2, #0]
 800a59c:	4313      	orrs	r3, r2
 800a59e:	60fb      	str	r3, [r7, #12]
	return rv;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3714      	adds	r7, #20
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr

0800a5ae <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a5ae:	b480      	push	{r7}
 800a5b0:	b083      	sub	sp, #12
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	1c5a      	adds	r2, r3, #1
 800a5be:	607a      	str	r2, [r7, #4]
 800a5c0:	887a      	ldrh	r2, [r7, #2]
 800a5c2:	b2d2      	uxtb	r2, r2
 800a5c4:	701a      	strb	r2, [r3, #0]
 800a5c6:	887b      	ldrh	r3, [r7, #2]
 800a5c8:	0a1b      	lsrs	r3, r3, #8
 800a5ca:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	1c5a      	adds	r2, r3, #1
 800a5d0:	607a      	str	r2, [r7, #4]
 800a5d2:	887a      	ldrh	r2, [r7, #2]
 800a5d4:	b2d2      	uxtb	r2, r2
 800a5d6:	701a      	strb	r2, [r3, #0]
}
 800a5d8:	bf00      	nop
 800a5da:	370c      	adds	r7, #12
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b083      	sub	sp, #12
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	1c5a      	adds	r2, r3, #1
 800a5f2:	607a      	str	r2, [r7, #4]
 800a5f4:	683a      	ldr	r2, [r7, #0]
 800a5f6:	b2d2      	uxtb	r2, r2
 800a5f8:	701a      	strb	r2, [r3, #0]
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	0a1b      	lsrs	r3, r3, #8
 800a5fe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	1c5a      	adds	r2, r3, #1
 800a604:	607a      	str	r2, [r7, #4]
 800a606:	683a      	ldr	r2, [r7, #0]
 800a608:	b2d2      	uxtb	r2, r2
 800a60a:	701a      	strb	r2, [r3, #0]
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	0a1b      	lsrs	r3, r3, #8
 800a610:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	1c5a      	adds	r2, r3, #1
 800a616:	607a      	str	r2, [r7, #4]
 800a618:	683a      	ldr	r2, [r7, #0]
 800a61a:	b2d2      	uxtb	r2, r2
 800a61c:	701a      	strb	r2, [r3, #0]
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	0a1b      	lsrs	r3, r3, #8
 800a622:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	1c5a      	adds	r2, r3, #1
 800a628:	607a      	str	r2, [r7, #4]
 800a62a:	683a      	ldr	r2, [r7, #0]
 800a62c:	b2d2      	uxtb	r2, r2
 800a62e:	701a      	strb	r2, [r3, #0]
}
 800a630:	bf00      	nop
 800a632:	370c      	adds	r7, #12
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr

0800a63c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a63c:	b480      	push	{r7}
 800a63e:	b087      	sub	sp, #28
 800a640:	af00      	add	r7, sp, #0
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	60b9      	str	r1, [r7, #8]
 800a646:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d00d      	beq.n	800a672 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a656:	693a      	ldr	r2, [r7, #16]
 800a658:	1c53      	adds	r3, r2, #1
 800a65a:	613b      	str	r3, [r7, #16]
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	1c59      	adds	r1, r3, #1
 800a660:	6179      	str	r1, [r7, #20]
 800a662:	7812      	ldrb	r2, [r2, #0]
 800a664:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	3b01      	subs	r3, #1
 800a66a:	607b      	str	r3, [r7, #4]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d1f1      	bne.n	800a656 <mem_cpy+0x1a>
	}
}
 800a672:	bf00      	nop
 800a674:	371c      	adds	r7, #28
 800a676:	46bd      	mov	sp, r7
 800a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67c:	4770      	bx	lr

0800a67e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a67e:	b480      	push	{r7}
 800a680:	b087      	sub	sp, #28
 800a682:	af00      	add	r7, sp, #0
 800a684:	60f8      	str	r0, [r7, #12]
 800a686:	60b9      	str	r1, [r7, #8]
 800a688:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	1c5a      	adds	r2, r3, #1
 800a692:	617a      	str	r2, [r7, #20]
 800a694:	68ba      	ldr	r2, [r7, #8]
 800a696:	b2d2      	uxtb	r2, r2
 800a698:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	3b01      	subs	r3, #1
 800a69e:	607b      	str	r3, [r7, #4]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d1f3      	bne.n	800a68e <mem_set+0x10>
}
 800a6a6:	bf00      	nop
 800a6a8:	bf00      	nop
 800a6aa:	371c      	adds	r7, #28
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr

0800a6b4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a6b4:	b480      	push	{r7}
 800a6b6:	b089      	sub	sp, #36	; 0x24
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	60f8      	str	r0, [r7, #12]
 800a6bc:	60b9      	str	r1, [r7, #8]
 800a6be:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	61fb      	str	r3, [r7, #28]
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a6cc:	69fb      	ldr	r3, [r7, #28]
 800a6ce:	1c5a      	adds	r2, r3, #1
 800a6d0:	61fa      	str	r2, [r7, #28]
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	69bb      	ldr	r3, [r7, #24]
 800a6d8:	1c5a      	adds	r2, r3, #1
 800a6da:	61ba      	str	r2, [r7, #24]
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	1acb      	subs	r3, r1, r3
 800a6e0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	3b01      	subs	r3, #1
 800a6e6:	607b      	str	r3, [r7, #4]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d002      	beq.n	800a6f4 <mem_cmp+0x40>
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d0eb      	beq.n	800a6cc <mem_cmp+0x18>

	return r;
 800a6f4:	697b      	ldr	r3, [r7, #20]
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3724      	adds	r7, #36	; 0x24
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a700:	4770      	bx	lr

0800a702 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a702:	b480      	push	{r7}
 800a704:	b083      	sub	sp, #12
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
 800a70a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a70c:	e002      	b.n	800a714 <chk_chr+0x12>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	3301      	adds	r3, #1
 800a712:	607b      	str	r3, [r7, #4]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d005      	beq.n	800a728 <chk_chr+0x26>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	781b      	ldrb	r3, [r3, #0]
 800a720:	461a      	mov	r2, r3
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	4293      	cmp	r3, r2
 800a726:	d1f2      	bne.n	800a70e <chk_chr+0xc>
	return *str;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	781b      	ldrb	r3, [r3, #0]
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	370c      	adds	r7, #12
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr

0800a738 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a738:	b480      	push	{r7}
 800a73a:	b085      	sub	sp, #20
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a742:	2300      	movs	r3, #0
 800a744:	60bb      	str	r3, [r7, #8]
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	60fb      	str	r3, [r7, #12]
 800a74a:	e029      	b.n	800a7a0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a74c:	4a27      	ldr	r2, [pc, #156]	; (800a7ec <chk_lock+0xb4>)
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	011b      	lsls	r3, r3, #4
 800a752:	4413      	add	r3, r2
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d01d      	beq.n	800a796 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a75a:	4a24      	ldr	r2, [pc, #144]	; (800a7ec <chk_lock+0xb4>)
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	011b      	lsls	r3, r3, #4
 800a760:	4413      	add	r3, r2
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	429a      	cmp	r2, r3
 800a76a:	d116      	bne.n	800a79a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a76c:	4a1f      	ldr	r2, [pc, #124]	; (800a7ec <chk_lock+0xb4>)
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	011b      	lsls	r3, r3, #4
 800a772:	4413      	add	r3, r2
 800a774:	3304      	adds	r3, #4
 800a776:	681a      	ldr	r2, [r3, #0]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d10c      	bne.n	800a79a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a780:	4a1a      	ldr	r2, [pc, #104]	; (800a7ec <chk_lock+0xb4>)
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	011b      	lsls	r3, r3, #4
 800a786:	4413      	add	r3, r2
 800a788:	3308      	adds	r3, #8
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a790:	429a      	cmp	r2, r3
 800a792:	d102      	bne.n	800a79a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a794:	e007      	b.n	800a7a6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a796:	2301      	movs	r3, #1
 800a798:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	3301      	adds	r3, #1
 800a79e:	60fb      	str	r3, [r7, #12]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2b01      	cmp	r3, #1
 800a7a4:	d9d2      	bls.n	800a74c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2b02      	cmp	r3, #2
 800a7aa:	d109      	bne.n	800a7c0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d102      	bne.n	800a7b8 <chk_lock+0x80>
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	2b02      	cmp	r3, #2
 800a7b6:	d101      	bne.n	800a7bc <chk_lock+0x84>
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	e010      	b.n	800a7de <chk_lock+0xa6>
 800a7bc:	2312      	movs	r3, #18
 800a7be:	e00e      	b.n	800a7de <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d108      	bne.n	800a7d8 <chk_lock+0xa0>
 800a7c6:	4a09      	ldr	r2, [pc, #36]	; (800a7ec <chk_lock+0xb4>)
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	011b      	lsls	r3, r3, #4
 800a7cc:	4413      	add	r3, r2
 800a7ce:	330c      	adds	r3, #12
 800a7d0:	881b      	ldrh	r3, [r3, #0]
 800a7d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7d6:	d101      	bne.n	800a7dc <chk_lock+0xa4>
 800a7d8:	2310      	movs	r3, #16
 800a7da:	e000      	b.n	800a7de <chk_lock+0xa6>
 800a7dc:	2300      	movs	r3, #0
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3714      	adds	r7, #20
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr
 800a7ea:	bf00      	nop
 800a7ec:	20000c08 	.word	0x20000c08

0800a7f0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	607b      	str	r3, [r7, #4]
 800a7fa:	e002      	b.n	800a802 <enq_lock+0x12>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	3301      	adds	r3, #1
 800a800:	607b      	str	r3, [r7, #4]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2b01      	cmp	r3, #1
 800a806:	d806      	bhi.n	800a816 <enq_lock+0x26>
 800a808:	4a09      	ldr	r2, [pc, #36]	; (800a830 <enq_lock+0x40>)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	011b      	lsls	r3, r3, #4
 800a80e:	4413      	add	r3, r2
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d1f2      	bne.n	800a7fc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2b02      	cmp	r3, #2
 800a81a:	bf14      	ite	ne
 800a81c:	2301      	movne	r3, #1
 800a81e:	2300      	moveq	r3, #0
 800a820:	b2db      	uxtb	r3, r3
}
 800a822:	4618      	mov	r0, r3
 800a824:	370c      	adds	r7, #12
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr
 800a82e:	bf00      	nop
 800a830:	20000c08 	.word	0x20000c08

0800a834 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a834:	b480      	push	{r7}
 800a836:	b085      	sub	sp, #20
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a83e:	2300      	movs	r3, #0
 800a840:	60fb      	str	r3, [r7, #12]
 800a842:	e01f      	b.n	800a884 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a844:	4a41      	ldr	r2, [pc, #260]	; (800a94c <inc_lock+0x118>)
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	011b      	lsls	r3, r3, #4
 800a84a:	4413      	add	r3, r2
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	429a      	cmp	r2, r3
 800a854:	d113      	bne.n	800a87e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a856:	4a3d      	ldr	r2, [pc, #244]	; (800a94c <inc_lock+0x118>)
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	011b      	lsls	r3, r3, #4
 800a85c:	4413      	add	r3, r2
 800a85e:	3304      	adds	r3, #4
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a866:	429a      	cmp	r2, r3
 800a868:	d109      	bne.n	800a87e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a86a:	4a38      	ldr	r2, [pc, #224]	; (800a94c <inc_lock+0x118>)
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	011b      	lsls	r3, r3, #4
 800a870:	4413      	add	r3, r2
 800a872:	3308      	adds	r3, #8
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d006      	beq.n	800a88c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	3301      	adds	r3, #1
 800a882:	60fb      	str	r3, [r7, #12]
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2b01      	cmp	r3, #1
 800a888:	d9dc      	bls.n	800a844 <inc_lock+0x10>
 800a88a:	e000      	b.n	800a88e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a88c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2b02      	cmp	r3, #2
 800a892:	d132      	bne.n	800a8fa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a894:	2300      	movs	r3, #0
 800a896:	60fb      	str	r3, [r7, #12]
 800a898:	e002      	b.n	800a8a0 <inc_lock+0x6c>
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	3301      	adds	r3, #1
 800a89e:	60fb      	str	r3, [r7, #12]
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d806      	bhi.n	800a8b4 <inc_lock+0x80>
 800a8a6:	4a29      	ldr	r2, [pc, #164]	; (800a94c <inc_lock+0x118>)
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	011b      	lsls	r3, r3, #4
 800a8ac:	4413      	add	r3, r2
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d1f2      	bne.n	800a89a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2b02      	cmp	r3, #2
 800a8b8:	d101      	bne.n	800a8be <inc_lock+0x8a>
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	e040      	b.n	800a940 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	4922      	ldr	r1, [pc, #136]	; (800a94c <inc_lock+0x118>)
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	011b      	lsls	r3, r3, #4
 800a8c8:	440b      	add	r3, r1
 800a8ca:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	689a      	ldr	r2, [r3, #8]
 800a8d0:	491e      	ldr	r1, [pc, #120]	; (800a94c <inc_lock+0x118>)
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	011b      	lsls	r3, r3, #4
 800a8d6:	440b      	add	r3, r1
 800a8d8:	3304      	adds	r3, #4
 800a8da:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	695a      	ldr	r2, [r3, #20]
 800a8e0:	491a      	ldr	r1, [pc, #104]	; (800a94c <inc_lock+0x118>)
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	011b      	lsls	r3, r3, #4
 800a8e6:	440b      	add	r3, r1
 800a8e8:	3308      	adds	r3, #8
 800a8ea:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a8ec:	4a17      	ldr	r2, [pc, #92]	; (800a94c <inc_lock+0x118>)
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	011b      	lsls	r3, r3, #4
 800a8f2:	4413      	add	r3, r2
 800a8f4:	330c      	adds	r3, #12
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d009      	beq.n	800a914 <inc_lock+0xe0>
 800a900:	4a12      	ldr	r2, [pc, #72]	; (800a94c <inc_lock+0x118>)
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	011b      	lsls	r3, r3, #4
 800a906:	4413      	add	r3, r2
 800a908:	330c      	adds	r3, #12
 800a90a:	881b      	ldrh	r3, [r3, #0]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d001      	beq.n	800a914 <inc_lock+0xe0>
 800a910:	2300      	movs	r3, #0
 800a912:	e015      	b.n	800a940 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d108      	bne.n	800a92c <inc_lock+0xf8>
 800a91a:	4a0c      	ldr	r2, [pc, #48]	; (800a94c <inc_lock+0x118>)
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	011b      	lsls	r3, r3, #4
 800a920:	4413      	add	r3, r2
 800a922:	330c      	adds	r3, #12
 800a924:	881b      	ldrh	r3, [r3, #0]
 800a926:	3301      	adds	r3, #1
 800a928:	b29a      	uxth	r2, r3
 800a92a:	e001      	b.n	800a930 <inc_lock+0xfc>
 800a92c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a930:	4906      	ldr	r1, [pc, #24]	; (800a94c <inc_lock+0x118>)
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	011b      	lsls	r3, r3, #4
 800a936:	440b      	add	r3, r1
 800a938:	330c      	adds	r3, #12
 800a93a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	3301      	adds	r3, #1
}
 800a940:	4618      	mov	r0, r3
 800a942:	3714      	adds	r7, #20
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr
 800a94c:	20000c08 	.word	0x20000c08

0800a950 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a950:	b480      	push	{r7}
 800a952:	b085      	sub	sp, #20
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	3b01      	subs	r3, #1
 800a95c:	607b      	str	r3, [r7, #4]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2b01      	cmp	r3, #1
 800a962:	d825      	bhi.n	800a9b0 <dec_lock+0x60>
		n = Files[i].ctr;
 800a964:	4a17      	ldr	r2, [pc, #92]	; (800a9c4 <dec_lock+0x74>)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	011b      	lsls	r3, r3, #4
 800a96a:	4413      	add	r3, r2
 800a96c:	330c      	adds	r3, #12
 800a96e:	881b      	ldrh	r3, [r3, #0]
 800a970:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a972:	89fb      	ldrh	r3, [r7, #14]
 800a974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a978:	d101      	bne.n	800a97e <dec_lock+0x2e>
 800a97a:	2300      	movs	r3, #0
 800a97c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a97e:	89fb      	ldrh	r3, [r7, #14]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d002      	beq.n	800a98a <dec_lock+0x3a>
 800a984:	89fb      	ldrh	r3, [r7, #14]
 800a986:	3b01      	subs	r3, #1
 800a988:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a98a:	4a0e      	ldr	r2, [pc, #56]	; (800a9c4 <dec_lock+0x74>)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	011b      	lsls	r3, r3, #4
 800a990:	4413      	add	r3, r2
 800a992:	330c      	adds	r3, #12
 800a994:	89fa      	ldrh	r2, [r7, #14]
 800a996:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a998:	89fb      	ldrh	r3, [r7, #14]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d105      	bne.n	800a9aa <dec_lock+0x5a>
 800a99e:	4a09      	ldr	r2, [pc, #36]	; (800a9c4 <dec_lock+0x74>)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	011b      	lsls	r3, r3, #4
 800a9a4:	4413      	add	r3, r2
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	737b      	strb	r3, [r7, #13]
 800a9ae:	e001      	b.n	800a9b4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a9b0:	2302      	movs	r3, #2
 800a9b2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a9b4:	7b7b      	ldrb	r3, [r7, #13]
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3714      	adds	r7, #20
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr
 800a9c2:	bf00      	nop
 800a9c4:	20000c08 	.word	0x20000c08

0800a9c8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b085      	sub	sp, #20
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	60fb      	str	r3, [r7, #12]
 800a9d4:	e010      	b.n	800a9f8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a9d6:	4a0d      	ldr	r2, [pc, #52]	; (800aa0c <clear_lock+0x44>)
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	011b      	lsls	r3, r3, #4
 800a9dc:	4413      	add	r3, r2
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d105      	bne.n	800a9f2 <clear_lock+0x2a>
 800a9e6:	4a09      	ldr	r2, [pc, #36]	; (800aa0c <clear_lock+0x44>)
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	011b      	lsls	r3, r3, #4
 800a9ec:	4413      	add	r3, r2
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	60fb      	str	r3, [r7, #12]
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2b01      	cmp	r3, #1
 800a9fc:	d9eb      	bls.n	800a9d6 <clear_lock+0xe>
	}
}
 800a9fe:	bf00      	nop
 800aa00:	bf00      	nop
 800aa02:	3714      	adds	r7, #20
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr
 800aa0c:	20000c08 	.word	0x20000c08

0800aa10 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b086      	sub	sp, #24
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	78db      	ldrb	r3, [r3, #3]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d034      	beq.n	800aa8e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa28:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	7858      	ldrb	r0, [r3, #1]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aa34:	2301      	movs	r3, #1
 800aa36:	697a      	ldr	r2, [r7, #20]
 800aa38:	f7ff fd40 	bl	800a4bc <disk_write>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d002      	beq.n	800aa48 <sync_window+0x38>
			res = FR_DISK_ERR;
 800aa42:	2301      	movs	r3, #1
 800aa44:	73fb      	strb	r3, [r7, #15]
 800aa46:	e022      	b.n	800aa8e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6a1b      	ldr	r3, [r3, #32]
 800aa52:	697a      	ldr	r2, [r7, #20]
 800aa54:	1ad2      	subs	r2, r2, r3
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	699b      	ldr	r3, [r3, #24]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	d217      	bcs.n	800aa8e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	789b      	ldrb	r3, [r3, #2]
 800aa62:	613b      	str	r3, [r7, #16]
 800aa64:	e010      	b.n	800aa88 <sync_window+0x78>
					wsect += fs->fsize;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	699b      	ldr	r3, [r3, #24]
 800aa6a:	697a      	ldr	r2, [r7, #20]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	7858      	ldrb	r0, [r3, #1]
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	697a      	ldr	r2, [r7, #20]
 800aa7e:	f7ff fd1d 	bl	800a4bc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	3b01      	subs	r3, #1
 800aa86:	613b      	str	r3, [r7, #16]
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d8eb      	bhi.n	800aa66 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800aa8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3718      	adds	r7, #24
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b084      	sub	sp, #16
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaaa:	683a      	ldr	r2, [r7, #0]
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d01b      	beq.n	800aae8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f7ff ffad 	bl	800aa10 <sync_window>
 800aab6:	4603      	mov	r3, r0
 800aab8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800aaba:	7bfb      	ldrb	r3, [r7, #15]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d113      	bne.n	800aae8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	7858      	ldrb	r0, [r3, #1]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aaca:	2301      	movs	r3, #1
 800aacc:	683a      	ldr	r2, [r7, #0]
 800aace:	f7ff fcd5 	bl	800a47c <disk_read>
 800aad2:	4603      	mov	r3, r0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d004      	beq.n	800aae2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800aad8:	f04f 33ff 	mov.w	r3, #4294967295
 800aadc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800aade:	2301      	movs	r3, #1
 800aae0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	683a      	ldr	r2, [r7, #0]
 800aae6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800aae8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3710      	adds	r7, #16
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
	...

0800aaf4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b084      	sub	sp, #16
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f7ff ff87 	bl	800aa10 <sync_window>
 800ab02:	4603      	mov	r3, r0
 800ab04:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ab06:	7bfb      	ldrb	r3, [r7, #15]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d158      	bne.n	800abbe <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	2b03      	cmp	r3, #3
 800ab12:	d148      	bne.n	800aba6 <sync_fs+0xb2>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	791b      	ldrb	r3, [r3, #4]
 800ab18:	2b01      	cmp	r3, #1
 800ab1a:	d144      	bne.n	800aba6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	3330      	adds	r3, #48	; 0x30
 800ab20:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab24:	2100      	movs	r1, #0
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7ff fda9 	bl	800a67e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	3330      	adds	r3, #48	; 0x30
 800ab30:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ab34:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f7ff fd38 	bl	800a5ae <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	3330      	adds	r3, #48	; 0x30
 800ab42:	4921      	ldr	r1, [pc, #132]	; (800abc8 <sync_fs+0xd4>)
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7ff fd4d 	bl	800a5e4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	3330      	adds	r3, #48	; 0x30
 800ab4e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ab52:	491e      	ldr	r1, [pc, #120]	; (800abcc <sync_fs+0xd8>)
 800ab54:	4618      	mov	r0, r3
 800ab56:	f7ff fd45 	bl	800a5e4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	3330      	adds	r3, #48	; 0x30
 800ab5e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	691b      	ldr	r3, [r3, #16]
 800ab66:	4619      	mov	r1, r3
 800ab68:	4610      	mov	r0, r2
 800ab6a:	f7ff fd3b 	bl	800a5e4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	3330      	adds	r3, #48	; 0x30
 800ab72:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	68db      	ldr	r3, [r3, #12]
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	4610      	mov	r0, r2
 800ab7e:	f7ff fd31 	bl	800a5e4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	69db      	ldr	r3, [r3, #28]
 800ab86:	1c5a      	adds	r2, r3, #1
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	7858      	ldrb	r0, [r3, #1]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	f7ff fc8e 	bl	800a4bc <disk_write>
			fs->fsi_flag = 0;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2200      	movs	r2, #0
 800aba4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	785b      	ldrb	r3, [r3, #1]
 800abaa:	2200      	movs	r2, #0
 800abac:	2100      	movs	r1, #0
 800abae:	4618      	mov	r0, r3
 800abb0:	f7ff fca4 	bl	800a4fc <disk_ioctl>
 800abb4:	4603      	mov	r3, r0
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d001      	beq.n	800abbe <sync_fs+0xca>
 800abba:	2301      	movs	r3, #1
 800abbc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800abbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3710      	adds	r7, #16
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}
 800abc8:	41615252 	.word	0x41615252
 800abcc:	61417272 	.word	0x61417272

0800abd0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b083      	sub	sp, #12
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	3b02      	subs	r3, #2
 800abde:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	695b      	ldr	r3, [r3, #20]
 800abe4:	3b02      	subs	r3, #2
 800abe6:	683a      	ldr	r2, [r7, #0]
 800abe8:	429a      	cmp	r2, r3
 800abea:	d301      	bcc.n	800abf0 <clust2sect+0x20>
 800abec:	2300      	movs	r3, #0
 800abee:	e008      	b.n	800ac02 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	895b      	ldrh	r3, [r3, #10]
 800abf4:	461a      	mov	r2, r3
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	fb03 f202 	mul.w	r2, r3, r2
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac00:	4413      	add	r3, r2
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	370c      	adds	r7, #12
 800ac06:	46bd      	mov	sp, r7
 800ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0c:	4770      	bx	lr

0800ac0e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ac0e:	b580      	push	{r7, lr}
 800ac10:	b086      	sub	sp, #24
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
 800ac16:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d904      	bls.n	800ac2e <get_fat+0x20>
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	695b      	ldr	r3, [r3, #20]
 800ac28:	683a      	ldr	r2, [r7, #0]
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d302      	bcc.n	800ac34 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ac2e:	2301      	movs	r3, #1
 800ac30:	617b      	str	r3, [r7, #20]
 800ac32:	e08f      	b.n	800ad54 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ac34:	f04f 33ff 	mov.w	r3, #4294967295
 800ac38:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	2b03      	cmp	r3, #3
 800ac40:	d062      	beq.n	800ad08 <get_fat+0xfa>
 800ac42:	2b03      	cmp	r3, #3
 800ac44:	dc7c      	bgt.n	800ad40 <get_fat+0x132>
 800ac46:	2b01      	cmp	r3, #1
 800ac48:	d002      	beq.n	800ac50 <get_fat+0x42>
 800ac4a:	2b02      	cmp	r3, #2
 800ac4c:	d042      	beq.n	800acd4 <get_fat+0xc6>
 800ac4e:	e077      	b.n	800ad40 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	60fb      	str	r3, [r7, #12]
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	085b      	lsrs	r3, r3, #1
 800ac58:	68fa      	ldr	r2, [r7, #12]
 800ac5a:	4413      	add	r3, r2
 800ac5c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	6a1a      	ldr	r2, [r3, #32]
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	0a5b      	lsrs	r3, r3, #9
 800ac66:	4413      	add	r3, r2
 800ac68:	4619      	mov	r1, r3
 800ac6a:	6938      	ldr	r0, [r7, #16]
 800ac6c:	f7ff ff14 	bl	800aa98 <move_window>
 800ac70:	4603      	mov	r3, r0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d167      	bne.n	800ad46 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	1c5a      	adds	r2, r3, #1
 800ac7a:	60fa      	str	r2, [r7, #12]
 800ac7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac80:	693a      	ldr	r2, [r7, #16]
 800ac82:	4413      	add	r3, r2
 800ac84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ac88:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	6a1a      	ldr	r2, [r3, #32]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	0a5b      	lsrs	r3, r3, #9
 800ac92:	4413      	add	r3, r2
 800ac94:	4619      	mov	r1, r3
 800ac96:	6938      	ldr	r0, [r7, #16]
 800ac98:	f7ff fefe 	bl	800aa98 <move_window>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d153      	bne.n	800ad4a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aca8:	693a      	ldr	r2, [r7, #16]
 800acaa:	4413      	add	r3, r2
 800acac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800acb0:	021b      	lsls	r3, r3, #8
 800acb2:	461a      	mov	r2, r3
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	4313      	orrs	r3, r2
 800acb8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	f003 0301 	and.w	r3, r3, #1
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d002      	beq.n	800acca <get_fat+0xbc>
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	091b      	lsrs	r3, r3, #4
 800acc8:	e002      	b.n	800acd0 <get_fat+0xc2>
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800acd0:	617b      	str	r3, [r7, #20]
			break;
 800acd2:	e03f      	b.n	800ad54 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	6a1a      	ldr	r2, [r3, #32]
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	0a1b      	lsrs	r3, r3, #8
 800acdc:	4413      	add	r3, r2
 800acde:	4619      	mov	r1, r3
 800ace0:	6938      	ldr	r0, [r7, #16]
 800ace2:	f7ff fed9 	bl	800aa98 <move_window>
 800ace6:	4603      	mov	r3, r0
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d130      	bne.n	800ad4e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	005b      	lsls	r3, r3, #1
 800acf6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800acfa:	4413      	add	r3, r2
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7ff fc1b 	bl	800a538 <ld_word>
 800ad02:	4603      	mov	r3, r0
 800ad04:	617b      	str	r3, [r7, #20]
			break;
 800ad06:	e025      	b.n	800ad54 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	6a1a      	ldr	r2, [r3, #32]
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	09db      	lsrs	r3, r3, #7
 800ad10:	4413      	add	r3, r2
 800ad12:	4619      	mov	r1, r3
 800ad14:	6938      	ldr	r0, [r7, #16]
 800ad16:	f7ff febf 	bl	800aa98 <move_window>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d118      	bne.n	800ad52 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	009b      	lsls	r3, r3, #2
 800ad2a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ad2e:	4413      	add	r3, r2
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7ff fc19 	bl	800a568 <ld_dword>
 800ad36:	4603      	mov	r3, r0
 800ad38:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ad3c:	617b      	str	r3, [r7, #20]
			break;
 800ad3e:	e009      	b.n	800ad54 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ad40:	2301      	movs	r3, #1
 800ad42:	617b      	str	r3, [r7, #20]
 800ad44:	e006      	b.n	800ad54 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ad46:	bf00      	nop
 800ad48:	e004      	b.n	800ad54 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ad4a:	bf00      	nop
 800ad4c:	e002      	b.n	800ad54 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ad4e:	bf00      	nop
 800ad50:	e000      	b.n	800ad54 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ad52:	bf00      	nop
		}
	}

	return val;
 800ad54:	697b      	ldr	r3, [r7, #20]
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3718      	adds	r7, #24
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}

0800ad5e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ad5e:	b590      	push	{r4, r7, lr}
 800ad60:	b089      	sub	sp, #36	; 0x24
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	60f8      	str	r0, [r7, #12]
 800ad66:	60b9      	str	r1, [r7, #8]
 800ad68:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ad6a:	2302      	movs	r3, #2
 800ad6c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	2b01      	cmp	r3, #1
 800ad72:	f240 80d2 	bls.w	800af1a <put_fat+0x1bc>
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	695b      	ldr	r3, [r3, #20]
 800ad7a:	68ba      	ldr	r2, [r7, #8]
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	f080 80cc 	bcs.w	800af1a <put_fat+0x1bc>
		switch (fs->fs_type) {
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	2b03      	cmp	r3, #3
 800ad88:	f000 8096 	beq.w	800aeb8 <put_fat+0x15a>
 800ad8c:	2b03      	cmp	r3, #3
 800ad8e:	f300 80cd 	bgt.w	800af2c <put_fat+0x1ce>
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d002      	beq.n	800ad9c <put_fat+0x3e>
 800ad96:	2b02      	cmp	r3, #2
 800ad98:	d06e      	beq.n	800ae78 <put_fat+0x11a>
 800ad9a:	e0c7      	b.n	800af2c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	61bb      	str	r3, [r7, #24]
 800ada0:	69bb      	ldr	r3, [r7, #24]
 800ada2:	085b      	lsrs	r3, r3, #1
 800ada4:	69ba      	ldr	r2, [r7, #24]
 800ada6:	4413      	add	r3, r2
 800ada8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	6a1a      	ldr	r2, [r3, #32]
 800adae:	69bb      	ldr	r3, [r7, #24]
 800adb0:	0a5b      	lsrs	r3, r3, #9
 800adb2:	4413      	add	r3, r2
 800adb4:	4619      	mov	r1, r3
 800adb6:	68f8      	ldr	r0, [r7, #12]
 800adb8:	f7ff fe6e 	bl	800aa98 <move_window>
 800adbc:	4603      	mov	r3, r0
 800adbe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800adc0:	7ffb      	ldrb	r3, [r7, #31]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	f040 80ab 	bne.w	800af1e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800adce:	69bb      	ldr	r3, [r7, #24]
 800add0:	1c59      	adds	r1, r3, #1
 800add2:	61b9      	str	r1, [r7, #24]
 800add4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800add8:	4413      	add	r3, r2
 800adda:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	f003 0301 	and.w	r3, r3, #1
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d00d      	beq.n	800ae02 <put_fat+0xa4>
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	b25b      	sxtb	r3, r3
 800adec:	f003 030f 	and.w	r3, r3, #15
 800adf0:	b25a      	sxtb	r2, r3
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	011b      	lsls	r3, r3, #4
 800adf8:	b25b      	sxtb	r3, r3
 800adfa:	4313      	orrs	r3, r2
 800adfc:	b25b      	sxtb	r3, r3
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	e001      	b.n	800ae06 <put_fat+0xa8>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	b2db      	uxtb	r3, r3
 800ae06:	697a      	ldr	r2, [r7, #20]
 800ae08:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	6a1a      	ldr	r2, [r3, #32]
 800ae14:	69bb      	ldr	r3, [r7, #24]
 800ae16:	0a5b      	lsrs	r3, r3, #9
 800ae18:	4413      	add	r3, r2
 800ae1a:	4619      	mov	r1, r3
 800ae1c:	68f8      	ldr	r0, [r7, #12]
 800ae1e:	f7ff fe3b 	bl	800aa98 <move_window>
 800ae22:	4603      	mov	r3, r0
 800ae24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ae26:	7ffb      	ldrb	r3, [r7, #31]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d17a      	bne.n	800af22 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ae32:	69bb      	ldr	r3, [r7, #24]
 800ae34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae38:	4413      	add	r3, r2
 800ae3a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	f003 0301 	and.w	r3, r3, #1
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d003      	beq.n	800ae4e <put_fat+0xf0>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	091b      	lsrs	r3, r3, #4
 800ae4a:	b2db      	uxtb	r3, r3
 800ae4c:	e00e      	b.n	800ae6c <put_fat+0x10e>
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	b25b      	sxtb	r3, r3
 800ae54:	f023 030f 	bic.w	r3, r3, #15
 800ae58:	b25a      	sxtb	r2, r3
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	0a1b      	lsrs	r3, r3, #8
 800ae5e:	b25b      	sxtb	r3, r3
 800ae60:	f003 030f 	and.w	r3, r3, #15
 800ae64:	b25b      	sxtb	r3, r3
 800ae66:	4313      	orrs	r3, r2
 800ae68:	b25b      	sxtb	r3, r3
 800ae6a:	b2db      	uxtb	r3, r3
 800ae6c:	697a      	ldr	r2, [r7, #20]
 800ae6e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2201      	movs	r2, #1
 800ae74:	70da      	strb	r2, [r3, #3]
			break;
 800ae76:	e059      	b.n	800af2c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	6a1a      	ldr	r2, [r3, #32]
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	0a1b      	lsrs	r3, r3, #8
 800ae80:	4413      	add	r3, r2
 800ae82:	4619      	mov	r1, r3
 800ae84:	68f8      	ldr	r0, [r7, #12]
 800ae86:	f7ff fe07 	bl	800aa98 <move_window>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ae8e:	7ffb      	ldrb	r3, [r7, #31]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d148      	bne.n	800af26 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	005b      	lsls	r3, r3, #1
 800ae9e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800aea2:	4413      	add	r3, r2
 800aea4:	687a      	ldr	r2, [r7, #4]
 800aea6:	b292      	uxth	r2, r2
 800aea8:	4611      	mov	r1, r2
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7ff fb7f 	bl	800a5ae <st_word>
			fs->wflag = 1;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	70da      	strb	r2, [r3, #3]
			break;
 800aeb6:	e039      	b.n	800af2c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	6a1a      	ldr	r2, [r3, #32]
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	09db      	lsrs	r3, r3, #7
 800aec0:	4413      	add	r3, r2
 800aec2:	4619      	mov	r1, r3
 800aec4:	68f8      	ldr	r0, [r7, #12]
 800aec6:	f7ff fde7 	bl	800aa98 <move_window>
 800aeca:	4603      	mov	r3, r0
 800aecc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aece:	7ffb      	ldrb	r3, [r7, #31]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d12a      	bne.n	800af2a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800aee8:	4413      	add	r3, r2
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7ff fb3c 	bl	800a568 <ld_dword>
 800aef0:	4603      	mov	r3, r0
 800aef2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800aef6:	4323      	orrs	r3, r4
 800aef8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800af08:	4413      	add	r3, r2
 800af0a:	6879      	ldr	r1, [r7, #4]
 800af0c:	4618      	mov	r0, r3
 800af0e:	f7ff fb69 	bl	800a5e4 <st_dword>
			fs->wflag = 1;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	2201      	movs	r2, #1
 800af16:	70da      	strb	r2, [r3, #3]
			break;
 800af18:	e008      	b.n	800af2c <put_fat+0x1ce>
		}
	}
 800af1a:	bf00      	nop
 800af1c:	e006      	b.n	800af2c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800af1e:	bf00      	nop
 800af20:	e004      	b.n	800af2c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800af22:	bf00      	nop
 800af24:	e002      	b.n	800af2c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800af26:	bf00      	nop
 800af28:	e000      	b.n	800af2c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800af2a:	bf00      	nop
	return res;
 800af2c:	7ffb      	ldrb	r3, [r7, #31]
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3724      	adds	r7, #36	; 0x24
 800af32:	46bd      	mov	sp, r7
 800af34:	bd90      	pop	{r4, r7, pc}

0800af36 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800af36:	b580      	push	{r7, lr}
 800af38:	b088      	sub	sp, #32
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	60f8      	str	r0, [r7, #12]
 800af3e:	60b9      	str	r1, [r7, #8]
 800af40:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800af42:	2300      	movs	r3, #0
 800af44:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	2b01      	cmp	r3, #1
 800af50:	d904      	bls.n	800af5c <remove_chain+0x26>
 800af52:	69bb      	ldr	r3, [r7, #24]
 800af54:	695b      	ldr	r3, [r3, #20]
 800af56:	68ba      	ldr	r2, [r7, #8]
 800af58:	429a      	cmp	r2, r3
 800af5a:	d301      	bcc.n	800af60 <remove_chain+0x2a>
 800af5c:	2302      	movs	r3, #2
 800af5e:	e04b      	b.n	800aff8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d00c      	beq.n	800af80 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800af66:	f04f 32ff 	mov.w	r2, #4294967295
 800af6a:	6879      	ldr	r1, [r7, #4]
 800af6c:	69b8      	ldr	r0, [r7, #24]
 800af6e:	f7ff fef6 	bl	800ad5e <put_fat>
 800af72:	4603      	mov	r3, r0
 800af74:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800af76:	7ffb      	ldrb	r3, [r7, #31]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d001      	beq.n	800af80 <remove_chain+0x4a>
 800af7c:	7ffb      	ldrb	r3, [r7, #31]
 800af7e:	e03b      	b.n	800aff8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800af80:	68b9      	ldr	r1, [r7, #8]
 800af82:	68f8      	ldr	r0, [r7, #12]
 800af84:	f7ff fe43 	bl	800ac0e <get_fat>
 800af88:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d031      	beq.n	800aff4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	2b01      	cmp	r3, #1
 800af94:	d101      	bne.n	800af9a <remove_chain+0x64>
 800af96:	2302      	movs	r3, #2
 800af98:	e02e      	b.n	800aff8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afa0:	d101      	bne.n	800afa6 <remove_chain+0x70>
 800afa2:	2301      	movs	r3, #1
 800afa4:	e028      	b.n	800aff8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800afa6:	2200      	movs	r2, #0
 800afa8:	68b9      	ldr	r1, [r7, #8]
 800afaa:	69b8      	ldr	r0, [r7, #24]
 800afac:	f7ff fed7 	bl	800ad5e <put_fat>
 800afb0:	4603      	mov	r3, r0
 800afb2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800afb4:	7ffb      	ldrb	r3, [r7, #31]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d001      	beq.n	800afbe <remove_chain+0x88>
 800afba:	7ffb      	ldrb	r3, [r7, #31]
 800afbc:	e01c      	b.n	800aff8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800afbe:	69bb      	ldr	r3, [r7, #24]
 800afc0:	691a      	ldr	r2, [r3, #16]
 800afc2:	69bb      	ldr	r3, [r7, #24]
 800afc4:	695b      	ldr	r3, [r3, #20]
 800afc6:	3b02      	subs	r3, #2
 800afc8:	429a      	cmp	r2, r3
 800afca:	d20b      	bcs.n	800afe4 <remove_chain+0xae>
			fs->free_clst++;
 800afcc:	69bb      	ldr	r3, [r7, #24]
 800afce:	691b      	ldr	r3, [r3, #16]
 800afd0:	1c5a      	adds	r2, r3, #1
 800afd2:	69bb      	ldr	r3, [r7, #24]
 800afd4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800afd6:	69bb      	ldr	r3, [r7, #24]
 800afd8:	791b      	ldrb	r3, [r3, #4]
 800afda:	f043 0301 	orr.w	r3, r3, #1
 800afde:	b2da      	uxtb	r2, r3
 800afe0:	69bb      	ldr	r3, [r7, #24]
 800afe2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800afe8:	69bb      	ldr	r3, [r7, #24]
 800afea:	695b      	ldr	r3, [r3, #20]
 800afec:	68ba      	ldr	r2, [r7, #8]
 800afee:	429a      	cmp	r2, r3
 800aff0:	d3c6      	bcc.n	800af80 <remove_chain+0x4a>
 800aff2:	e000      	b.n	800aff6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800aff4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800aff6:	2300      	movs	r3, #0
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3720      	adds	r7, #32
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}

0800b000 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b088      	sub	sp, #32
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d10d      	bne.n	800b032 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	68db      	ldr	r3, [r3, #12]
 800b01a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b01c:	69bb      	ldr	r3, [r7, #24]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d004      	beq.n	800b02c <create_chain+0x2c>
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	695b      	ldr	r3, [r3, #20]
 800b026:	69ba      	ldr	r2, [r7, #24]
 800b028:	429a      	cmp	r2, r3
 800b02a:	d31b      	bcc.n	800b064 <create_chain+0x64>
 800b02c:	2301      	movs	r3, #1
 800b02e:	61bb      	str	r3, [r7, #24]
 800b030:	e018      	b.n	800b064 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b032:	6839      	ldr	r1, [r7, #0]
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f7ff fdea 	bl	800ac0e <get_fat>
 800b03a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2b01      	cmp	r3, #1
 800b040:	d801      	bhi.n	800b046 <create_chain+0x46>
 800b042:	2301      	movs	r3, #1
 800b044:	e070      	b.n	800b128 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b04c:	d101      	bne.n	800b052 <create_chain+0x52>
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	e06a      	b.n	800b128 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	695b      	ldr	r3, [r3, #20]
 800b056:	68fa      	ldr	r2, [r7, #12]
 800b058:	429a      	cmp	r2, r3
 800b05a:	d201      	bcs.n	800b060 <create_chain+0x60>
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	e063      	b.n	800b128 <create_chain+0x128>
		scl = clst;
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b064:	69bb      	ldr	r3, [r7, #24]
 800b066:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b068:	69fb      	ldr	r3, [r7, #28]
 800b06a:	3301      	adds	r3, #1
 800b06c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	695b      	ldr	r3, [r3, #20]
 800b072:	69fa      	ldr	r2, [r7, #28]
 800b074:	429a      	cmp	r2, r3
 800b076:	d307      	bcc.n	800b088 <create_chain+0x88>
				ncl = 2;
 800b078:	2302      	movs	r3, #2
 800b07a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b07c:	69fa      	ldr	r2, [r7, #28]
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	429a      	cmp	r2, r3
 800b082:	d901      	bls.n	800b088 <create_chain+0x88>
 800b084:	2300      	movs	r3, #0
 800b086:	e04f      	b.n	800b128 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b088:	69f9      	ldr	r1, [r7, #28]
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f7ff fdbf 	bl	800ac0e <get_fat>
 800b090:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d00e      	beq.n	800b0b6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d003      	beq.n	800b0a6 <create_chain+0xa6>
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0a4:	d101      	bne.n	800b0aa <create_chain+0xaa>
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	e03e      	b.n	800b128 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b0aa:	69fa      	ldr	r2, [r7, #28]
 800b0ac:	69bb      	ldr	r3, [r7, #24]
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	d1da      	bne.n	800b068 <create_chain+0x68>
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	e038      	b.n	800b128 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b0b6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b0b8:	f04f 32ff 	mov.w	r2, #4294967295
 800b0bc:	69f9      	ldr	r1, [r7, #28]
 800b0be:	6938      	ldr	r0, [r7, #16]
 800b0c0:	f7ff fe4d 	bl	800ad5e <put_fat>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b0c8:	7dfb      	ldrb	r3, [r7, #23]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d109      	bne.n	800b0e2 <create_chain+0xe2>
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d006      	beq.n	800b0e2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b0d4:	69fa      	ldr	r2, [r7, #28]
 800b0d6:	6839      	ldr	r1, [r7, #0]
 800b0d8:	6938      	ldr	r0, [r7, #16]
 800b0da:	f7ff fe40 	bl	800ad5e <put_fat>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b0e2:	7dfb      	ldrb	r3, [r7, #23]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d116      	bne.n	800b116 <create_chain+0x116>
		fs->last_clst = ncl;
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	69fa      	ldr	r2, [r7, #28]
 800b0ec:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	691a      	ldr	r2, [r3, #16]
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	695b      	ldr	r3, [r3, #20]
 800b0f6:	3b02      	subs	r3, #2
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d804      	bhi.n	800b106 <create_chain+0x106>
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	691b      	ldr	r3, [r3, #16]
 800b100:	1e5a      	subs	r2, r3, #1
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	791b      	ldrb	r3, [r3, #4]
 800b10a:	f043 0301 	orr.w	r3, r3, #1
 800b10e:	b2da      	uxtb	r2, r3
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	711a      	strb	r2, [r3, #4]
 800b114:	e007      	b.n	800b126 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b116:	7dfb      	ldrb	r3, [r7, #23]
 800b118:	2b01      	cmp	r3, #1
 800b11a:	d102      	bne.n	800b122 <create_chain+0x122>
 800b11c:	f04f 33ff 	mov.w	r3, #4294967295
 800b120:	e000      	b.n	800b124 <create_chain+0x124>
 800b122:	2301      	movs	r3, #1
 800b124:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b126:	69fb      	ldr	r3, [r7, #28]
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3720      	adds	r7, #32
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b130:	b480      	push	{r7}
 800b132:	b087      	sub	sp, #28
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b144:	3304      	adds	r3, #4
 800b146:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	0a5b      	lsrs	r3, r3, #9
 800b14c:	68fa      	ldr	r2, [r7, #12]
 800b14e:	8952      	ldrh	r2, [r2, #10]
 800b150:	fbb3 f3f2 	udiv	r3, r3, r2
 800b154:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	1d1a      	adds	r2, r3, #4
 800b15a:	613a      	str	r2, [r7, #16]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d101      	bne.n	800b16a <clmt_clust+0x3a>
 800b166:	2300      	movs	r3, #0
 800b168:	e010      	b.n	800b18c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b16a:	697a      	ldr	r2, [r7, #20]
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	429a      	cmp	r2, r3
 800b170:	d307      	bcc.n	800b182 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b172:	697a      	ldr	r2, [r7, #20]
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	1ad3      	subs	r3, r2, r3
 800b178:	617b      	str	r3, [r7, #20]
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	3304      	adds	r3, #4
 800b17e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b180:	e7e9      	b.n	800b156 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b182:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b184:	693b      	ldr	r3, [r7, #16]
 800b186:	681a      	ldr	r2, [r3, #0]
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	4413      	add	r3, r2
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	371c      	adds	r7, #28
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr

0800b198 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b086      	sub	sp, #24
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
 800b1a0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b1ae:	d204      	bcs.n	800b1ba <dir_sdi+0x22>
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	f003 031f 	and.w	r3, r3, #31
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d001      	beq.n	800b1be <dir_sdi+0x26>
		return FR_INT_ERR;
 800b1ba:	2302      	movs	r3, #2
 800b1bc:	e063      	b.n	800b286 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	683a      	ldr	r2, [r7, #0]
 800b1c2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	689b      	ldr	r3, [r3, #8]
 800b1c8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d106      	bne.n	800b1de <dir_sdi+0x46>
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	781b      	ldrb	r3, [r3, #0]
 800b1d4:	2b02      	cmp	r3, #2
 800b1d6:	d902      	bls.n	800b1de <dir_sdi+0x46>
		clst = fs->dirbase;
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1dc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d10c      	bne.n	800b1fe <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	095b      	lsrs	r3, r3, #5
 800b1e8:	693a      	ldr	r2, [r7, #16]
 800b1ea:	8912      	ldrh	r2, [r2, #8]
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d301      	bcc.n	800b1f4 <dir_sdi+0x5c>
 800b1f0:	2302      	movs	r3, #2
 800b1f2:	e048      	b.n	800b286 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	61da      	str	r2, [r3, #28]
 800b1fc:	e029      	b.n	800b252 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	895b      	ldrh	r3, [r3, #10]
 800b202:	025b      	lsls	r3, r3, #9
 800b204:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b206:	e019      	b.n	800b23c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6979      	ldr	r1, [r7, #20]
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7ff fcfe 	bl	800ac0e <get_fat>
 800b212:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b21a:	d101      	bne.n	800b220 <dir_sdi+0x88>
 800b21c:	2301      	movs	r3, #1
 800b21e:	e032      	b.n	800b286 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	2b01      	cmp	r3, #1
 800b224:	d904      	bls.n	800b230 <dir_sdi+0x98>
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	695b      	ldr	r3, [r3, #20]
 800b22a:	697a      	ldr	r2, [r7, #20]
 800b22c:	429a      	cmp	r2, r3
 800b22e:	d301      	bcc.n	800b234 <dir_sdi+0x9c>
 800b230:	2302      	movs	r3, #2
 800b232:	e028      	b.n	800b286 <dir_sdi+0xee>
			ofs -= csz;
 800b234:	683a      	ldr	r2, [r7, #0]
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	1ad3      	subs	r3, r2, r3
 800b23a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b23c:	683a      	ldr	r2, [r7, #0]
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	429a      	cmp	r2, r3
 800b242:	d2e1      	bcs.n	800b208 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b244:	6979      	ldr	r1, [r7, #20]
 800b246:	6938      	ldr	r0, [r7, #16]
 800b248:	f7ff fcc2 	bl	800abd0 <clust2sect>
 800b24c:	4602      	mov	r2, r0
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	697a      	ldr	r2, [r7, #20]
 800b256:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	69db      	ldr	r3, [r3, #28]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d101      	bne.n	800b264 <dir_sdi+0xcc>
 800b260:	2302      	movs	r3, #2
 800b262:	e010      	b.n	800b286 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	69da      	ldr	r2, [r3, #28]
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	0a5b      	lsrs	r3, r3, #9
 800b26c:	441a      	add	r2, r3
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b27e:	441a      	add	r2, r3
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b284:	2300      	movs	r3, #0
}
 800b286:	4618      	mov	r0, r3
 800b288:	3718      	adds	r7, #24
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}

0800b28e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b28e:	b580      	push	{r7, lr}
 800b290:	b086      	sub	sp, #24
 800b292:	af00      	add	r7, sp, #0
 800b294:	6078      	str	r0, [r7, #4]
 800b296:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	695b      	ldr	r3, [r3, #20]
 800b2a2:	3320      	adds	r3, #32
 800b2a4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	69db      	ldr	r3, [r3, #28]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d003      	beq.n	800b2b6 <dir_next+0x28>
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b2b4:	d301      	bcc.n	800b2ba <dir_next+0x2c>
 800b2b6:	2304      	movs	r3, #4
 800b2b8:	e0aa      	b.n	800b410 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	f040 8098 	bne.w	800b3f6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	69db      	ldr	r3, [r3, #28]
 800b2ca:	1c5a      	adds	r2, r3, #1
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	699b      	ldr	r3, [r3, #24]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d10b      	bne.n	800b2f0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	095b      	lsrs	r3, r3, #5
 800b2dc:	68fa      	ldr	r2, [r7, #12]
 800b2de:	8912      	ldrh	r2, [r2, #8]
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	f0c0 8088 	bcc.w	800b3f6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	61da      	str	r2, [r3, #28]
 800b2ec:	2304      	movs	r3, #4
 800b2ee:	e08f      	b.n	800b410 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	0a5b      	lsrs	r3, r3, #9
 800b2f4:	68fa      	ldr	r2, [r7, #12]
 800b2f6:	8952      	ldrh	r2, [r2, #10]
 800b2f8:	3a01      	subs	r2, #1
 800b2fa:	4013      	ands	r3, r2
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d17a      	bne.n	800b3f6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b300:	687a      	ldr	r2, [r7, #4]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	699b      	ldr	r3, [r3, #24]
 800b306:	4619      	mov	r1, r3
 800b308:	4610      	mov	r0, r2
 800b30a:	f7ff fc80 	bl	800ac0e <get_fat>
 800b30e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	2b01      	cmp	r3, #1
 800b314:	d801      	bhi.n	800b31a <dir_next+0x8c>
 800b316:	2302      	movs	r3, #2
 800b318:	e07a      	b.n	800b410 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b320:	d101      	bne.n	800b326 <dir_next+0x98>
 800b322:	2301      	movs	r3, #1
 800b324:	e074      	b.n	800b410 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	695b      	ldr	r3, [r3, #20]
 800b32a:	697a      	ldr	r2, [r7, #20]
 800b32c:	429a      	cmp	r2, r3
 800b32e:	d358      	bcc.n	800b3e2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d104      	bne.n	800b340 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2200      	movs	r2, #0
 800b33a:	61da      	str	r2, [r3, #28]
 800b33c:	2304      	movs	r3, #4
 800b33e:	e067      	b.n	800b410 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b340:	687a      	ldr	r2, [r7, #4]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	699b      	ldr	r3, [r3, #24]
 800b346:	4619      	mov	r1, r3
 800b348:	4610      	mov	r0, r2
 800b34a:	f7ff fe59 	bl	800b000 <create_chain>
 800b34e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d101      	bne.n	800b35a <dir_next+0xcc>
 800b356:	2307      	movs	r3, #7
 800b358:	e05a      	b.n	800b410 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d101      	bne.n	800b364 <dir_next+0xd6>
 800b360:	2302      	movs	r3, #2
 800b362:	e055      	b.n	800b410 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b36a:	d101      	bne.n	800b370 <dir_next+0xe2>
 800b36c:	2301      	movs	r3, #1
 800b36e:	e04f      	b.n	800b410 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b370:	68f8      	ldr	r0, [r7, #12]
 800b372:	f7ff fb4d 	bl	800aa10 <sync_window>
 800b376:	4603      	mov	r3, r0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d001      	beq.n	800b380 <dir_next+0xf2>
 800b37c:	2301      	movs	r3, #1
 800b37e:	e047      	b.n	800b410 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	3330      	adds	r3, #48	; 0x30
 800b384:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b388:	2100      	movs	r1, #0
 800b38a:	4618      	mov	r0, r3
 800b38c:	f7ff f977 	bl	800a67e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b390:	2300      	movs	r3, #0
 800b392:	613b      	str	r3, [r7, #16]
 800b394:	6979      	ldr	r1, [r7, #20]
 800b396:	68f8      	ldr	r0, [r7, #12]
 800b398:	f7ff fc1a 	bl	800abd0 <clust2sect>
 800b39c:	4602      	mov	r2, r0
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	62da      	str	r2, [r3, #44]	; 0x2c
 800b3a2:	e012      	b.n	800b3ca <dir_next+0x13c>
						fs->wflag = 1;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b3aa:	68f8      	ldr	r0, [r7, #12]
 800b3ac:	f7ff fb30 	bl	800aa10 <sync_window>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d001      	beq.n	800b3ba <dir_next+0x12c>
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	e02a      	b.n	800b410 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	3301      	adds	r3, #1
 800b3be:	613b      	str	r3, [r7, #16]
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c4:	1c5a      	adds	r2, r3, #1
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	62da      	str	r2, [r3, #44]	; 0x2c
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	895b      	ldrh	r3, [r3, #10]
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d3e6      	bcc.n	800b3a4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	1ad2      	subs	r2, r2, r3
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	697a      	ldr	r2, [r7, #20]
 800b3e6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b3e8:	6979      	ldr	r1, [r7, #20]
 800b3ea:	68f8      	ldr	r0, [r7, #12]
 800b3ec:	f7ff fbf0 	bl	800abd0 <clust2sect>
 800b3f0:	4602      	mov	r2, r0
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	68ba      	ldr	r2, [r7, #8]
 800b3fa:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b408:	441a      	add	r2, r3
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b40e:	2300      	movs	r3, #0
}
 800b410:	4618      	mov	r0, r3
 800b412:	3718      	adds	r7, #24
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b086      	sub	sp, #24
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b428:	2100      	movs	r1, #0
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f7ff feb4 	bl	800b198 <dir_sdi>
 800b430:	4603      	mov	r3, r0
 800b432:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b434:	7dfb      	ldrb	r3, [r7, #23]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d12b      	bne.n	800b492 <dir_alloc+0x7a>
		n = 0;
 800b43a:	2300      	movs	r3, #0
 800b43c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	69db      	ldr	r3, [r3, #28]
 800b442:	4619      	mov	r1, r3
 800b444:	68f8      	ldr	r0, [r7, #12]
 800b446:	f7ff fb27 	bl	800aa98 <move_window>
 800b44a:	4603      	mov	r3, r0
 800b44c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b44e:	7dfb      	ldrb	r3, [r7, #23]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d11d      	bne.n	800b490 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6a1b      	ldr	r3, [r3, #32]
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	2be5      	cmp	r3, #229	; 0xe5
 800b45c:	d004      	beq.n	800b468 <dir_alloc+0x50>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6a1b      	ldr	r3, [r3, #32]
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d107      	bne.n	800b478 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	3301      	adds	r3, #1
 800b46c:	613b      	str	r3, [r7, #16]
 800b46e:	693a      	ldr	r2, [r7, #16]
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	429a      	cmp	r2, r3
 800b474:	d102      	bne.n	800b47c <dir_alloc+0x64>
 800b476:	e00c      	b.n	800b492 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b478:	2300      	movs	r3, #0
 800b47a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b47c:	2101      	movs	r1, #1
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f7ff ff05 	bl	800b28e <dir_next>
 800b484:	4603      	mov	r3, r0
 800b486:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b488:	7dfb      	ldrb	r3, [r7, #23]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d0d7      	beq.n	800b43e <dir_alloc+0x26>
 800b48e:	e000      	b.n	800b492 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b490:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b492:	7dfb      	ldrb	r3, [r7, #23]
 800b494:	2b04      	cmp	r3, #4
 800b496:	d101      	bne.n	800b49c <dir_alloc+0x84>
 800b498:	2307      	movs	r3, #7
 800b49a:	75fb      	strb	r3, [r7, #23]
	return res;
 800b49c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3718      	adds	r7, #24
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}

0800b4a6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b4a6:	b580      	push	{r7, lr}
 800b4a8:	b084      	sub	sp, #16
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	6078      	str	r0, [r7, #4]
 800b4ae:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	331a      	adds	r3, #26
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f7ff f83f 	bl	800a538 <ld_word>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	2b03      	cmp	r3, #3
 800b4c4:	d109      	bne.n	800b4da <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	3314      	adds	r3, #20
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f7ff f834 	bl	800a538 <ld_word>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	041b      	lsls	r3, r3, #16
 800b4d4:	68fa      	ldr	r2, [r7, #12]
 800b4d6:	4313      	orrs	r3, r2
 800b4d8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b4da:	68fb      	ldr	r3, [r7, #12]
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3710      	adds	r7, #16
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}

0800b4e4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	60f8      	str	r0, [r7, #12]
 800b4ec:	60b9      	str	r1, [r7, #8]
 800b4ee:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	331a      	adds	r3, #26
 800b4f4:	687a      	ldr	r2, [r7, #4]
 800b4f6:	b292      	uxth	r2, r2
 800b4f8:	4611      	mov	r1, r2
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f7ff f857 	bl	800a5ae <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	781b      	ldrb	r3, [r3, #0]
 800b504:	2b03      	cmp	r3, #3
 800b506:	d109      	bne.n	800b51c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	f103 0214 	add.w	r2, r3, #20
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	0c1b      	lsrs	r3, r3, #16
 800b512:	b29b      	uxth	r3, r3
 800b514:	4619      	mov	r1, r3
 800b516:	4610      	mov	r0, r2
 800b518:	f7ff f849 	bl	800a5ae <st_word>
	}
}
 800b51c:	bf00      	nop
 800b51e:	3710      	adds	r7, #16
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b086      	sub	sp, #24
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
 800b52c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800b52e:	2304      	movs	r3, #4
 800b530:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800b538:	e03c      	b.n	800b5b4 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	69db      	ldr	r3, [r3, #28]
 800b53e:	4619      	mov	r1, r3
 800b540:	6938      	ldr	r0, [r7, #16]
 800b542:	f7ff faa9 	bl	800aa98 <move_window>
 800b546:	4603      	mov	r3, r0
 800b548:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b54a:	7dfb      	ldrb	r3, [r7, #23]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d136      	bne.n	800b5be <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6a1b      	ldr	r3, [r3, #32]
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800b558:	7bfb      	ldrb	r3, [r7, #15]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d102      	bne.n	800b564 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800b55e:	2304      	movs	r3, #4
 800b560:	75fb      	strb	r3, [r7, #23]
 800b562:	e031      	b.n	800b5c8 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6a1b      	ldr	r3, [r3, #32]
 800b568:	330b      	adds	r3, #11
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b570:	73bb      	strb	r3, [r7, #14]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	7bba      	ldrb	r2, [r7, #14]
 800b576:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800b578:	7bfb      	ldrb	r3, [r7, #15]
 800b57a:	2be5      	cmp	r3, #229	; 0xe5
 800b57c:	d011      	beq.n	800b5a2 <dir_read+0x7e>
 800b57e:	7bfb      	ldrb	r3, [r7, #15]
 800b580:	2b2e      	cmp	r3, #46	; 0x2e
 800b582:	d00e      	beq.n	800b5a2 <dir_read+0x7e>
 800b584:	7bbb      	ldrb	r3, [r7, #14]
 800b586:	2b0f      	cmp	r3, #15
 800b588:	d00b      	beq.n	800b5a2 <dir_read+0x7e>
 800b58a:	7bbb      	ldrb	r3, [r7, #14]
 800b58c:	f023 0320 	bic.w	r3, r3, #32
 800b590:	2b08      	cmp	r3, #8
 800b592:	bf0c      	ite	eq
 800b594:	2301      	moveq	r3, #1
 800b596:	2300      	movne	r3, #0
 800b598:	b2db      	uxtb	r3, r3
 800b59a:	461a      	mov	r2, r3
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d00f      	beq.n	800b5c2 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800b5a2:	2100      	movs	r1, #0
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f7ff fe72 	bl	800b28e <dir_next>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b5ae:	7dfb      	ldrb	r3, [r7, #23]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d108      	bne.n	800b5c6 <dir_read+0xa2>
	while (dp->sect) {
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	69db      	ldr	r3, [r3, #28]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d1be      	bne.n	800b53a <dir_read+0x16>
 800b5bc:	e004      	b.n	800b5c8 <dir_read+0xa4>
		if (res != FR_OK) break;
 800b5be:	bf00      	nop
 800b5c0:	e002      	b.n	800b5c8 <dir_read+0xa4>
				break;
 800b5c2:	bf00      	nop
 800b5c4:	e000      	b.n	800b5c8 <dir_read+0xa4>
		if (res != FR_OK) break;
 800b5c6:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800b5c8:	7dfb      	ldrb	r3, [r7, #23]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d002      	beq.n	800b5d4 <dir_read+0xb0>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	61da      	str	r2, [r3, #28]
	return res;
 800b5d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	3718      	adds	r7, #24
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}

0800b5de <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b5de:	b580      	push	{r7, lr}
 800b5e0:	b086      	sub	sp, #24
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b5ec:	2100      	movs	r1, #0
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f7ff fdd2 	bl	800b198 <dir_sdi>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b5f8:	7dfb      	ldrb	r3, [r7, #23]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d001      	beq.n	800b602 <dir_find+0x24>
 800b5fe:	7dfb      	ldrb	r3, [r7, #23]
 800b600:	e03e      	b.n	800b680 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	69db      	ldr	r3, [r3, #28]
 800b606:	4619      	mov	r1, r3
 800b608:	6938      	ldr	r0, [r7, #16]
 800b60a:	f7ff fa45 	bl	800aa98 <move_window>
 800b60e:	4603      	mov	r3, r0
 800b610:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b612:	7dfb      	ldrb	r3, [r7, #23]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d12f      	bne.n	800b678 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6a1b      	ldr	r3, [r3, #32]
 800b61c:	781b      	ldrb	r3, [r3, #0]
 800b61e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b620:	7bfb      	ldrb	r3, [r7, #15]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d102      	bne.n	800b62c <dir_find+0x4e>
 800b626:	2304      	movs	r3, #4
 800b628:	75fb      	strb	r3, [r7, #23]
 800b62a:	e028      	b.n	800b67e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6a1b      	ldr	r3, [r3, #32]
 800b630:	330b      	adds	r3, #11
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b638:	b2da      	uxtb	r2, r3
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6a1b      	ldr	r3, [r3, #32]
 800b642:	330b      	adds	r3, #11
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	f003 0308 	and.w	r3, r3, #8
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d10a      	bne.n	800b664 <dir_find+0x86>
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6a18      	ldr	r0, [r3, #32]
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	3324      	adds	r3, #36	; 0x24
 800b656:	220b      	movs	r2, #11
 800b658:	4619      	mov	r1, r3
 800b65a:	f7ff f82b 	bl	800a6b4 <mem_cmp>
 800b65e:	4603      	mov	r3, r0
 800b660:	2b00      	cmp	r3, #0
 800b662:	d00b      	beq.n	800b67c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b664:	2100      	movs	r1, #0
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f7ff fe11 	bl	800b28e <dir_next>
 800b66c:	4603      	mov	r3, r0
 800b66e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b670:	7dfb      	ldrb	r3, [r7, #23]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d0c5      	beq.n	800b602 <dir_find+0x24>
 800b676:	e002      	b.n	800b67e <dir_find+0xa0>
		if (res != FR_OK) break;
 800b678:	bf00      	nop
 800b67a:	e000      	b.n	800b67e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b67c:	bf00      	nop

	return res;
 800b67e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b680:	4618      	mov	r0, r3
 800b682:	3718      	adds	r7, #24
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}

0800b688 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b696:	2101      	movs	r1, #1
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f7ff febd 	bl	800b418 <dir_alloc>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b6a2:	7bfb      	ldrb	r3, [r7, #15]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d11c      	bne.n	800b6e2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	69db      	ldr	r3, [r3, #28]
 800b6ac:	4619      	mov	r1, r3
 800b6ae:	68b8      	ldr	r0, [r7, #8]
 800b6b0:	f7ff f9f2 	bl	800aa98 <move_window>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b6b8:	7bfb      	ldrb	r3, [r7, #15]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d111      	bne.n	800b6e2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6a1b      	ldr	r3, [r3, #32]
 800b6c2:	2220      	movs	r2, #32
 800b6c4:	2100      	movs	r1, #0
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f7fe ffd9 	bl	800a67e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6a18      	ldr	r0, [r3, #32]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	3324      	adds	r3, #36	; 0x24
 800b6d4:	220b      	movs	r2, #11
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	f7fe ffb0 	bl	800a63c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	2201      	movs	r2, #1
 800b6e0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b6e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3710      	adds	r7, #16
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	69db      	ldr	r3, [r3, #28]
 800b6fe:	4619      	mov	r1, r3
 800b700:	68f8      	ldr	r0, [r7, #12]
 800b702:	f7ff f9c9 	bl	800aa98 <move_window>
 800b706:	4603      	mov	r3, r0
 800b708:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800b70a:	7afb      	ldrb	r3, [r7, #11]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d106      	bne.n	800b71e <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	6a1b      	ldr	r3, [r3, #32]
 800b714:	22e5      	movs	r2, #229	; 0xe5
 800b716:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2201      	movs	r2, #1
 800b71c:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800b71e:	7afb      	ldrb	r3, [r7, #11]
}
 800b720:	4618      	mov	r0, r3
 800b722:	3710      	adds	r7, #16
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}

0800b728 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b086      	sub	sp, #24
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	2200      	movs	r2, #0
 800b736:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	69db      	ldr	r3, [r3, #28]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d04e      	beq.n	800b7de <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800b740:	2300      	movs	r3, #0
 800b742:	613b      	str	r3, [r7, #16]
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800b748:	e021      	b.n	800b78e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6a1a      	ldr	r2, [r3, #32]
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	1c59      	adds	r1, r3, #1
 800b752:	6179      	str	r1, [r7, #20]
 800b754:	4413      	add	r3, r2
 800b756:	781b      	ldrb	r3, [r3, #0]
 800b758:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800b75a:	7bfb      	ldrb	r3, [r7, #15]
 800b75c:	2b20      	cmp	r3, #32
 800b75e:	d100      	bne.n	800b762 <get_fileinfo+0x3a>
 800b760:	e015      	b.n	800b78e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b762:	7bfb      	ldrb	r3, [r7, #15]
 800b764:	2b05      	cmp	r3, #5
 800b766:	d101      	bne.n	800b76c <get_fileinfo+0x44>
 800b768:	23e5      	movs	r3, #229	; 0xe5
 800b76a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	2b09      	cmp	r3, #9
 800b770:	d106      	bne.n	800b780 <get_fileinfo+0x58>
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	1c5a      	adds	r2, r3, #1
 800b776:	613a      	str	r2, [r7, #16]
 800b778:	683a      	ldr	r2, [r7, #0]
 800b77a:	4413      	add	r3, r2
 800b77c:	222e      	movs	r2, #46	; 0x2e
 800b77e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	1c5a      	adds	r2, r3, #1
 800b784:	613a      	str	r2, [r7, #16]
 800b786:	683a      	ldr	r2, [r7, #0]
 800b788:	4413      	add	r3, r2
 800b78a:	7bfa      	ldrb	r2, [r7, #15]
 800b78c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	2b0a      	cmp	r3, #10
 800b792:	d9da      	bls.n	800b74a <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800b794:	683a      	ldr	r2, [r7, #0]
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	4413      	add	r3, r2
 800b79a:	3309      	adds	r3, #9
 800b79c:	2200      	movs	r2, #0
 800b79e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6a1b      	ldr	r3, [r3, #32]
 800b7a4:	7ada      	ldrb	r2, [r3, #11]
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6a1b      	ldr	r3, [r3, #32]
 800b7ae:	331c      	adds	r3, #28
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f7fe fed9 	bl	800a568 <ld_dword>
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6a1b      	ldr	r3, [r3, #32]
 800b7c0:	3316      	adds	r3, #22
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7fe fed0 	bl	800a568 <ld_dword>
 800b7c8:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	b29a      	uxth	r2, r3
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	80da      	strh	r2, [r3, #6]
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	0c1b      	lsrs	r3, r3, #16
 800b7d6:	b29a      	uxth	r2, r3
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	809a      	strh	r2, [r3, #4]
 800b7dc:	e000      	b.n	800b7e0 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b7de:	bf00      	nop
}
 800b7e0:	3718      	adds	r7, #24
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}
	...

0800b7e8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b088      	sub	sp, #32
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	60fb      	str	r3, [r7, #12]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	3324      	adds	r3, #36	; 0x24
 800b7fc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b7fe:	220b      	movs	r2, #11
 800b800:	2120      	movs	r1, #32
 800b802:	68b8      	ldr	r0, [r7, #8]
 800b804:	f7fe ff3b 	bl	800a67e <mem_set>
	si = i = 0; ni = 8;
 800b808:	2300      	movs	r3, #0
 800b80a:	613b      	str	r3, [r7, #16]
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	61fb      	str	r3, [r7, #28]
 800b810:	2308      	movs	r3, #8
 800b812:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b814:	69fb      	ldr	r3, [r7, #28]
 800b816:	1c5a      	adds	r2, r3, #1
 800b818:	61fa      	str	r2, [r7, #28]
 800b81a:	68fa      	ldr	r2, [r7, #12]
 800b81c:	4413      	add	r3, r2
 800b81e:	781b      	ldrb	r3, [r3, #0]
 800b820:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b822:	7efb      	ldrb	r3, [r7, #27]
 800b824:	2b20      	cmp	r3, #32
 800b826:	d94e      	bls.n	800b8c6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b828:	7efb      	ldrb	r3, [r7, #27]
 800b82a:	2b2f      	cmp	r3, #47	; 0x2f
 800b82c:	d006      	beq.n	800b83c <create_name+0x54>
 800b82e:	7efb      	ldrb	r3, [r7, #27]
 800b830:	2b5c      	cmp	r3, #92	; 0x5c
 800b832:	d110      	bne.n	800b856 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b834:	e002      	b.n	800b83c <create_name+0x54>
 800b836:	69fb      	ldr	r3, [r7, #28]
 800b838:	3301      	adds	r3, #1
 800b83a:	61fb      	str	r3, [r7, #28]
 800b83c:	68fa      	ldr	r2, [r7, #12]
 800b83e:	69fb      	ldr	r3, [r7, #28]
 800b840:	4413      	add	r3, r2
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	2b2f      	cmp	r3, #47	; 0x2f
 800b846:	d0f6      	beq.n	800b836 <create_name+0x4e>
 800b848:	68fa      	ldr	r2, [r7, #12]
 800b84a:	69fb      	ldr	r3, [r7, #28]
 800b84c:	4413      	add	r3, r2
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	2b5c      	cmp	r3, #92	; 0x5c
 800b852:	d0f0      	beq.n	800b836 <create_name+0x4e>
			break;
 800b854:	e038      	b.n	800b8c8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b856:	7efb      	ldrb	r3, [r7, #27]
 800b858:	2b2e      	cmp	r3, #46	; 0x2e
 800b85a:	d003      	beq.n	800b864 <create_name+0x7c>
 800b85c:	693a      	ldr	r2, [r7, #16]
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	429a      	cmp	r2, r3
 800b862:	d30c      	bcc.n	800b87e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	2b0b      	cmp	r3, #11
 800b868:	d002      	beq.n	800b870 <create_name+0x88>
 800b86a:	7efb      	ldrb	r3, [r7, #27]
 800b86c:	2b2e      	cmp	r3, #46	; 0x2e
 800b86e:	d001      	beq.n	800b874 <create_name+0x8c>
 800b870:	2306      	movs	r3, #6
 800b872:	e044      	b.n	800b8fe <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b874:	2308      	movs	r3, #8
 800b876:	613b      	str	r3, [r7, #16]
 800b878:	230b      	movs	r3, #11
 800b87a:	617b      	str	r3, [r7, #20]
			continue;
 800b87c:	e022      	b.n	800b8c4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b87e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b882:	2b00      	cmp	r3, #0
 800b884:	da04      	bge.n	800b890 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b886:	7efb      	ldrb	r3, [r7, #27]
 800b888:	3b80      	subs	r3, #128	; 0x80
 800b88a:	4a1f      	ldr	r2, [pc, #124]	; (800b908 <create_name+0x120>)
 800b88c:	5cd3      	ldrb	r3, [r2, r3]
 800b88e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b890:	7efb      	ldrb	r3, [r7, #27]
 800b892:	4619      	mov	r1, r3
 800b894:	481d      	ldr	r0, [pc, #116]	; (800b90c <create_name+0x124>)
 800b896:	f7fe ff34 	bl	800a702 <chk_chr>
 800b89a:	4603      	mov	r3, r0
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d001      	beq.n	800b8a4 <create_name+0xbc>
 800b8a0:	2306      	movs	r3, #6
 800b8a2:	e02c      	b.n	800b8fe <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b8a4:	7efb      	ldrb	r3, [r7, #27]
 800b8a6:	2b60      	cmp	r3, #96	; 0x60
 800b8a8:	d905      	bls.n	800b8b6 <create_name+0xce>
 800b8aa:	7efb      	ldrb	r3, [r7, #27]
 800b8ac:	2b7a      	cmp	r3, #122	; 0x7a
 800b8ae:	d802      	bhi.n	800b8b6 <create_name+0xce>
 800b8b0:	7efb      	ldrb	r3, [r7, #27]
 800b8b2:	3b20      	subs	r3, #32
 800b8b4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	1c5a      	adds	r2, r3, #1
 800b8ba:	613a      	str	r2, [r7, #16]
 800b8bc:	68ba      	ldr	r2, [r7, #8]
 800b8be:	4413      	add	r3, r2
 800b8c0:	7efa      	ldrb	r2, [r7, #27]
 800b8c2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b8c4:	e7a6      	b.n	800b814 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b8c6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b8c8:	68fa      	ldr	r2, [r7, #12]
 800b8ca:	69fb      	ldr	r3, [r7, #28]
 800b8cc:	441a      	add	r2, r3
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d101      	bne.n	800b8dc <create_name+0xf4>
 800b8d8:	2306      	movs	r3, #6
 800b8da:	e010      	b.n	800b8fe <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	2be5      	cmp	r3, #229	; 0xe5
 800b8e2:	d102      	bne.n	800b8ea <create_name+0x102>
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	2205      	movs	r2, #5
 800b8e8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b8ea:	7efb      	ldrb	r3, [r7, #27]
 800b8ec:	2b20      	cmp	r3, #32
 800b8ee:	d801      	bhi.n	800b8f4 <create_name+0x10c>
 800b8f0:	2204      	movs	r2, #4
 800b8f2:	e000      	b.n	800b8f6 <create_name+0x10e>
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	330b      	adds	r3, #11
 800b8fa:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b8fc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3720      	adds	r7, #32
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}
 800b906:	bf00      	nop
 800b908:	0801190c 	.word	0x0801190c
 800b90c:	08011848 	.word	0x08011848

0800b910 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b086      	sub	sp, #24
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b924:	e002      	b.n	800b92c <follow_path+0x1c>
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	3301      	adds	r3, #1
 800b92a:	603b      	str	r3, [r7, #0]
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	2b2f      	cmp	r3, #47	; 0x2f
 800b932:	d0f8      	beq.n	800b926 <follow_path+0x16>
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	2b5c      	cmp	r3, #92	; 0x5c
 800b93a:	d0f4      	beq.n	800b926 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	2200      	movs	r2, #0
 800b940:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	781b      	ldrb	r3, [r3, #0]
 800b946:	2b1f      	cmp	r3, #31
 800b948:	d80a      	bhi.n	800b960 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2280      	movs	r2, #128	; 0x80
 800b94e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b952:	2100      	movs	r1, #0
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f7ff fc1f 	bl	800b198 <dir_sdi>
 800b95a:	4603      	mov	r3, r0
 800b95c:	75fb      	strb	r3, [r7, #23]
 800b95e:	e043      	b.n	800b9e8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b960:	463b      	mov	r3, r7
 800b962:	4619      	mov	r1, r3
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f7ff ff3f 	bl	800b7e8 <create_name>
 800b96a:	4603      	mov	r3, r0
 800b96c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b96e:	7dfb      	ldrb	r3, [r7, #23]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d134      	bne.n	800b9de <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f7ff fe32 	bl	800b5de <dir_find>
 800b97a:	4603      	mov	r3, r0
 800b97c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b984:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b986:	7dfb      	ldrb	r3, [r7, #23]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d00a      	beq.n	800b9a2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b98c:	7dfb      	ldrb	r3, [r7, #23]
 800b98e:	2b04      	cmp	r3, #4
 800b990:	d127      	bne.n	800b9e2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b992:	7afb      	ldrb	r3, [r7, #11]
 800b994:	f003 0304 	and.w	r3, r3, #4
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d122      	bne.n	800b9e2 <follow_path+0xd2>
 800b99c:	2305      	movs	r3, #5
 800b99e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b9a0:	e01f      	b.n	800b9e2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b9a2:	7afb      	ldrb	r3, [r7, #11]
 800b9a4:	f003 0304 	and.w	r3, r3, #4
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d11c      	bne.n	800b9e6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	799b      	ldrb	r3, [r3, #6]
 800b9b0:	f003 0310 	and.w	r3, r3, #16
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d102      	bne.n	800b9be <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b9b8:	2305      	movs	r3, #5
 800b9ba:	75fb      	strb	r3, [r7, #23]
 800b9bc:	e014      	b.n	800b9e8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	695b      	ldr	r3, [r3, #20]
 800b9c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9cc:	4413      	add	r3, r2
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	68f8      	ldr	r0, [r7, #12]
 800b9d2:	f7ff fd68 	bl	800b4a6 <ld_clust>
 800b9d6:	4602      	mov	r2, r0
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b9dc:	e7c0      	b.n	800b960 <follow_path+0x50>
			if (res != FR_OK) break;
 800b9de:	bf00      	nop
 800b9e0:	e002      	b.n	800b9e8 <follow_path+0xd8>
				break;
 800b9e2:	bf00      	nop
 800b9e4:	e000      	b.n	800b9e8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b9e6:	bf00      	nop
			}
		}
	}

	return res;
 800b9e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3718      	adds	r7, #24
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b9f2:	b480      	push	{r7}
 800b9f4:	b087      	sub	sp, #28
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b9fa:	f04f 33ff 	mov.w	r3, #4294967295
 800b9fe:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d031      	beq.n	800ba6c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	617b      	str	r3, [r7, #20]
 800ba0e:	e002      	b.n	800ba16 <get_ldnumber+0x24>
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	3301      	adds	r3, #1
 800ba14:	617b      	str	r3, [r7, #20]
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	2b20      	cmp	r3, #32
 800ba1c:	d903      	bls.n	800ba26 <get_ldnumber+0x34>
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	781b      	ldrb	r3, [r3, #0]
 800ba22:	2b3a      	cmp	r3, #58	; 0x3a
 800ba24:	d1f4      	bne.n	800ba10 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	781b      	ldrb	r3, [r3, #0]
 800ba2a:	2b3a      	cmp	r3, #58	; 0x3a
 800ba2c:	d11c      	bne.n	800ba68 <get_ldnumber+0x76>
			tp = *path;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	1c5a      	adds	r2, r3, #1
 800ba38:	60fa      	str	r2, [r7, #12]
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	3b30      	subs	r3, #48	; 0x30
 800ba3e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	2b09      	cmp	r3, #9
 800ba44:	d80e      	bhi.n	800ba64 <get_ldnumber+0x72>
 800ba46:	68fa      	ldr	r2, [r7, #12]
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d10a      	bne.n	800ba64 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d107      	bne.n	800ba64 <get_ldnumber+0x72>
					vol = (int)i;
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	617b      	str	r3, [r7, #20]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	697a      	ldr	r2, [r7, #20]
 800ba62:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	e002      	b.n	800ba6e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ba68:	2300      	movs	r3, #0
 800ba6a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ba6c:	693b      	ldr	r3, [r7, #16]
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	371c      	adds	r7, #28
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr
	...

0800ba7c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b082      	sub	sp, #8
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	70da      	strb	r2, [r3, #3]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f04f 32ff 	mov.w	r2, #4294967295
 800ba92:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ba94:	6839      	ldr	r1, [r7, #0]
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f7fe fffe 	bl	800aa98 <move_window>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d001      	beq.n	800baa6 <check_fs+0x2a>
 800baa2:	2304      	movs	r3, #4
 800baa4:	e038      	b.n	800bb18 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	3330      	adds	r3, #48	; 0x30
 800baaa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800baae:	4618      	mov	r0, r3
 800bab0:	f7fe fd42 	bl	800a538 <ld_word>
 800bab4:	4603      	mov	r3, r0
 800bab6:	461a      	mov	r2, r3
 800bab8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800babc:	429a      	cmp	r2, r3
 800babe:	d001      	beq.n	800bac4 <check_fs+0x48>
 800bac0:	2303      	movs	r3, #3
 800bac2:	e029      	b.n	800bb18 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800baca:	2be9      	cmp	r3, #233	; 0xe9
 800bacc:	d009      	beq.n	800bae2 <check_fs+0x66>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bad4:	2beb      	cmp	r3, #235	; 0xeb
 800bad6:	d11e      	bne.n	800bb16 <check_fs+0x9a>
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800bade:	2b90      	cmp	r3, #144	; 0x90
 800bae0:	d119      	bne.n	800bb16 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	3330      	adds	r3, #48	; 0x30
 800bae6:	3336      	adds	r3, #54	; 0x36
 800bae8:	4618      	mov	r0, r3
 800baea:	f7fe fd3d 	bl	800a568 <ld_dword>
 800baee:	4603      	mov	r3, r0
 800baf0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800baf4:	4a0a      	ldr	r2, [pc, #40]	; (800bb20 <check_fs+0xa4>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d101      	bne.n	800bafe <check_fs+0x82>
 800bafa:	2300      	movs	r3, #0
 800bafc:	e00c      	b.n	800bb18 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	3330      	adds	r3, #48	; 0x30
 800bb02:	3352      	adds	r3, #82	; 0x52
 800bb04:	4618      	mov	r0, r3
 800bb06:	f7fe fd2f 	bl	800a568 <ld_dword>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	4a05      	ldr	r2, [pc, #20]	; (800bb24 <check_fs+0xa8>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d101      	bne.n	800bb16 <check_fs+0x9a>
 800bb12:	2300      	movs	r3, #0
 800bb14:	e000      	b.n	800bb18 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800bb16:	2302      	movs	r3, #2
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3708      	adds	r7, #8
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}
 800bb20:	00544146 	.word	0x00544146
 800bb24:	33544146 	.word	0x33544146

0800bb28 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b096      	sub	sp, #88	; 0x58
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	60f8      	str	r0, [r7, #12]
 800bb30:	60b9      	str	r1, [r7, #8]
 800bb32:	4613      	mov	r3, r2
 800bb34:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	2200      	movs	r2, #0
 800bb3a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bb3c:	68f8      	ldr	r0, [r7, #12]
 800bb3e:	f7ff ff58 	bl	800b9f2 <get_ldnumber>
 800bb42:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bb44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	da01      	bge.n	800bb4e <find_volume+0x26>
 800bb4a:	230b      	movs	r3, #11
 800bb4c:	e22d      	b.n	800bfaa <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bb4e:	4aa1      	ldr	r2, [pc, #644]	; (800bdd4 <find_volume+0x2ac>)
 800bb50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb56:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bb58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d101      	bne.n	800bb62 <find_volume+0x3a>
 800bb5e:	230c      	movs	r3, #12
 800bb60:	e223      	b.n	800bfaa <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb66:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bb68:	79fb      	ldrb	r3, [r7, #7]
 800bb6a:	f023 0301 	bic.w	r3, r3, #1
 800bb6e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d01a      	beq.n	800bbae <find_volume+0x86>
		stat = disk_status(fs->drv);
 800bb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb7a:	785b      	ldrb	r3, [r3, #1]
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7fe fc3d 	bl	800a3fc <disk_status>
 800bb82:	4603      	mov	r3, r0
 800bb84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bb88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bb8c:	f003 0301 	and.w	r3, r3, #1
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d10c      	bne.n	800bbae <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bb94:	79fb      	ldrb	r3, [r7, #7]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d007      	beq.n	800bbaa <find_volume+0x82>
 800bb9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bb9e:	f003 0304 	and.w	r3, r3, #4
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d001      	beq.n	800bbaa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800bba6:	230a      	movs	r3, #10
 800bba8:	e1ff      	b.n	800bfaa <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800bbaa:	2300      	movs	r3, #0
 800bbac:	e1fd      	b.n	800bfaa <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bbae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bbb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbb6:	b2da      	uxtb	r2, r3
 800bbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbba:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbbe:	785b      	ldrb	r3, [r3, #1]
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f7fe fc35 	bl	800a430 <disk_initialize>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bbcc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bbd0:	f003 0301 	and.w	r3, r3, #1
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d001      	beq.n	800bbdc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bbd8:	2303      	movs	r3, #3
 800bbda:	e1e6      	b.n	800bfaa <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bbdc:	79fb      	ldrb	r3, [r7, #7]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d007      	beq.n	800bbf2 <find_volume+0xca>
 800bbe2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bbe6:	f003 0304 	and.w	r3, r3, #4
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d001      	beq.n	800bbf2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800bbee:	230a      	movs	r3, #10
 800bbf0:	e1db      	b.n	800bfaa <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bbf6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bbf8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bbfa:	f7ff ff3f 	bl	800ba7c <check_fs>
 800bbfe:	4603      	mov	r3, r0
 800bc00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bc04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bc08:	2b02      	cmp	r3, #2
 800bc0a:	d149      	bne.n	800bca0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	643b      	str	r3, [r7, #64]	; 0x40
 800bc10:	e01e      	b.n	800bc50 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bc12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc14:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bc18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc1a:	011b      	lsls	r3, r3, #4
 800bc1c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800bc20:	4413      	add	r3, r2
 800bc22:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bc24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc26:	3304      	adds	r3, #4
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d006      	beq.n	800bc3c <find_volume+0x114>
 800bc2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc30:	3308      	adds	r3, #8
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7fe fc98 	bl	800a568 <ld_dword>
 800bc38:	4602      	mov	r2, r0
 800bc3a:	e000      	b.n	800bc3e <find_volume+0x116>
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc40:	009b      	lsls	r3, r3, #2
 800bc42:	3358      	adds	r3, #88	; 0x58
 800bc44:	443b      	add	r3, r7
 800bc46:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bc4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc4c:	3301      	adds	r3, #1
 800bc4e:	643b      	str	r3, [r7, #64]	; 0x40
 800bc50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc52:	2b03      	cmp	r3, #3
 800bc54:	d9dd      	bls.n	800bc12 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800bc56:	2300      	movs	r3, #0
 800bc58:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800bc5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d002      	beq.n	800bc66 <find_volume+0x13e>
 800bc60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc62:	3b01      	subs	r3, #1
 800bc64:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800bc66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc68:	009b      	lsls	r3, r3, #2
 800bc6a:	3358      	adds	r3, #88	; 0x58
 800bc6c:	443b      	add	r3, r7
 800bc6e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bc72:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bc74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d005      	beq.n	800bc86 <find_volume+0x15e>
 800bc7a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bc7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bc7e:	f7ff fefd 	bl	800ba7c <check_fs>
 800bc82:	4603      	mov	r3, r0
 800bc84:	e000      	b.n	800bc88 <find_volume+0x160>
 800bc86:	2303      	movs	r3, #3
 800bc88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bc8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	d905      	bls.n	800bca0 <find_volume+0x178>
 800bc94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc96:	3301      	adds	r3, #1
 800bc98:	643b      	str	r3, [r7, #64]	; 0x40
 800bc9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc9c:	2b03      	cmp	r3, #3
 800bc9e:	d9e2      	bls.n	800bc66 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bca0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bca4:	2b04      	cmp	r3, #4
 800bca6:	d101      	bne.n	800bcac <find_volume+0x184>
 800bca8:	2301      	movs	r3, #1
 800bcaa:	e17e      	b.n	800bfaa <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bcac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bcb0:	2b01      	cmp	r3, #1
 800bcb2:	d901      	bls.n	800bcb8 <find_volume+0x190>
 800bcb4:	230d      	movs	r3, #13
 800bcb6:	e178      	b.n	800bfaa <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800bcb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcba:	3330      	adds	r3, #48	; 0x30
 800bcbc:	330b      	adds	r3, #11
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f7fe fc3a 	bl	800a538 <ld_word>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcca:	d001      	beq.n	800bcd0 <find_volume+0x1a8>
 800bccc:	230d      	movs	r3, #13
 800bcce:	e16c      	b.n	800bfaa <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800bcd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd2:	3330      	adds	r3, #48	; 0x30
 800bcd4:	3316      	adds	r3, #22
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f7fe fc2e 	bl	800a538 <ld_word>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d106      	bne.n	800bcf4 <find_volume+0x1cc>
 800bce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bce8:	3330      	adds	r3, #48	; 0x30
 800bcea:	3324      	adds	r3, #36	; 0x24
 800bcec:	4618      	mov	r0, r3
 800bcee:	f7fe fc3b 	bl	800a568 <ld_dword>
 800bcf2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800bcf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcf6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bcf8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bcfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcfc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800bd00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd02:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bd04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd06:	789b      	ldrb	r3, [r3, #2]
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	d005      	beq.n	800bd18 <find_volume+0x1f0>
 800bd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd0e:	789b      	ldrb	r3, [r3, #2]
 800bd10:	2b02      	cmp	r3, #2
 800bd12:	d001      	beq.n	800bd18 <find_volume+0x1f0>
 800bd14:	230d      	movs	r3, #13
 800bd16:	e148      	b.n	800bfaa <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bd18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd1a:	789b      	ldrb	r3, [r3, #2]
 800bd1c:	461a      	mov	r2, r3
 800bd1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd20:	fb02 f303 	mul.w	r3, r2, r3
 800bd24:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bd26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd2c:	b29a      	uxth	r2, r3
 800bd2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd30:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bd32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd34:	895b      	ldrh	r3, [r3, #10]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d008      	beq.n	800bd4c <find_volume+0x224>
 800bd3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd3c:	895b      	ldrh	r3, [r3, #10]
 800bd3e:	461a      	mov	r2, r3
 800bd40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd42:	895b      	ldrh	r3, [r3, #10]
 800bd44:	3b01      	subs	r3, #1
 800bd46:	4013      	ands	r3, r2
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d001      	beq.n	800bd50 <find_volume+0x228>
 800bd4c:	230d      	movs	r3, #13
 800bd4e:	e12c      	b.n	800bfaa <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bd50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd52:	3330      	adds	r3, #48	; 0x30
 800bd54:	3311      	adds	r3, #17
 800bd56:	4618      	mov	r0, r3
 800bd58:	f7fe fbee 	bl	800a538 <ld_word>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	461a      	mov	r2, r3
 800bd60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd62:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bd64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd66:	891b      	ldrh	r3, [r3, #8]
 800bd68:	f003 030f 	and.w	r3, r3, #15
 800bd6c:	b29b      	uxth	r3, r3
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d001      	beq.n	800bd76 <find_volume+0x24e>
 800bd72:	230d      	movs	r3, #13
 800bd74:	e119      	b.n	800bfaa <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800bd76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd78:	3330      	adds	r3, #48	; 0x30
 800bd7a:	3313      	adds	r3, #19
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f7fe fbdb 	bl	800a538 <ld_word>
 800bd82:	4603      	mov	r3, r0
 800bd84:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800bd86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d106      	bne.n	800bd9a <find_volume+0x272>
 800bd8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd8e:	3330      	adds	r3, #48	; 0x30
 800bd90:	3320      	adds	r3, #32
 800bd92:	4618      	mov	r0, r3
 800bd94:	f7fe fbe8 	bl	800a568 <ld_dword>
 800bd98:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800bd9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd9c:	3330      	adds	r3, #48	; 0x30
 800bd9e:	330e      	adds	r3, #14
 800bda0:	4618      	mov	r0, r3
 800bda2:	f7fe fbc9 	bl	800a538 <ld_word>
 800bda6:	4603      	mov	r3, r0
 800bda8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800bdaa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d101      	bne.n	800bdb4 <find_volume+0x28c>
 800bdb0:	230d      	movs	r3, #13
 800bdb2:	e0fa      	b.n	800bfaa <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800bdb4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800bdb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdb8:	4413      	add	r3, r2
 800bdba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bdbc:	8912      	ldrh	r2, [r2, #8]
 800bdbe:	0912      	lsrs	r2, r2, #4
 800bdc0:	b292      	uxth	r2, r2
 800bdc2:	4413      	add	r3, r2
 800bdc4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800bdc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bdc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d204      	bcs.n	800bdd8 <find_volume+0x2b0>
 800bdce:	230d      	movs	r3, #13
 800bdd0:	e0eb      	b.n	800bfaa <find_volume+0x482>
 800bdd2:	bf00      	nop
 800bdd4:	20000c00 	.word	0x20000c00
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800bdd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bdda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bddc:	1ad3      	subs	r3, r2, r3
 800bdde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bde0:	8952      	ldrh	r2, [r2, #10]
 800bde2:	fbb3 f3f2 	udiv	r3, r3, r2
 800bde6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800bde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d101      	bne.n	800bdf2 <find_volume+0x2ca>
 800bdee:	230d      	movs	r3, #13
 800bdf0:	e0db      	b.n	800bfaa <find_volume+0x482>
		fmt = FS_FAT32;
 800bdf2:	2303      	movs	r3, #3
 800bdf4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800bdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdfa:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d802      	bhi.n	800be08 <find_volume+0x2e0>
 800be02:	2302      	movs	r3, #2
 800be04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800be08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800be0e:	4293      	cmp	r3, r2
 800be10:	d802      	bhi.n	800be18 <find_volume+0x2f0>
 800be12:	2301      	movs	r3, #1
 800be14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800be18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1a:	1c9a      	adds	r2, r3, #2
 800be1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be1e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800be20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be22:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800be24:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800be26:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800be28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be2a:	441a      	add	r2, r3
 800be2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be2e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800be30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800be32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be34:	441a      	add	r2, r3
 800be36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be38:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800be3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be3e:	2b03      	cmp	r3, #3
 800be40:	d11e      	bne.n	800be80 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800be42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be44:	3330      	adds	r3, #48	; 0x30
 800be46:	332a      	adds	r3, #42	; 0x2a
 800be48:	4618      	mov	r0, r3
 800be4a:	f7fe fb75 	bl	800a538 <ld_word>
 800be4e:	4603      	mov	r3, r0
 800be50:	2b00      	cmp	r3, #0
 800be52:	d001      	beq.n	800be58 <find_volume+0x330>
 800be54:	230d      	movs	r3, #13
 800be56:	e0a8      	b.n	800bfaa <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800be58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be5a:	891b      	ldrh	r3, [r3, #8]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d001      	beq.n	800be64 <find_volume+0x33c>
 800be60:	230d      	movs	r3, #13
 800be62:	e0a2      	b.n	800bfaa <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800be64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be66:	3330      	adds	r3, #48	; 0x30
 800be68:	332c      	adds	r3, #44	; 0x2c
 800be6a:	4618      	mov	r0, r3
 800be6c:	f7fe fb7c 	bl	800a568 <ld_dword>
 800be70:	4602      	mov	r2, r0
 800be72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be74:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800be76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be78:	695b      	ldr	r3, [r3, #20]
 800be7a:	009b      	lsls	r3, r3, #2
 800be7c:	647b      	str	r3, [r7, #68]	; 0x44
 800be7e:	e01f      	b.n	800bec0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800be80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be82:	891b      	ldrh	r3, [r3, #8]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d101      	bne.n	800be8c <find_volume+0x364>
 800be88:	230d      	movs	r3, #13
 800be8a:	e08e      	b.n	800bfaa <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800be8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be8e:	6a1a      	ldr	r2, [r3, #32]
 800be90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be92:	441a      	add	r2, r3
 800be94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be96:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800be98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800be9c:	2b02      	cmp	r3, #2
 800be9e:	d103      	bne.n	800bea8 <find_volume+0x380>
 800bea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea2:	695b      	ldr	r3, [r3, #20]
 800bea4:	005b      	lsls	r3, r3, #1
 800bea6:	e00a      	b.n	800bebe <find_volume+0x396>
 800bea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beaa:	695a      	ldr	r2, [r3, #20]
 800beac:	4613      	mov	r3, r2
 800beae:	005b      	lsls	r3, r3, #1
 800beb0:	4413      	add	r3, r2
 800beb2:	085a      	lsrs	r2, r3, #1
 800beb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb6:	695b      	ldr	r3, [r3, #20]
 800beb8:	f003 0301 	and.w	r3, r3, #1
 800bebc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bebe:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec2:	699a      	ldr	r2, [r3, #24]
 800bec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bec6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800beca:	0a5b      	lsrs	r3, r3, #9
 800becc:	429a      	cmp	r2, r3
 800bece:	d201      	bcs.n	800bed4 <find_volume+0x3ac>
 800bed0:	230d      	movs	r3, #13
 800bed2:	e06a      	b.n	800bfaa <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed6:	f04f 32ff 	mov.w	r2, #4294967295
 800beda:	611a      	str	r2, [r3, #16]
 800bedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bede:	691a      	ldr	r2, [r3, #16]
 800bee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800bee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee6:	2280      	movs	r2, #128	; 0x80
 800bee8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800beea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800beee:	2b03      	cmp	r3, #3
 800bef0:	d149      	bne.n	800bf86 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef4:	3330      	adds	r3, #48	; 0x30
 800bef6:	3330      	adds	r3, #48	; 0x30
 800bef8:	4618      	mov	r0, r3
 800befa:	f7fe fb1d 	bl	800a538 <ld_word>
 800befe:	4603      	mov	r3, r0
 800bf00:	2b01      	cmp	r3, #1
 800bf02:	d140      	bne.n	800bf86 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bf04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf06:	3301      	adds	r3, #1
 800bf08:	4619      	mov	r1, r3
 800bf0a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bf0c:	f7fe fdc4 	bl	800aa98 <move_window>
 800bf10:	4603      	mov	r3, r0
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d137      	bne.n	800bf86 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800bf16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf18:	2200      	movs	r2, #0
 800bf1a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bf1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf1e:	3330      	adds	r3, #48	; 0x30
 800bf20:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7fe fb07 	bl	800a538 <ld_word>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d127      	bne.n	800bf86 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bf36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf38:	3330      	adds	r3, #48	; 0x30
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f7fe fb14 	bl	800a568 <ld_dword>
 800bf40:	4603      	mov	r3, r0
 800bf42:	4a1c      	ldr	r2, [pc, #112]	; (800bfb4 <find_volume+0x48c>)
 800bf44:	4293      	cmp	r3, r2
 800bf46:	d11e      	bne.n	800bf86 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bf48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf4a:	3330      	adds	r3, #48	; 0x30
 800bf4c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7fe fb09 	bl	800a568 <ld_dword>
 800bf56:	4603      	mov	r3, r0
 800bf58:	4a17      	ldr	r2, [pc, #92]	; (800bfb8 <find_volume+0x490>)
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d113      	bne.n	800bf86 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bf5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf60:	3330      	adds	r3, #48	; 0x30
 800bf62:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7fe fafe 	bl	800a568 <ld_dword>
 800bf6c:	4602      	mov	r2, r0
 800bf6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf70:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bf72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf74:	3330      	adds	r3, #48	; 0x30
 800bf76:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7fe faf4 	bl	800a568 <ld_dword>
 800bf80:	4602      	mov	r2, r0
 800bf82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf84:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bf86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf88:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800bf8c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bf8e:	4b0b      	ldr	r3, [pc, #44]	; (800bfbc <find_volume+0x494>)
 800bf90:	881b      	ldrh	r3, [r3, #0]
 800bf92:	3301      	adds	r3, #1
 800bf94:	b29a      	uxth	r2, r3
 800bf96:	4b09      	ldr	r3, [pc, #36]	; (800bfbc <find_volume+0x494>)
 800bf98:	801a      	strh	r2, [r3, #0]
 800bf9a:	4b08      	ldr	r3, [pc, #32]	; (800bfbc <find_volume+0x494>)
 800bf9c:	881a      	ldrh	r2, [r3, #0]
 800bf9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bfa2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bfa4:	f7fe fd10 	bl	800a9c8 <clear_lock>
#endif
	return FR_OK;
 800bfa8:	2300      	movs	r3, #0
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3758      	adds	r7, #88	; 0x58
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}
 800bfb2:	bf00      	nop
 800bfb4:	41615252 	.word	0x41615252
 800bfb8:	61417272 	.word	0x61417272
 800bfbc:	20000c04 	.word	0x20000c04

0800bfc0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800bfca:	2309      	movs	r3, #9
 800bfcc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d01c      	beq.n	800c00e <validate+0x4e>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d018      	beq.n	800c00e <validate+0x4e>
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	781b      	ldrb	r3, [r3, #0]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d013      	beq.n	800c00e <validate+0x4e>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	889a      	ldrh	r2, [r3, #4]
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	88db      	ldrh	r3, [r3, #6]
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d10c      	bne.n	800c00e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	785b      	ldrb	r3, [r3, #1]
 800bffa:	4618      	mov	r0, r3
 800bffc:	f7fe f9fe 	bl	800a3fc <disk_status>
 800c000:	4603      	mov	r3, r0
 800c002:	f003 0301 	and.w	r3, r3, #1
 800c006:	2b00      	cmp	r3, #0
 800c008:	d101      	bne.n	800c00e <validate+0x4e>
			res = FR_OK;
 800c00a:	2300      	movs	r3, #0
 800c00c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c00e:	7bfb      	ldrb	r3, [r7, #15]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d102      	bne.n	800c01a <validate+0x5a>
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	e000      	b.n	800c01c <validate+0x5c>
 800c01a:	2300      	movs	r3, #0
 800c01c:	683a      	ldr	r2, [r7, #0]
 800c01e:	6013      	str	r3, [r2, #0]
	return res;
 800c020:	7bfb      	ldrb	r3, [r7, #15]
}
 800c022:	4618      	mov	r0, r3
 800c024:	3710      	adds	r7, #16
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}
	...

0800c02c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b088      	sub	sp, #32
 800c030:	af00      	add	r7, sp, #0
 800c032:	60f8      	str	r0, [r7, #12]
 800c034:	60b9      	str	r1, [r7, #8]
 800c036:	4613      	mov	r3, r2
 800c038:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c03e:	f107 0310 	add.w	r3, r7, #16
 800c042:	4618      	mov	r0, r3
 800c044:	f7ff fcd5 	bl	800b9f2 <get_ldnumber>
 800c048:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c04a:	69fb      	ldr	r3, [r7, #28]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	da01      	bge.n	800c054 <f_mount+0x28>
 800c050:	230b      	movs	r3, #11
 800c052:	e02b      	b.n	800c0ac <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c054:	4a17      	ldr	r2, [pc, #92]	; (800c0b4 <f_mount+0x88>)
 800c056:	69fb      	ldr	r3, [r7, #28]
 800c058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c05c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c05e:	69bb      	ldr	r3, [r7, #24]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d005      	beq.n	800c070 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c064:	69b8      	ldr	r0, [r7, #24]
 800c066:	f7fe fcaf 	bl	800a9c8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c06a:	69bb      	ldr	r3, [r7, #24]
 800c06c:	2200      	movs	r2, #0
 800c06e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d002      	beq.n	800c07c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	2200      	movs	r2, #0
 800c07a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c07c:	68fa      	ldr	r2, [r7, #12]
 800c07e:	490d      	ldr	r1, [pc, #52]	; (800c0b4 <f_mount+0x88>)
 800c080:	69fb      	ldr	r3, [r7, #28]
 800c082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d002      	beq.n	800c092 <f_mount+0x66>
 800c08c:	79fb      	ldrb	r3, [r7, #7]
 800c08e:	2b01      	cmp	r3, #1
 800c090:	d001      	beq.n	800c096 <f_mount+0x6a>
 800c092:	2300      	movs	r3, #0
 800c094:	e00a      	b.n	800c0ac <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c096:	f107 010c 	add.w	r1, r7, #12
 800c09a:	f107 0308 	add.w	r3, r7, #8
 800c09e:	2200      	movs	r2, #0
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f7ff fd41 	bl	800bb28 <find_volume>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c0aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3720      	adds	r7, #32
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}
 800c0b4:	20000c00 	.word	0x20000c00

0800c0b8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b098      	sub	sp, #96	; 0x60
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	60f8      	str	r0, [r7, #12]
 800c0c0:	60b9      	str	r1, [r7, #8]
 800c0c2:	4613      	mov	r3, r2
 800c0c4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d101      	bne.n	800c0d0 <f_open+0x18>
 800c0cc:	2309      	movs	r3, #9
 800c0ce:	e1ad      	b.n	800c42c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c0d0:	79fb      	ldrb	r3, [r7, #7]
 800c0d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c0d6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c0d8:	79fa      	ldrb	r2, [r7, #7]
 800c0da:	f107 0110 	add.w	r1, r7, #16
 800c0de:	f107 0308 	add.w	r3, r7, #8
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f7ff fd20 	bl	800bb28 <find_volume>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800c0ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	f040 8191 	bne.w	800c41a <f_open+0x362>
		dj.obj.fs = fs;
 800c0f8:	693b      	ldr	r3, [r7, #16]
 800c0fa:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c0fc:	68ba      	ldr	r2, [r7, #8]
 800c0fe:	f107 0314 	add.w	r3, r7, #20
 800c102:	4611      	mov	r1, r2
 800c104:	4618      	mov	r0, r3
 800c106:	f7ff fc03 	bl	800b910 <follow_path>
 800c10a:	4603      	mov	r3, r0
 800c10c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c110:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c114:	2b00      	cmp	r3, #0
 800c116:	d11a      	bne.n	800c14e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c118:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c11c:	b25b      	sxtb	r3, r3
 800c11e:	2b00      	cmp	r3, #0
 800c120:	da03      	bge.n	800c12a <f_open+0x72>
				res = FR_INVALID_NAME;
 800c122:	2306      	movs	r3, #6
 800c124:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c128:	e011      	b.n	800c14e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c12a:	79fb      	ldrb	r3, [r7, #7]
 800c12c:	f023 0301 	bic.w	r3, r3, #1
 800c130:	2b00      	cmp	r3, #0
 800c132:	bf14      	ite	ne
 800c134:	2301      	movne	r3, #1
 800c136:	2300      	moveq	r3, #0
 800c138:	b2db      	uxtb	r3, r3
 800c13a:	461a      	mov	r2, r3
 800c13c:	f107 0314 	add.w	r3, r7, #20
 800c140:	4611      	mov	r1, r2
 800c142:	4618      	mov	r0, r3
 800c144:	f7fe faf8 	bl	800a738 <chk_lock>
 800c148:	4603      	mov	r3, r0
 800c14a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c14e:	79fb      	ldrb	r3, [r7, #7]
 800c150:	f003 031c 	and.w	r3, r3, #28
 800c154:	2b00      	cmp	r3, #0
 800c156:	d07f      	beq.n	800c258 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c158:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d017      	beq.n	800c190 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c160:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c164:	2b04      	cmp	r3, #4
 800c166:	d10e      	bne.n	800c186 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c168:	f7fe fb42 	bl	800a7f0 <enq_lock>
 800c16c:	4603      	mov	r3, r0
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d006      	beq.n	800c180 <f_open+0xc8>
 800c172:	f107 0314 	add.w	r3, r7, #20
 800c176:	4618      	mov	r0, r3
 800c178:	f7ff fa86 	bl	800b688 <dir_register>
 800c17c:	4603      	mov	r3, r0
 800c17e:	e000      	b.n	800c182 <f_open+0xca>
 800c180:	2312      	movs	r3, #18
 800c182:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c186:	79fb      	ldrb	r3, [r7, #7]
 800c188:	f043 0308 	orr.w	r3, r3, #8
 800c18c:	71fb      	strb	r3, [r7, #7]
 800c18e:	e010      	b.n	800c1b2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c190:	7ebb      	ldrb	r3, [r7, #26]
 800c192:	f003 0311 	and.w	r3, r3, #17
 800c196:	2b00      	cmp	r3, #0
 800c198:	d003      	beq.n	800c1a2 <f_open+0xea>
					res = FR_DENIED;
 800c19a:	2307      	movs	r3, #7
 800c19c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c1a0:	e007      	b.n	800c1b2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c1a2:	79fb      	ldrb	r3, [r7, #7]
 800c1a4:	f003 0304 	and.w	r3, r3, #4
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d002      	beq.n	800c1b2 <f_open+0xfa>
 800c1ac:	2308      	movs	r3, #8
 800c1ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c1b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d168      	bne.n	800c28c <f_open+0x1d4>
 800c1ba:	79fb      	ldrb	r3, [r7, #7]
 800c1bc:	f003 0308 	and.w	r3, r3, #8
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d063      	beq.n	800c28c <f_open+0x1d4>
				dw = GET_FATTIME();
 800c1c4:	f7fd ffa0 	bl	800a108 <get_fattime>
 800c1c8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c1ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1cc:	330e      	adds	r3, #14
 800c1ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f7fe fa07 	bl	800a5e4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c1d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1d8:	3316      	adds	r3, #22
 800c1da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f7fe fa01 	bl	800a5e4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c1e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1e4:	330b      	adds	r3, #11
 800c1e6:	2220      	movs	r2, #32
 800c1e8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c1ee:	4611      	mov	r1, r2
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f7ff f958 	bl	800b4a6 <ld_clust>
 800c1f6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	4618      	mov	r0, r3
 800c200:	f7ff f970 	bl	800b4e4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c206:	331c      	adds	r3, #28
 800c208:	2100      	movs	r1, #0
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7fe f9ea 	bl	800a5e4 <st_dword>
					fs->wflag = 1;
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	2201      	movs	r2, #1
 800c214:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c216:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d037      	beq.n	800c28c <f_open+0x1d4>
						dw = fs->winsect;
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c220:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c222:	f107 0314 	add.w	r3, r7, #20
 800c226:	2200      	movs	r2, #0
 800c228:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7fe fe83 	bl	800af36 <remove_chain>
 800c230:	4603      	mov	r3, r0
 800c232:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800c236:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d126      	bne.n	800c28c <f_open+0x1d4>
							res = move_window(fs, dw);
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c242:	4618      	mov	r0, r3
 800c244:	f7fe fc28 	bl	800aa98 <move_window>
 800c248:	4603      	mov	r3, r0
 800c24a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c252:	3a01      	subs	r2, #1
 800c254:	60da      	str	r2, [r3, #12]
 800c256:	e019      	b.n	800c28c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c258:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d115      	bne.n	800c28c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c260:	7ebb      	ldrb	r3, [r7, #26]
 800c262:	f003 0310 	and.w	r3, r3, #16
 800c266:	2b00      	cmp	r3, #0
 800c268:	d003      	beq.n	800c272 <f_open+0x1ba>
					res = FR_NO_FILE;
 800c26a:	2304      	movs	r3, #4
 800c26c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c270:	e00c      	b.n	800c28c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c272:	79fb      	ldrb	r3, [r7, #7]
 800c274:	f003 0302 	and.w	r3, r3, #2
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d007      	beq.n	800c28c <f_open+0x1d4>
 800c27c:	7ebb      	ldrb	r3, [r7, #26]
 800c27e:	f003 0301 	and.w	r3, r3, #1
 800c282:	2b00      	cmp	r3, #0
 800c284:	d002      	beq.n	800c28c <f_open+0x1d4>
						res = FR_DENIED;
 800c286:	2307      	movs	r3, #7
 800c288:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c28c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c290:	2b00      	cmp	r3, #0
 800c292:	d128      	bne.n	800c2e6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c294:	79fb      	ldrb	r3, [r7, #7]
 800c296:	f003 0308 	and.w	r3, r3, #8
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d003      	beq.n	800c2a6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c29e:	79fb      	ldrb	r3, [r7, #7]
 800c2a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2a4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c2ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c2b4:	79fb      	ldrb	r3, [r7, #7]
 800c2b6:	f023 0301 	bic.w	r3, r3, #1
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	bf14      	ite	ne
 800c2be:	2301      	movne	r3, #1
 800c2c0:	2300      	moveq	r3, #0
 800c2c2:	b2db      	uxtb	r3, r3
 800c2c4:	461a      	mov	r2, r3
 800c2c6:	f107 0314 	add.w	r3, r7, #20
 800c2ca:	4611      	mov	r1, r2
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f7fe fab1 	bl	800a834 <inc_lock>
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	691b      	ldr	r3, [r3, #16]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d102      	bne.n	800c2e6 <f_open+0x22e>
 800c2e0:	2302      	movs	r3, #2
 800c2e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c2e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	f040 8095 	bne.w	800c41a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2f4:	4611      	mov	r1, r2
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f7ff f8d5 	bl	800b4a6 <ld_clust>
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c304:	331c      	adds	r3, #28
 800c306:	4618      	mov	r0, r3
 800c308:	f7fe f92e 	bl	800a568 <ld_dword>
 800c30c:	4602      	mov	r2, r0
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2200      	movs	r2, #0
 800c316:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c318:	693a      	ldr	r2, [r7, #16]
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	88da      	ldrh	r2, [r3, #6]
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	79fa      	ldrb	r2, [r7, #7]
 800c32a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	2200      	movs	r2, #0
 800c330:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	2200      	movs	r2, #0
 800c336:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	2200      	movs	r2, #0
 800c33c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	3330      	adds	r3, #48	; 0x30
 800c342:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c346:	2100      	movs	r1, #0
 800c348:	4618      	mov	r0, r3
 800c34a:	f7fe f998 	bl	800a67e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c34e:	79fb      	ldrb	r3, [r7, #7]
 800c350:	f003 0320 	and.w	r3, r3, #32
 800c354:	2b00      	cmp	r3, #0
 800c356:	d060      	beq.n	800c41a <f_open+0x362>
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	68db      	ldr	r3, [r3, #12]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d05c      	beq.n	800c41a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	68da      	ldr	r2, [r3, #12]
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	895b      	ldrh	r3, [r3, #10]
 800c36c:	025b      	lsls	r3, r3, #9
 800c36e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	689b      	ldr	r3, [r3, #8]
 800c374:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	68db      	ldr	r3, [r3, #12]
 800c37a:	657b      	str	r3, [r7, #84]	; 0x54
 800c37c:	e016      	b.n	800c3ac <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c382:	4618      	mov	r0, r3
 800c384:	f7fe fc43 	bl	800ac0e <get_fat>
 800c388:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c38a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c38c:	2b01      	cmp	r3, #1
 800c38e:	d802      	bhi.n	800c396 <f_open+0x2de>
 800c390:	2302      	movs	r3, #2
 800c392:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c396:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c39c:	d102      	bne.n	800c3a4 <f_open+0x2ec>
 800c39e:	2301      	movs	r3, #1
 800c3a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c3a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c3a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3a8:	1ad3      	subs	r3, r2, r3
 800c3aa:	657b      	str	r3, [r7, #84]	; 0x54
 800c3ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d103      	bne.n	800c3bc <f_open+0x304>
 800c3b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c3b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d8e0      	bhi.n	800c37e <f_open+0x2c6>
				}
				fp->clust = clst;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c3c0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c3c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d127      	bne.n	800c41a <f_open+0x362>
 800c3ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d022      	beq.n	800c41a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f7fe fbf9 	bl	800abd0 <clust2sect>
 800c3de:	6478      	str	r0, [r7, #68]	; 0x44
 800c3e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d103      	bne.n	800c3ee <f_open+0x336>
						res = FR_INT_ERR;
 800c3e6:	2302      	movs	r3, #2
 800c3e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c3ec:	e015      	b.n	800c41a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c3ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3f0:	0a5a      	lsrs	r2, r3, #9
 800c3f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3f4:	441a      	add	r2, r3
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c3fa:	693b      	ldr	r3, [r7, #16]
 800c3fc:	7858      	ldrb	r0, [r3, #1]
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	6a1a      	ldr	r2, [r3, #32]
 800c408:	2301      	movs	r3, #1
 800c40a:	f7fe f837 	bl	800a47c <disk_read>
 800c40e:	4603      	mov	r3, r0
 800c410:	2b00      	cmp	r3, #0
 800c412:	d002      	beq.n	800c41a <f_open+0x362>
 800c414:	2301      	movs	r3, #1
 800c416:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c41a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d002      	beq.n	800c428 <f_open+0x370>
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2200      	movs	r2, #0
 800c426:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c428:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	3760      	adds	r7, #96	; 0x60
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}

0800c434 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b08c      	sub	sp, #48	; 0x30
 800c438:	af00      	add	r7, sp, #0
 800c43a:	60f8      	str	r0, [r7, #12]
 800c43c:	60b9      	str	r1, [r7, #8]
 800c43e:	607a      	str	r2, [r7, #4]
 800c440:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	2200      	movs	r2, #0
 800c44a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	f107 0210 	add.w	r2, r7, #16
 800c452:	4611      	mov	r1, r2
 800c454:	4618      	mov	r0, r3
 800c456:	f7ff fdb3 	bl	800bfc0 <validate>
 800c45a:	4603      	mov	r3, r0
 800c45c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c460:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c464:	2b00      	cmp	r3, #0
 800c466:	d107      	bne.n	800c478 <f_write+0x44>
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	7d5b      	ldrb	r3, [r3, #21]
 800c46c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c470:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c474:	2b00      	cmp	r3, #0
 800c476:	d002      	beq.n	800c47e <f_write+0x4a>
 800c478:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c47c:	e14b      	b.n	800c716 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	7d1b      	ldrb	r3, [r3, #20]
 800c482:	f003 0302 	and.w	r3, r3, #2
 800c486:	2b00      	cmp	r3, #0
 800c488:	d101      	bne.n	800c48e <f_write+0x5a>
 800c48a:	2307      	movs	r3, #7
 800c48c:	e143      	b.n	800c716 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	699a      	ldr	r2, [r3, #24]
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	441a      	add	r2, r3
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	699b      	ldr	r3, [r3, #24]
 800c49a:	429a      	cmp	r2, r3
 800c49c:	f080 812d 	bcs.w	800c6fa <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	699b      	ldr	r3, [r3, #24]
 800c4a4:	43db      	mvns	r3, r3
 800c4a6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c4a8:	e127      	b.n	800c6fa <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	699b      	ldr	r3, [r3, #24]
 800c4ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	f040 80e3 	bne.w	800c67e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	699b      	ldr	r3, [r3, #24]
 800c4bc:	0a5b      	lsrs	r3, r3, #9
 800c4be:	693a      	ldr	r2, [r7, #16]
 800c4c0:	8952      	ldrh	r2, [r2, #10]
 800c4c2:	3a01      	subs	r2, #1
 800c4c4:	4013      	ands	r3, r2
 800c4c6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c4c8:	69bb      	ldr	r3, [r7, #24]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d143      	bne.n	800c556 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	699b      	ldr	r3, [r3, #24]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d10c      	bne.n	800c4f0 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	689b      	ldr	r3, [r3, #8]
 800c4da:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d11a      	bne.n	800c518 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	2100      	movs	r1, #0
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f7fe fd8a 	bl	800b000 <create_chain>
 800c4ec:	62b8      	str	r0, [r7, #40]	; 0x28
 800c4ee:	e013      	b.n	800c518 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d007      	beq.n	800c508 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	699b      	ldr	r3, [r3, #24]
 800c4fc:	4619      	mov	r1, r3
 800c4fe:	68f8      	ldr	r0, [r7, #12]
 800c500:	f7fe fe16 	bl	800b130 <clmt_clust>
 800c504:	62b8      	str	r0, [r7, #40]	; 0x28
 800c506:	e007      	b.n	800c518 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c508:	68fa      	ldr	r2, [r7, #12]
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	69db      	ldr	r3, [r3, #28]
 800c50e:	4619      	mov	r1, r3
 800c510:	4610      	mov	r0, r2
 800c512:	f7fe fd75 	bl	800b000 <create_chain>
 800c516:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	f000 80f2 	beq.w	800c704 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c522:	2b01      	cmp	r3, #1
 800c524:	d104      	bne.n	800c530 <f_write+0xfc>
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	2202      	movs	r2, #2
 800c52a:	755a      	strb	r2, [r3, #21]
 800c52c:	2302      	movs	r3, #2
 800c52e:	e0f2      	b.n	800c716 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c532:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c536:	d104      	bne.n	800c542 <f_write+0x10e>
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	2201      	movs	r2, #1
 800c53c:	755a      	strb	r2, [r3, #21]
 800c53e:	2301      	movs	r3, #1
 800c540:	e0e9      	b.n	800c716 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c546:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	689b      	ldr	r3, [r3, #8]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d102      	bne.n	800c556 <f_write+0x122>
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c554:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	7d1b      	ldrb	r3, [r3, #20]
 800c55a:	b25b      	sxtb	r3, r3
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	da18      	bge.n	800c592 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c560:	693b      	ldr	r3, [r7, #16]
 800c562:	7858      	ldrb	r0, [r3, #1]
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	6a1a      	ldr	r2, [r3, #32]
 800c56e:	2301      	movs	r3, #1
 800c570:	f7fd ffa4 	bl	800a4bc <disk_write>
 800c574:	4603      	mov	r3, r0
 800c576:	2b00      	cmp	r3, #0
 800c578:	d004      	beq.n	800c584 <f_write+0x150>
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	2201      	movs	r2, #1
 800c57e:	755a      	strb	r2, [r3, #21]
 800c580:	2301      	movs	r3, #1
 800c582:	e0c8      	b.n	800c716 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	7d1b      	ldrb	r3, [r3, #20]
 800c588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c58c:	b2da      	uxtb	r2, r3
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c592:	693a      	ldr	r2, [r7, #16]
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	69db      	ldr	r3, [r3, #28]
 800c598:	4619      	mov	r1, r3
 800c59a:	4610      	mov	r0, r2
 800c59c:	f7fe fb18 	bl	800abd0 <clust2sect>
 800c5a0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d104      	bne.n	800c5b2 <f_write+0x17e>
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	2202      	movs	r2, #2
 800c5ac:	755a      	strb	r2, [r3, #21]
 800c5ae:	2302      	movs	r3, #2
 800c5b0:	e0b1      	b.n	800c716 <f_write+0x2e2>
			sect += csect;
 800c5b2:	697a      	ldr	r2, [r7, #20]
 800c5b4:	69bb      	ldr	r3, [r7, #24]
 800c5b6:	4413      	add	r3, r2
 800c5b8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	0a5b      	lsrs	r3, r3, #9
 800c5be:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c5c0:	6a3b      	ldr	r3, [r7, #32]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d03c      	beq.n	800c640 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c5c6:	69ba      	ldr	r2, [r7, #24]
 800c5c8:	6a3b      	ldr	r3, [r7, #32]
 800c5ca:	4413      	add	r3, r2
 800c5cc:	693a      	ldr	r2, [r7, #16]
 800c5ce:	8952      	ldrh	r2, [r2, #10]
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	d905      	bls.n	800c5e0 <f_write+0x1ac>
					cc = fs->csize - csect;
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	895b      	ldrh	r3, [r3, #10]
 800c5d8:	461a      	mov	r2, r3
 800c5da:	69bb      	ldr	r3, [r7, #24]
 800c5dc:	1ad3      	subs	r3, r2, r3
 800c5de:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	7858      	ldrb	r0, [r3, #1]
 800c5e4:	6a3b      	ldr	r3, [r7, #32]
 800c5e6:	697a      	ldr	r2, [r7, #20]
 800c5e8:	69f9      	ldr	r1, [r7, #28]
 800c5ea:	f7fd ff67 	bl	800a4bc <disk_write>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d004      	beq.n	800c5fe <f_write+0x1ca>
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	755a      	strb	r2, [r3, #21]
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	e08b      	b.n	800c716 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	6a1a      	ldr	r2, [r3, #32]
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	1ad3      	subs	r3, r2, r3
 800c606:	6a3a      	ldr	r2, [r7, #32]
 800c608:	429a      	cmp	r2, r3
 800c60a:	d915      	bls.n	800c638 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	6a1a      	ldr	r2, [r3, #32]
 800c616:	697b      	ldr	r3, [r7, #20]
 800c618:	1ad3      	subs	r3, r2, r3
 800c61a:	025b      	lsls	r3, r3, #9
 800c61c:	69fa      	ldr	r2, [r7, #28]
 800c61e:	4413      	add	r3, r2
 800c620:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c624:	4619      	mov	r1, r3
 800c626:	f7fe f809 	bl	800a63c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	7d1b      	ldrb	r3, [r3, #20]
 800c62e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c632:	b2da      	uxtb	r2, r3
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c638:	6a3b      	ldr	r3, [r7, #32]
 800c63a:	025b      	lsls	r3, r3, #9
 800c63c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c63e:	e03f      	b.n	800c6c0 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	6a1b      	ldr	r3, [r3, #32]
 800c644:	697a      	ldr	r2, [r7, #20]
 800c646:	429a      	cmp	r2, r3
 800c648:	d016      	beq.n	800c678 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	699a      	ldr	r2, [r3, #24]
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c652:	429a      	cmp	r2, r3
 800c654:	d210      	bcs.n	800c678 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c656:	693b      	ldr	r3, [r7, #16]
 800c658:	7858      	ldrb	r0, [r3, #1]
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c660:	2301      	movs	r3, #1
 800c662:	697a      	ldr	r2, [r7, #20]
 800c664:	f7fd ff0a 	bl	800a47c <disk_read>
 800c668:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d004      	beq.n	800c678 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	2201      	movs	r2, #1
 800c672:	755a      	strb	r2, [r3, #21]
 800c674:	2301      	movs	r3, #1
 800c676:	e04e      	b.n	800c716 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	697a      	ldr	r2, [r7, #20]
 800c67c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	699b      	ldr	r3, [r3, #24]
 800c682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c686:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c68a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c68c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	429a      	cmp	r2, r3
 800c692:	d901      	bls.n	800c698 <f_write+0x264>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	699b      	ldr	r3, [r3, #24]
 800c6a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6a6:	4413      	add	r3, r2
 800c6a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6aa:	69f9      	ldr	r1, [r7, #28]
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f7fd ffc5 	bl	800a63c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	7d1b      	ldrb	r3, [r3, #20]
 800c6b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c6ba:	b2da      	uxtb	r2, r3
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c6c0:	69fa      	ldr	r2, [r7, #28]
 800c6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6c4:	4413      	add	r3, r2
 800c6c6:	61fb      	str	r3, [r7, #28]
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	699a      	ldr	r2, [r3, #24]
 800c6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ce:	441a      	add	r2, r3
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	619a      	str	r2, [r3, #24]
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	68da      	ldr	r2, [r3, #12]
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	699b      	ldr	r3, [r3, #24]
 800c6dc:	429a      	cmp	r2, r3
 800c6de:	bf38      	it	cc
 800c6e0:	461a      	movcc	r2, r3
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	60da      	str	r2, [r3, #12]
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	681a      	ldr	r2, [r3, #0]
 800c6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ec:	441a      	add	r2, r3
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	601a      	str	r2, [r3, #0]
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f6:	1ad3      	subs	r3, r2, r3
 800c6f8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	f47f aed4 	bne.w	800c4aa <f_write+0x76>
 800c702:	e000      	b.n	800c706 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c704:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	7d1b      	ldrb	r3, [r3, #20]
 800c70a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c70e:	b2da      	uxtb	r2, r3
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c714:	2300      	movs	r3, #0
}
 800c716:	4618      	mov	r0, r3
 800c718:	3730      	adds	r7, #48	; 0x30
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}

0800c71e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c71e:	b580      	push	{r7, lr}
 800c720:	b086      	sub	sp, #24
 800c722:	af00      	add	r7, sp, #0
 800c724:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f107 0208 	add.w	r2, r7, #8
 800c72c:	4611      	mov	r1, r2
 800c72e:	4618      	mov	r0, r3
 800c730:	f7ff fc46 	bl	800bfc0 <validate>
 800c734:	4603      	mov	r3, r0
 800c736:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c738:	7dfb      	ldrb	r3, [r7, #23]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d168      	bne.n	800c810 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	7d1b      	ldrb	r3, [r3, #20]
 800c742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c746:	2b00      	cmp	r3, #0
 800c748:	d062      	beq.n	800c810 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	7d1b      	ldrb	r3, [r3, #20]
 800c74e:	b25b      	sxtb	r3, r3
 800c750:	2b00      	cmp	r3, #0
 800c752:	da15      	bge.n	800c780 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	7858      	ldrb	r0, [r3, #1]
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6a1a      	ldr	r2, [r3, #32]
 800c762:	2301      	movs	r3, #1
 800c764:	f7fd feaa 	bl	800a4bc <disk_write>
 800c768:	4603      	mov	r3, r0
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d001      	beq.n	800c772 <f_sync+0x54>
 800c76e:	2301      	movs	r3, #1
 800c770:	e04f      	b.n	800c812 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	7d1b      	ldrb	r3, [r3, #20]
 800c776:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c77a:	b2da      	uxtb	r2, r3
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c780:	f7fd fcc2 	bl	800a108 <get_fattime>
 800c784:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c786:	68ba      	ldr	r2, [r7, #8]
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c78c:	4619      	mov	r1, r3
 800c78e:	4610      	mov	r0, r2
 800c790:	f7fe f982 	bl	800aa98 <move_window>
 800c794:	4603      	mov	r3, r0
 800c796:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c798:	7dfb      	ldrb	r3, [r7, #23]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d138      	bne.n	800c810 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7a2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	330b      	adds	r3, #11
 800c7a8:	781a      	ldrb	r2, [r3, #0]
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	330b      	adds	r3, #11
 800c7ae:	f042 0220 	orr.w	r2, r2, #32
 800c7b2:	b2d2      	uxtb	r2, r2
 800c7b4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6818      	ldr	r0, [r3, #0]
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	689b      	ldr	r3, [r3, #8]
 800c7be:	461a      	mov	r2, r3
 800c7c0:	68f9      	ldr	r1, [r7, #12]
 800c7c2:	f7fe fe8f 	bl	800b4e4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	f103 021c 	add.w	r2, r3, #28
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	68db      	ldr	r3, [r3, #12]
 800c7d0:	4619      	mov	r1, r3
 800c7d2:	4610      	mov	r0, r2
 800c7d4:	f7fd ff06 	bl	800a5e4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	3316      	adds	r3, #22
 800c7dc:	6939      	ldr	r1, [r7, #16]
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f7fd ff00 	bl	800a5e4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	3312      	adds	r3, #18
 800c7e8:	2100      	movs	r1, #0
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f7fd fedf 	bl	800a5ae <st_word>
					fs->wflag = 1;
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	2201      	movs	r2, #1
 800c7f4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f7fe f97b 	bl	800aaf4 <sync_fs>
 800c7fe:	4603      	mov	r3, r0
 800c800:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	7d1b      	ldrb	r3, [r3, #20]
 800c806:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c80a:	b2da      	uxtb	r2, r3
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c810:	7dfb      	ldrb	r3, [r7, #23]
}
 800c812:	4618      	mov	r0, r3
 800c814:	3718      	adds	r7, #24
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}

0800c81a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c81a:	b580      	push	{r7, lr}
 800c81c:	b084      	sub	sp, #16
 800c81e:	af00      	add	r7, sp, #0
 800c820:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f7ff ff7b 	bl	800c71e <f_sync>
 800c828:	4603      	mov	r3, r0
 800c82a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c82c:	7bfb      	ldrb	r3, [r7, #15]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d118      	bne.n	800c864 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f107 0208 	add.w	r2, r7, #8
 800c838:	4611      	mov	r1, r2
 800c83a:	4618      	mov	r0, r3
 800c83c:	f7ff fbc0 	bl	800bfc0 <validate>
 800c840:	4603      	mov	r3, r0
 800c842:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c844:	7bfb      	ldrb	r3, [r7, #15]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d10c      	bne.n	800c864 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	691b      	ldr	r3, [r3, #16]
 800c84e:	4618      	mov	r0, r3
 800c850:	f7fe f87e 	bl	800a950 <dec_lock>
 800c854:	4603      	mov	r3, r0
 800c856:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c858:	7bfb      	ldrb	r3, [r7, #15]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d102      	bne.n	800c864 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2200      	movs	r2, #0
 800c862:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c864:	7bfb      	ldrb	r3, [r7, #15]
}
 800c866:	4618      	mov	r0, r3
 800c868:	3710      	adds	r7, #16
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}

0800c86e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800c86e:	b580      	push	{r7, lr}
 800c870:	b086      	sub	sp, #24
 800c872:	af00      	add	r7, sp, #0
 800c874:	6078      	str	r0, [r7, #4]
 800c876:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d101      	bne.n	800c882 <f_opendir+0x14>
 800c87e:	2309      	movs	r3, #9
 800c880:	e064      	b.n	800c94c <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800c886:	f107 010c 	add.w	r1, r7, #12
 800c88a:	463b      	mov	r3, r7
 800c88c:	2200      	movs	r2, #0
 800c88e:	4618      	mov	r0, r3
 800c890:	f7ff f94a 	bl	800bb28 <find_volume>
 800c894:	4603      	mov	r3, r0
 800c896:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c898:	7dfb      	ldrb	r3, [r7, #23]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d14f      	bne.n	800c93e <f_opendir+0xd0>
		obj->fs = fs;
 800c89e:	68fa      	ldr	r2, [r7, #12]
 800c8a0:	693b      	ldr	r3, [r7, #16]
 800c8a2:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	4619      	mov	r1, r3
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f7ff f831 	bl	800b910 <follow_path>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800c8b2:	7dfb      	ldrb	r3, [r7, #23]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d13d      	bne.n	800c934 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c8be:	b25b      	sxtb	r3, r3
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	db12      	blt.n	800c8ea <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	799b      	ldrb	r3, [r3, #6]
 800c8c8:	f003 0310 	and.w	r3, r3, #16
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d00a      	beq.n	800c8e6 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800c8d0:	68fa      	ldr	r2, [r7, #12]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6a1b      	ldr	r3, [r3, #32]
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	4610      	mov	r0, r2
 800c8da:	f7fe fde4 	bl	800b4a6 <ld_clust>
 800c8de:	4602      	mov	r2, r0
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	609a      	str	r2, [r3, #8]
 800c8e4:	e001      	b.n	800c8ea <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800c8e6:	2305      	movs	r3, #5
 800c8e8:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800c8ea:	7dfb      	ldrb	r3, [r7, #23]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d121      	bne.n	800c934 <f_opendir+0xc6>
				obj->id = fs->id;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	88da      	ldrh	r2, [r3, #6]
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800c8f8:	2100      	movs	r1, #0
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f7fe fc4c 	bl	800b198 <dir_sdi>
 800c900:	4603      	mov	r3, r0
 800c902:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800c904:	7dfb      	ldrb	r3, [r7, #23]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d114      	bne.n	800c934 <f_opendir+0xc6>
					if (obj->sclust) {
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	689b      	ldr	r3, [r3, #8]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d00d      	beq.n	800c92e <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800c912:	2100      	movs	r1, #0
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f7fd ff8d 	bl	800a834 <inc_lock>
 800c91a:	4602      	mov	r2, r0
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	691b      	ldr	r3, [r3, #16]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d105      	bne.n	800c934 <f_opendir+0xc6>
 800c928:	2312      	movs	r3, #18
 800c92a:	75fb      	strb	r3, [r7, #23]
 800c92c:	e002      	b.n	800c934 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	2200      	movs	r2, #0
 800c932:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800c934:	7dfb      	ldrb	r3, [r7, #23]
 800c936:	2b04      	cmp	r3, #4
 800c938:	d101      	bne.n	800c93e <f_opendir+0xd0>
 800c93a:	2305      	movs	r3, #5
 800c93c:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800c93e:	7dfb      	ldrb	r3, [r7, #23]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d002      	beq.n	800c94a <f_opendir+0xdc>
 800c944:	693b      	ldr	r3, [r7, #16]
 800c946:	2200      	movs	r2, #0
 800c948:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c94a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3718      	adds	r7, #24
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}

0800c954 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b084      	sub	sp, #16
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f107 0208 	add.w	r2, r7, #8
 800c962:	4611      	mov	r1, r2
 800c964:	4618      	mov	r0, r3
 800c966:	f7ff fb2b 	bl	800bfc0 <validate>
 800c96a:	4603      	mov	r3, r0
 800c96c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c96e:	7bfb      	ldrb	r3, [r7, #15]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d110      	bne.n	800c996 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	691b      	ldr	r3, [r3, #16]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d006      	beq.n	800c98a <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	691b      	ldr	r3, [r3, #16]
 800c980:	4618      	mov	r0, r3
 800c982:	f7fd ffe5 	bl	800a950 <dec_lock>
 800c986:	4603      	mov	r3, r0
 800c988:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800c98a:	7bfb      	ldrb	r3, [r7, #15]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d102      	bne.n	800c996 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2200      	movs	r2, #0
 800c994:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800c996:	7bfb      	ldrb	r3, [r7, #15]
}
 800c998:	4618      	mov	r0, r3
 800c99a:	3710      	adds	r7, #16
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}

0800c9a0 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b084      	sub	sp, #16
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
 800c9a8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f107 0208 	add.w	r2, r7, #8
 800c9b0:	4611      	mov	r1, r2
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f7ff fb04 	bl	800bfc0 <validate>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c9bc:	7bfb      	ldrb	r3, [r7, #15]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d126      	bne.n	800ca10 <f_readdir+0x70>
		if (!fno) {
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d106      	bne.n	800c9d6 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800c9c8:	2100      	movs	r1, #0
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f7fe fbe4 	bl	800b198 <dir_sdi>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	73fb      	strb	r3, [r7, #15]
 800c9d4:	e01c      	b.n	800ca10 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800c9d6:	2100      	movs	r1, #0
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f7fe fda3 	bl	800b524 <dir_read>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800c9e2:	7bfb      	ldrb	r3, [r7, #15]
 800c9e4:	2b04      	cmp	r3, #4
 800c9e6:	d101      	bne.n	800c9ec <f_readdir+0x4c>
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800c9ec:	7bfb      	ldrb	r3, [r7, #15]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d10e      	bne.n	800ca10 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800c9f2:	6839      	ldr	r1, [r7, #0]
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f7fe fe97 	bl	800b728 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800c9fa:	2100      	movs	r1, #0
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f7fe fc46 	bl	800b28e <dir_next>
 800ca02:	4603      	mov	r3, r0
 800ca04:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800ca06:	7bfb      	ldrb	r3, [r7, #15]
 800ca08:	2b04      	cmp	r3, #4
 800ca0a:	d101      	bne.n	800ca10 <f_readdir+0x70>
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800ca10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	3710      	adds	r7, #16
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}

0800ca1a <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800ca1a:	b580      	push	{r7, lr}
 800ca1c:	b090      	sub	sp, #64	; 0x40
 800ca1e:	af00      	add	r7, sp, #0
 800ca20:	6078      	str	r0, [r7, #4]
 800ca22:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800ca24:	f107 010c 	add.w	r1, r7, #12
 800ca28:	1d3b      	adds	r3, r7, #4
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f7ff f87b 	bl	800bb28 <find_volume>
 800ca32:	4603      	mov	r3, r0
 800ca34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800ca38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d11f      	bne.n	800ca80 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ca40:	687a      	ldr	r2, [r7, #4]
 800ca42:	f107 030c 	add.w	r3, r7, #12
 800ca46:	4611      	mov	r1, r2
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f7fe ff61 	bl	800b910 <follow_path>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800ca54:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d111      	bne.n	800ca80 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800ca5c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ca60:	b25b      	sxtb	r3, r3
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	da03      	bge.n	800ca6e <f_stat+0x54>
				res = FR_INVALID_NAME;
 800ca66:	2306      	movs	r3, #6
 800ca68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ca6c:	e008      	b.n	800ca80 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d005      	beq.n	800ca80 <f_stat+0x66>
 800ca74:	f107 030c 	add.w	r3, r7, #12
 800ca78:	6839      	ldr	r1, [r7, #0]
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f7fe fe54 	bl	800b728 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800ca80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800ca84:	4618      	mov	r0, r3
 800ca86:	3740      	adds	r7, #64	; 0x40
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}

0800ca8c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b09e      	sub	sp, #120	; 0x78
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800ca94:	2300      	movs	r3, #0
 800ca96:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800ca98:	f107 010c 	add.w	r1, r7, #12
 800ca9c:	1d3b      	adds	r3, r7, #4
 800ca9e:	2202      	movs	r2, #2
 800caa0:	4618      	mov	r0, r3
 800caa2:	f7ff f841 	bl	800bb28 <find_volume>
 800caa6:	4603      	mov	r3, r0
 800caa8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 800cab0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	f040 808e 	bne.w	800cbd6 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800caba:	687a      	ldr	r2, [r7, #4]
 800cabc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cac0:	4611      	mov	r1, r2
 800cac2:	4618      	mov	r0, r3
 800cac4:	f7fe ff24 	bl	800b910 <follow_path>
 800cac8:	4603      	mov	r3, r0
 800caca:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800cace:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d108      	bne.n	800cae8 <f_unlink+0x5c>
 800cad6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cada:	2102      	movs	r1, #2
 800cadc:	4618      	mov	r0, r3
 800cade:	f7fd fe2b 	bl	800a738 <chk_lock>
 800cae2:	4603      	mov	r3, r0
 800cae4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800cae8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800caec:	2b00      	cmp	r3, #0
 800caee:	d172      	bne.n	800cbd6 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800caf0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800caf4:	b25b      	sxtb	r3, r3
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	da03      	bge.n	800cb02 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800cafa:	2306      	movs	r3, #6
 800cafc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800cb00:	e008      	b.n	800cb14 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800cb02:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800cb06:	f003 0301 	and.w	r3, r3, #1
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d002      	beq.n	800cb14 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800cb0e:	2307      	movs	r3, #7
 800cb10:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 800cb14:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d134      	bne.n	800cb86 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cb20:	4611      	mov	r1, r2
 800cb22:	4618      	mov	r0, r3
 800cb24:	f7fe fcbf 	bl	800b4a6 <ld_clust>
 800cb28:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800cb2a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800cb2e:	f003 0310 	and.w	r3, r3, #16
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d027      	beq.n	800cb86 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800cb3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cb3c:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800cb3e:	f107 0310 	add.w	r3, r7, #16
 800cb42:	2100      	movs	r1, #0
 800cb44:	4618      	mov	r0, r3
 800cb46:	f7fe fb27 	bl	800b198 <dir_sdi>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 800cb50:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d116      	bne.n	800cb86 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800cb58:	f107 0310 	add.w	r3, r7, #16
 800cb5c:	2100      	movs	r1, #0
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7fe fce0 	bl	800b524 <dir_read>
 800cb64:	4603      	mov	r3, r0
 800cb66:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800cb6a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d102      	bne.n	800cb78 <f_unlink+0xec>
 800cb72:	2307      	movs	r3, #7
 800cb74:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800cb78:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800cb7c:	2b04      	cmp	r3, #4
 800cb7e:	d102      	bne.n	800cb86 <f_unlink+0xfa>
 800cb80:	2300      	movs	r3, #0
 800cb82:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800cb86:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d123      	bne.n	800cbd6 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800cb8e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cb92:	4618      	mov	r0, r3
 800cb94:	f7fe fdaa 	bl	800b6ec <dir_remove>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800cb9e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d10c      	bne.n	800cbc0 <f_unlink+0x134>
 800cba6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d009      	beq.n	800cbc0 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800cbac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f7fe f9be 	bl	800af36 <remove_chain>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800cbc0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d106      	bne.n	800cbd6 <f_unlink+0x14a>
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f7fd ff92 	bl	800aaf4 <sync_fs>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800cbd6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800cbda:	4618      	mov	r0, r3
 800cbdc:	3778      	adds	r7, #120	; 0x78
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}
	...

0800cbe4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b087      	sub	sp, #28
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	60f8      	str	r0, [r7, #12]
 800cbec:	60b9      	str	r1, [r7, #8]
 800cbee:	4613      	mov	r3, r2
 800cbf0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cbf2:	2301      	movs	r3, #1
 800cbf4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cbfa:	4b1f      	ldr	r3, [pc, #124]	; (800cc78 <FATFS_LinkDriverEx+0x94>)
 800cbfc:	7a5b      	ldrb	r3, [r3, #9]
 800cbfe:	b2db      	uxtb	r3, r3
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d131      	bne.n	800cc68 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cc04:	4b1c      	ldr	r3, [pc, #112]	; (800cc78 <FATFS_LinkDriverEx+0x94>)
 800cc06:	7a5b      	ldrb	r3, [r3, #9]
 800cc08:	b2db      	uxtb	r3, r3
 800cc0a:	461a      	mov	r2, r3
 800cc0c:	4b1a      	ldr	r3, [pc, #104]	; (800cc78 <FATFS_LinkDriverEx+0x94>)
 800cc0e:	2100      	movs	r1, #0
 800cc10:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cc12:	4b19      	ldr	r3, [pc, #100]	; (800cc78 <FATFS_LinkDriverEx+0x94>)
 800cc14:	7a5b      	ldrb	r3, [r3, #9]
 800cc16:	b2db      	uxtb	r3, r3
 800cc18:	4a17      	ldr	r2, [pc, #92]	; (800cc78 <FATFS_LinkDriverEx+0x94>)
 800cc1a:	009b      	lsls	r3, r3, #2
 800cc1c:	4413      	add	r3, r2
 800cc1e:	68fa      	ldr	r2, [r7, #12]
 800cc20:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cc22:	4b15      	ldr	r3, [pc, #84]	; (800cc78 <FATFS_LinkDriverEx+0x94>)
 800cc24:	7a5b      	ldrb	r3, [r3, #9]
 800cc26:	b2db      	uxtb	r3, r3
 800cc28:	461a      	mov	r2, r3
 800cc2a:	4b13      	ldr	r3, [pc, #76]	; (800cc78 <FATFS_LinkDriverEx+0x94>)
 800cc2c:	4413      	add	r3, r2
 800cc2e:	79fa      	ldrb	r2, [r7, #7]
 800cc30:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cc32:	4b11      	ldr	r3, [pc, #68]	; (800cc78 <FATFS_LinkDriverEx+0x94>)
 800cc34:	7a5b      	ldrb	r3, [r3, #9]
 800cc36:	b2db      	uxtb	r3, r3
 800cc38:	1c5a      	adds	r2, r3, #1
 800cc3a:	b2d1      	uxtb	r1, r2
 800cc3c:	4a0e      	ldr	r2, [pc, #56]	; (800cc78 <FATFS_LinkDriverEx+0x94>)
 800cc3e:	7251      	strb	r1, [r2, #9]
 800cc40:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cc42:	7dbb      	ldrb	r3, [r7, #22]
 800cc44:	3330      	adds	r3, #48	; 0x30
 800cc46:	b2da      	uxtb	r2, r3
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	3301      	adds	r3, #1
 800cc50:	223a      	movs	r2, #58	; 0x3a
 800cc52:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	3302      	adds	r3, #2
 800cc58:	222f      	movs	r2, #47	; 0x2f
 800cc5a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	3303      	adds	r3, #3
 800cc60:	2200      	movs	r2, #0
 800cc62:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cc64:	2300      	movs	r3, #0
 800cc66:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cc68:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	371c      	adds	r7, #28
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc74:	4770      	bx	lr
 800cc76:	bf00      	nop
 800cc78:	20000c28 	.word	0x20000c28

0800cc7c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b082      	sub	sp, #8
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
 800cc84:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cc86:	2200      	movs	r2, #0
 800cc88:	6839      	ldr	r1, [r7, #0]
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f7ff ffaa 	bl	800cbe4 <FATFS_LinkDriverEx>
 800cc90:	4603      	mov	r3, r0
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3708      	adds	r7, #8
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}

0800cc9a <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cc9a:	b480      	push	{r7}
 800cc9c:	b083      	sub	sp, #12
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f103 0208 	add.w	r2, r3, #8
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f04f 32ff 	mov.w	r2, #4294967295
 800ccb2:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f103 0208 	add.w	r2, r3, #8
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f103 0208 	add.w	r2, r3, #8
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2200      	movs	r2, #0
 800cccc:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ccce:	bf00      	nop
 800ccd0:	370c      	adds	r7, #12
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd8:	4770      	bx	lr

0800ccda <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ccda:	b480      	push	{r7}
 800ccdc:	b083      	sub	sp, #12
 800ccde:	af00      	add	r7, sp, #0
 800cce0:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	2200      	movs	r2, #0
 800cce6:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cce8:	bf00      	nop
 800ccea:	370c      	adds	r7, #12
 800ccec:	46bd      	mov	sp, r7
 800ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf2:	4770      	bx	lr

0800ccf4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b085      	sub	sp, #20
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
 800ccfc:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	685b      	ldr	r3, [r3, #4]
 800cd02:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	68fa      	ldr	r2, [r7, #12]
 800cd08:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	689a      	ldr	r2, [r3, #8]
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	689b      	ldr	r3, [r3, #8]
 800cd16:	683a      	ldr	r2, [r7, #0]
 800cd18:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	683a      	ldr	r2, [r7, #0]
 800cd1e:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	687a      	ldr	r2, [r7, #4]
 800cd24:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	1c5a      	adds	r2, r3, #1
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	601a      	str	r2, [r3, #0]
}
 800cd30:	bf00      	nop
 800cd32:	3714      	adds	r7, #20
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr

0800cd3c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b085      	sub	sp, #20
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
 800cd44:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800cd4c:	68bb      	ldr	r3, [r7, #8]
 800cd4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd52:	d103      	bne.n	800cd5c <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	691b      	ldr	r3, [r3, #16]
 800cd58:	60fb      	str	r3, [r7, #12]
 800cd5a:	e00c      	b.n	800cd76 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	3308      	adds	r3, #8
 800cd60:	60fb      	str	r3, [r7, #12]
 800cd62:	e002      	b.n	800cd6a <vListInsert+0x2e>
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	685b      	ldr	r3, [r3, #4]
 800cd68:	60fb      	str	r3, [r7, #12]
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	685b      	ldr	r3, [r3, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	68ba      	ldr	r2, [r7, #8]
 800cd72:	429a      	cmp	r2, r3
 800cd74:	d2f6      	bcs.n	800cd64 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	685a      	ldr	r2, [r3, #4]
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	685b      	ldr	r3, [r3, #4]
 800cd82:	683a      	ldr	r2, [r7, #0]
 800cd84:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	68fa      	ldr	r2, [r7, #12]
 800cd8a:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	683a      	ldr	r2, [r7, #0]
 800cd90:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	687a      	ldr	r2, [r7, #4]
 800cd96:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	1c5a      	adds	r2, r3, #1
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	601a      	str	r2, [r3, #0]
}
 800cda2:	bf00      	nop
 800cda4:	3714      	adds	r7, #20
 800cda6:	46bd      	mov	sp, r7
 800cda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdac:	4770      	bx	lr

0800cdae <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cdae:	b480      	push	{r7}
 800cdb0:	b085      	sub	sp, #20
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	691b      	ldr	r3, [r3, #16]
 800cdba:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	685b      	ldr	r3, [r3, #4]
 800cdc0:	687a      	ldr	r2, [r7, #4]
 800cdc2:	6892      	ldr	r2, [r2, #8]
 800cdc4:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	689b      	ldr	r3, [r3, #8]
 800cdca:	687a      	ldr	r2, [r7, #4]
 800cdcc:	6852      	ldr	r2, [r2, #4]
 800cdce:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	685b      	ldr	r3, [r3, #4]
 800cdd4:	687a      	ldr	r2, [r7, #4]
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	d103      	bne.n	800cde2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	689a      	ldr	r2, [r3, #8]
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	2200      	movs	r2, #0
 800cde6:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	1e5a      	subs	r2, r3, #1
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	681b      	ldr	r3, [r3, #0]
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3714      	adds	r7, #20
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce00:	4770      	bx	lr
	...

0800ce04 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b084      	sub	sp, #16
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d10a      	bne.n	800ce2e <xQueueGenericReset+0x2a>
        __asm volatile
 800ce18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce1c:	f383 8811 	msr	BASEPRI, r3
 800ce20:	f3bf 8f6f 	isb	sy
 800ce24:	f3bf 8f4f 	dsb	sy
 800ce28:	60bb      	str	r3, [r7, #8]
    }
 800ce2a:	bf00      	nop
 800ce2c:	e7fe      	b.n	800ce2c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800ce2e:	f001 fd63 	bl	800e8f8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	681a      	ldr	r2, [r3, #0]
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce3a:	68f9      	ldr	r1, [r7, #12]
 800ce3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ce3e:	fb01 f303 	mul.w	r3, r1, r3
 800ce42:	441a      	add	r2, r3
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	681a      	ldr	r2, [r3, #0]
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	681a      	ldr	r2, [r3, #0]
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce5e:	3b01      	subs	r3, #1
 800ce60:	68f9      	ldr	r1, [r7, #12]
 800ce62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ce64:	fb01 f303 	mul.w	r3, r1, r3
 800ce68:	441a      	add	r2, r3
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	22ff      	movs	r2, #255	; 0xff
 800ce72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	22ff      	movs	r2, #255	; 0xff
 800ce7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d114      	bne.n	800ceae <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	691b      	ldr	r3, [r3, #16]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d01a      	beq.n	800cec2 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	3310      	adds	r3, #16
 800ce90:	4618      	mov	r0, r3
 800ce92:	f000 ff25 	bl	800dce0 <xTaskRemoveFromEventList>
 800ce96:	4603      	mov	r3, r0
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d012      	beq.n	800cec2 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800ce9c:	4b0c      	ldr	r3, [pc, #48]	; (800ced0 <xQueueGenericReset+0xcc>)
 800ce9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cea2:	601a      	str	r2, [r3, #0]
 800cea4:	f3bf 8f4f 	dsb	sy
 800cea8:	f3bf 8f6f 	isb	sy
 800ceac:	e009      	b.n	800cec2 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	3310      	adds	r3, #16
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f7ff fef1 	bl	800cc9a <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	3324      	adds	r3, #36	; 0x24
 800cebc:	4618      	mov	r0, r3
 800cebe:	f7ff feec 	bl	800cc9a <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800cec2:	f001 fd49 	bl	800e958 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800cec6:	2301      	movs	r3, #1
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	3710      	adds	r7, #16
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}
 800ced0:	e000ed04 	.word	0xe000ed04

0800ced4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b08c      	sub	sp, #48	; 0x30
 800ced8:	af02      	add	r7, sp, #8
 800ceda:	60f8      	str	r0, [r7, #12]
 800cedc:	60b9      	str	r1, [r7, #8]
 800cede:	4613      	mov	r3, r2
 800cee0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d10a      	bne.n	800cefe <xQueueGenericCreate+0x2a>
        __asm volatile
 800cee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceec:	f383 8811 	msr	BASEPRI, r3
 800cef0:	f3bf 8f6f 	isb	sy
 800cef4:	f3bf 8f4f 	dsb	sy
 800cef8:	61bb      	str	r3, [r7, #24]
    }
 800cefa:	bf00      	nop
 800cefc:	e7fe      	b.n	800cefc <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	68ba      	ldr	r2, [r7, #8]
 800cf02:	fb02 f303 	mul.w	r3, r2, r3
 800cf06:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d006      	beq.n	800cf1c <xQueueGenericCreate+0x48>
 800cf0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf16:	68fa      	ldr	r2, [r7, #12]
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d101      	bne.n	800cf20 <xQueueGenericCreate+0x4c>
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	e000      	b.n	800cf22 <xQueueGenericCreate+0x4e>
 800cf20:	2300      	movs	r3, #0
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d10a      	bne.n	800cf3c <xQueueGenericCreate+0x68>
        __asm volatile
 800cf26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf2a:	f383 8811 	msr	BASEPRI, r3
 800cf2e:	f3bf 8f6f 	isb	sy
 800cf32:	f3bf 8f4f 	dsb	sy
 800cf36:	617b      	str	r3, [r7, #20]
    }
 800cf38:	bf00      	nop
 800cf3a:	e7fe      	b.n	800cf3a <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800cf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf3e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800cf42:	d90a      	bls.n	800cf5a <xQueueGenericCreate+0x86>
        __asm volatile
 800cf44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf48:	f383 8811 	msr	BASEPRI, r3
 800cf4c:	f3bf 8f6f 	isb	sy
 800cf50:	f3bf 8f4f 	dsb	sy
 800cf54:	613b      	str	r3, [r7, #16]
    }
 800cf56:	bf00      	nop
 800cf58:	e7fe      	b.n	800cf58 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cf5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf5c:	3350      	adds	r3, #80	; 0x50
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f001 fdac 	bl	800eabc <pvPortMalloc>
 800cf64:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800cf66:	6a3b      	ldr	r3, [r7, #32]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d00d      	beq.n	800cf88 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cf6c:	6a3b      	ldr	r3, [r7, #32]
 800cf6e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cf70:	69fb      	ldr	r3, [r7, #28]
 800cf72:	3350      	adds	r3, #80	; 0x50
 800cf74:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cf76:	79fa      	ldrb	r2, [r7, #7]
 800cf78:	6a3b      	ldr	r3, [r7, #32]
 800cf7a:	9300      	str	r3, [sp, #0]
 800cf7c:	4613      	mov	r3, r2
 800cf7e:	69fa      	ldr	r2, [r7, #28]
 800cf80:	68b9      	ldr	r1, [r7, #8]
 800cf82:	68f8      	ldr	r0, [r7, #12]
 800cf84:	f000 f805 	bl	800cf92 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800cf88:	6a3b      	ldr	r3, [r7, #32]
    }
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	3728      	adds	r7, #40	; 0x28
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}

0800cf92 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800cf92:	b580      	push	{r7, lr}
 800cf94:	b084      	sub	sp, #16
 800cf96:	af00      	add	r7, sp, #0
 800cf98:	60f8      	str	r0, [r7, #12]
 800cf9a:	60b9      	str	r1, [r7, #8]
 800cf9c:	607a      	str	r2, [r7, #4]
 800cf9e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d103      	bne.n	800cfae <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cfa6:	69bb      	ldr	r3, [r7, #24]
 800cfa8:	69ba      	ldr	r2, [r7, #24]
 800cfaa:	601a      	str	r2, [r3, #0]
 800cfac:	e002      	b.n	800cfb4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cfae:	69bb      	ldr	r3, [r7, #24]
 800cfb0:	687a      	ldr	r2, [r7, #4]
 800cfb2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800cfb4:	69bb      	ldr	r3, [r7, #24]
 800cfb6:	68fa      	ldr	r2, [r7, #12]
 800cfb8:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800cfba:	69bb      	ldr	r3, [r7, #24]
 800cfbc:	68ba      	ldr	r2, [r7, #8]
 800cfbe:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cfc0:	2101      	movs	r1, #1
 800cfc2:	69b8      	ldr	r0, [r7, #24]
 800cfc4:	f7ff ff1e 	bl	800ce04 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800cfc8:	69bb      	ldr	r3, [r7, #24]
 800cfca:	78fa      	ldrb	r2, [r7, #3]
 800cfcc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800cfd0:	bf00      	nop
 800cfd2:	3710      	adds	r7, #16
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b086      	sub	sp, #24
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle;

        configASSERT( uxMaxCount != 0 );
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d10a      	bne.n	800cffe <xQueueCreateCountingSemaphore+0x26>
        __asm volatile
 800cfe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfec:	f383 8811 	msr	BASEPRI, r3
 800cff0:	f3bf 8f6f 	isb	sy
 800cff4:	f3bf 8f4f 	dsb	sy
 800cff8:	613b      	str	r3, [r7, #16]
    }
 800cffa:	bf00      	nop
 800cffc:	e7fe      	b.n	800cffc <xQueueCreateCountingSemaphore+0x24>
        configASSERT( uxInitialCount <= uxMaxCount );
 800cffe:	683a      	ldr	r2, [r7, #0]
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	429a      	cmp	r2, r3
 800d004:	d90a      	bls.n	800d01c <xQueueCreateCountingSemaphore+0x44>
        __asm volatile
 800d006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d00a:	f383 8811 	msr	BASEPRI, r3
 800d00e:	f3bf 8f6f 	isb	sy
 800d012:	f3bf 8f4f 	dsb	sy
 800d016:	60fb      	str	r3, [r7, #12]
    }
 800d018:	bf00      	nop
 800d01a:	e7fe      	b.n	800d01a <xQueueCreateCountingSemaphore+0x42>

        xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d01c:	2202      	movs	r2, #2
 800d01e:	2100      	movs	r1, #0
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f7ff ff57 	bl	800ced4 <xQueueGenericCreate>
 800d026:	6178      	str	r0, [r7, #20]

        if( xHandle != NULL )
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d002      	beq.n	800d034 <xQueueCreateCountingSemaphore+0x5c>
        {
            ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	683a      	ldr	r2, [r7, #0]
 800d032:	639a      	str	r2, [r3, #56]	; 0x38
        else
        {
            traceCREATE_COUNTING_SEMAPHORE_FAILED();
        }

        return xHandle;
 800d034:	697b      	ldr	r3, [r7, #20]
    }
 800d036:	4618      	mov	r0, r3
 800d038:	3718      	adds	r7, #24
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}
	...

0800d040 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b08c      	sub	sp, #48	; 0x30
 800d044:	af00      	add	r7, sp, #0
 800d046:	60f8      	str	r0, [r7, #12]
 800d048:	60b9      	str	r1, [r7, #8]
 800d04a:	607a      	str	r2, [r7, #4]
 800d04c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d04e:	2300      	movs	r3, #0
 800d050:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 800d056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d10a      	bne.n	800d072 <xQueueGenericSend+0x32>
        __asm volatile
 800d05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d060:	f383 8811 	msr	BASEPRI, r3
 800d064:	f3bf 8f6f 	isb	sy
 800d068:	f3bf 8f4f 	dsb	sy
 800d06c:	623b      	str	r3, [r7, #32]
    }
 800d06e:	bf00      	nop
 800d070:	e7fe      	b.n	800d070 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d103      	bne.n	800d080 <xQueueGenericSend+0x40>
 800d078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d07a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d101      	bne.n	800d084 <xQueueGenericSend+0x44>
 800d080:	2301      	movs	r3, #1
 800d082:	e000      	b.n	800d086 <xQueueGenericSend+0x46>
 800d084:	2300      	movs	r3, #0
 800d086:	2b00      	cmp	r3, #0
 800d088:	d10a      	bne.n	800d0a0 <xQueueGenericSend+0x60>
        __asm volatile
 800d08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d08e:	f383 8811 	msr	BASEPRI, r3
 800d092:	f3bf 8f6f 	isb	sy
 800d096:	f3bf 8f4f 	dsb	sy
 800d09a:	61fb      	str	r3, [r7, #28]
    }
 800d09c:	bf00      	nop
 800d09e:	e7fe      	b.n	800d09e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	2b02      	cmp	r3, #2
 800d0a4:	d103      	bne.n	800d0ae <xQueueGenericSend+0x6e>
 800d0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0aa:	2b01      	cmp	r3, #1
 800d0ac:	d101      	bne.n	800d0b2 <xQueueGenericSend+0x72>
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	e000      	b.n	800d0b4 <xQueueGenericSend+0x74>
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d10a      	bne.n	800d0ce <xQueueGenericSend+0x8e>
        __asm volatile
 800d0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0bc:	f383 8811 	msr	BASEPRI, r3
 800d0c0:	f3bf 8f6f 	isb	sy
 800d0c4:	f3bf 8f4f 	dsb	sy
 800d0c8:	61bb      	str	r3, [r7, #24]
    }
 800d0ca:	bf00      	nop
 800d0cc:	e7fe      	b.n	800d0cc <xQueueGenericSend+0x8c>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800d0ce:	f001 fc13 	bl	800e8f8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d302      	bcc.n	800d0e4 <xQueueGenericSend+0xa4>
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	2b02      	cmp	r3, #2
 800d0e2:	d129      	bne.n	800d138 <xQueueGenericSend+0xf8>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d0e4:	683a      	ldr	r2, [r7, #0]
 800d0e6:	68b9      	ldr	r1, [r7, #8]
 800d0e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0ea:	f000 f99b 	bl	800d424 <prvCopyDataToQueue>
 800d0ee:	6278      	str	r0, [r7, #36]	; 0x24

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d010      	beq.n	800d11a <xQueueGenericSend+0xda>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0fa:	3324      	adds	r3, #36	; 0x24
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f000 fdef 	bl	800dce0 <xTaskRemoveFromEventList>
 800d102:	4603      	mov	r3, r0
 800d104:	2b00      	cmp	r3, #0
 800d106:	d013      	beq.n	800d130 <xQueueGenericSend+0xf0>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800d108:	4b3f      	ldr	r3, [pc, #252]	; (800d208 <xQueueGenericSend+0x1c8>)
 800d10a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d10e:	601a      	str	r2, [r3, #0]
 800d110:	f3bf 8f4f 	dsb	sy
 800d114:	f3bf 8f6f 	isb	sy
 800d118:	e00a      	b.n	800d130 <xQueueGenericSend+0xf0>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800d11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d007      	beq.n	800d130 <xQueueGenericSend+0xf0>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800d120:	4b39      	ldr	r3, [pc, #228]	; (800d208 <xQueueGenericSend+0x1c8>)
 800d122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d126:	601a      	str	r2, [r3, #0]
 800d128:	f3bf 8f4f 	dsb	sy
 800d12c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800d130:	f001 fc12 	bl	800e958 <vPortExitCritical>
                return pdPASS;
 800d134:	2301      	movs	r3, #1
 800d136:	e063      	b.n	800d200 <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d103      	bne.n	800d146 <xQueueGenericSend+0x106>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800d13e:	f001 fc0b 	bl	800e958 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800d142:	2300      	movs	r3, #0
 800d144:	e05c      	b.n	800d200 <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800d146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d106      	bne.n	800d15a <xQueueGenericSend+0x11a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800d14c:	f107 0310 	add.w	r3, r7, #16
 800d150:	4618      	mov	r0, r3
 800d152:	f000 fe27 	bl	800dda4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800d156:	2301      	movs	r3, #1
 800d158:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800d15a:	f001 fbfd 	bl	800e958 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800d15e:	f000 fbdd 	bl	800d91c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800d162:	f001 fbc9 	bl	800e8f8 <vPortEnterCritical>
 800d166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d168:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d16c:	b25b      	sxtb	r3, r3
 800d16e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d172:	d103      	bne.n	800d17c <xQueueGenericSend+0x13c>
 800d174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d176:	2200      	movs	r2, #0
 800d178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d17e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d182:	b25b      	sxtb	r3, r3
 800d184:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d188:	d103      	bne.n	800d192 <xQueueGenericSend+0x152>
 800d18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d18c:	2200      	movs	r2, #0
 800d18e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d192:	f001 fbe1 	bl	800e958 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d196:	1d3a      	adds	r2, r7, #4
 800d198:	f107 0310 	add.w	r3, r7, #16
 800d19c:	4611      	mov	r1, r2
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f000 fe16 	bl	800ddd0 <xTaskCheckForTimeOut>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d124      	bne.n	800d1f4 <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d1aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1ac:	f000 fa0c 	bl	800d5c8 <prvIsQueueFull>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d018      	beq.n	800d1e8 <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b8:	3310      	adds	r3, #16
 800d1ba:	687a      	ldr	r2, [r7, #4]
 800d1bc:	4611      	mov	r1, r2
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f000 fd6a 	bl	800dc98 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800d1c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1c6:	f000 f997 	bl	800d4f8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800d1ca:	f000 fbb5 	bl	800d938 <xTaskResumeAll>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	f47f af7c 	bne.w	800d0ce <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 800d1d6:	4b0c      	ldr	r3, [pc, #48]	; (800d208 <xQueueGenericSend+0x1c8>)
 800d1d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1dc:	601a      	str	r2, [r3, #0]
 800d1de:	f3bf 8f4f 	dsb	sy
 800d1e2:	f3bf 8f6f 	isb	sy
 800d1e6:	e772      	b.n	800d0ce <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800d1e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1ea:	f000 f985 	bl	800d4f8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800d1ee:	f000 fba3 	bl	800d938 <xTaskResumeAll>
 800d1f2:	e76c      	b.n	800d0ce <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800d1f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1f6:	f000 f97f 	bl	800d4f8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800d1fa:	f000 fb9d 	bl	800d938 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800d1fe:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800d200:	4618      	mov	r0, r3
 800d202:	3730      	adds	r7, #48	; 0x30
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}
 800d208:	e000ed04 	.word	0xe000ed04

0800d20c <xQueueSemaphoreTake>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b08c      	sub	sp, #48	; 0x30
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
 800d214:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800d216:	2300      	movs	r3, #0
 800d218:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	627b      	str	r3, [r7, #36]	; 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800d21e:	2300      	movs	r3, #0
 800d220:	62bb      	str	r3, [r7, #40]	; 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800d222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d224:	2b00      	cmp	r3, #0
 800d226:	d10a      	bne.n	800d23e <xQueueSemaphoreTake+0x32>
        __asm volatile
 800d228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d22c:	f383 8811 	msr	BASEPRI, r3
 800d230:	f3bf 8f6f 	isb	sy
 800d234:	f3bf 8f4f 	dsb	sy
 800d238:	61bb      	str	r3, [r7, #24]
    }
 800d23a:	bf00      	nop
 800d23c:	e7fe      	b.n	800d23c <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800d23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d242:	2b00      	cmp	r3, #0
 800d244:	d00a      	beq.n	800d25c <xQueueSemaphoreTake+0x50>
        __asm volatile
 800d246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d24a:	f383 8811 	msr	BASEPRI, r3
 800d24e:	f3bf 8f6f 	isb	sy
 800d252:	f3bf 8f4f 	dsb	sy
 800d256:	617b      	str	r3, [r7, #20]
    }
 800d258:	bf00      	nop
 800d25a:	e7fe      	b.n	800d25a <xQueueSemaphoreTake+0x4e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800d25c:	f001 fb4c 	bl	800e8f8 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d264:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d266:	6a3b      	ldr	r3, [r7, #32]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d024      	beq.n	800d2b6 <xQueueSemaphoreTake+0xaa>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d26c:	6a3b      	ldr	r3, [r7, #32]
 800d26e:	1e5a      	subs	r2, r3, #1
 800d270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d272:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d104      	bne.n	800d286 <xQueueSemaphoreTake+0x7a>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d27c:	f001 f84a 	bl	800e314 <pvTaskIncrementMutexHeldCount>
 800d280:	4602      	mov	r2, r0
 800d282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d284:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d288:	691b      	ldr	r3, [r3, #16]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d00f      	beq.n	800d2ae <xQueueSemaphoreTake+0xa2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d290:	3310      	adds	r3, #16
 800d292:	4618      	mov	r0, r3
 800d294:	f000 fd24 	bl	800dce0 <xTaskRemoveFromEventList>
 800d298:	4603      	mov	r3, r0
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d007      	beq.n	800d2ae <xQueueSemaphoreTake+0xa2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800d29e:	4b54      	ldr	r3, [pc, #336]	; (800d3f0 <xQueueSemaphoreTake+0x1e4>)
 800d2a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2a4:	601a      	str	r2, [r3, #0]
 800d2a6:	f3bf 8f4f 	dsb	sy
 800d2aa:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800d2ae:	f001 fb53 	bl	800e958 <vPortExitCritical>
                return pdPASS;
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	e097      	b.n	800d3e6 <xQueueSemaphoreTake+0x1da>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d111      	bne.n	800d2e0 <xQueueSemaphoreTake+0xd4>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 800d2bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d00a      	beq.n	800d2d8 <xQueueSemaphoreTake+0xcc>
        __asm volatile
 800d2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c6:	f383 8811 	msr	BASEPRI, r3
 800d2ca:	f3bf 8f6f 	isb	sy
 800d2ce:	f3bf 8f4f 	dsb	sy
 800d2d2:	613b      	str	r3, [r7, #16]
    }
 800d2d4:	bf00      	nop
 800d2d6:	e7fe      	b.n	800d2d6 <xQueueSemaphoreTake+0xca>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800d2d8:	f001 fb3e 	bl	800e958 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	e082      	b.n	800d3e6 <xQueueSemaphoreTake+0x1da>
                }
                else if( xEntryTimeSet == pdFALSE )
 800d2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d106      	bne.n	800d2f4 <xQueueSemaphoreTake+0xe8>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800d2e6:	f107 0308 	add.w	r3, r7, #8
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	f000 fd5a 	bl	800dda4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800d2f4:	f001 fb30 	bl	800e958 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800d2f8:	f000 fb10 	bl	800d91c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800d2fc:	f001 fafc 	bl	800e8f8 <vPortEnterCritical>
 800d300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d302:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d306:	b25b      	sxtb	r3, r3
 800d308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d30c:	d103      	bne.n	800d316 <xQueueSemaphoreTake+0x10a>
 800d30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d310:	2200      	movs	r2, #0
 800d312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d318:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d31c:	b25b      	sxtb	r3, r3
 800d31e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d322:	d103      	bne.n	800d32c <xQueueSemaphoreTake+0x120>
 800d324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d326:	2200      	movs	r2, #0
 800d328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d32c:	f001 fb14 	bl	800e958 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d330:	463a      	mov	r2, r7
 800d332:	f107 0308 	add.w	r3, r7, #8
 800d336:	4611      	mov	r1, r2
 800d338:	4618      	mov	r0, r3
 800d33a:	f000 fd49 	bl	800ddd0 <xTaskCheckForTimeOut>
 800d33e:	4603      	mov	r3, r0
 800d340:	2b00      	cmp	r3, #0
 800d342:	d132      	bne.n	800d3aa <xQueueSemaphoreTake+0x19e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d344:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d346:	f000 f929 	bl	800d59c <prvIsQueueEmpty>
 800d34a:	4603      	mov	r3, r0
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d026      	beq.n	800d39e <xQueueSemaphoreTake+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d109      	bne.n	800d36c <xQueueSemaphoreTake+0x160>
                        {
                            taskENTER_CRITICAL();
 800d358:	f001 face 	bl	800e8f8 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d35e:	689b      	ldr	r3, [r3, #8]
 800d360:	4618      	mov	r0, r3
 800d362:	f000 fe59 	bl	800e018 <xTaskPriorityInherit>
 800d366:	62b8      	str	r0, [r7, #40]	; 0x28
                            }
                            taskEXIT_CRITICAL();
 800d368:	f001 faf6 	bl	800e958 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d36e:	3324      	adds	r3, #36	; 0x24
 800d370:	683a      	ldr	r2, [r7, #0]
 800d372:	4611      	mov	r1, r2
 800d374:	4618      	mov	r0, r3
 800d376:	f000 fc8f 	bl	800dc98 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800d37a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d37c:	f000 f8bc 	bl	800d4f8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800d380:	f000 fada 	bl	800d938 <xTaskResumeAll>
 800d384:	4603      	mov	r3, r0
 800d386:	2b00      	cmp	r3, #0
 800d388:	f47f af68 	bne.w	800d25c <xQueueSemaphoreTake+0x50>
                {
                    portYIELD_WITHIN_API();
 800d38c:	4b18      	ldr	r3, [pc, #96]	; (800d3f0 <xQueueSemaphoreTake+0x1e4>)
 800d38e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d392:	601a      	str	r2, [r3, #0]
 800d394:	f3bf 8f4f 	dsb	sy
 800d398:	f3bf 8f6f 	isb	sy
 800d39c:	e75e      	b.n	800d25c <xQueueSemaphoreTake+0x50>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800d39e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d3a0:	f000 f8aa 	bl	800d4f8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800d3a4:	f000 fac8 	bl	800d938 <xTaskResumeAll>
 800d3a8:	e758      	b.n	800d25c <xQueueSemaphoreTake+0x50>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800d3aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d3ac:	f000 f8a4 	bl	800d4f8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800d3b0:	f000 fac2 	bl	800d938 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d3b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d3b6:	f000 f8f1 	bl	800d59c <prvIsQueueEmpty>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	f43f af4d 	beq.w	800d25c <xQueueSemaphoreTake+0x50>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 800d3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d00d      	beq.n	800d3e4 <xQueueSemaphoreTake+0x1d8>
                        {
                            taskENTER_CRITICAL();
 800d3c8:	f001 fa96 	bl	800e8f8 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d3cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d3ce:	f000 f811 	bl	800d3f4 <prvGetDisinheritPriorityAfterTimeout>
 800d3d2:	61f8      	str	r0, [r7, #28]
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d6:	689b      	ldr	r3, [r3, #8]
 800d3d8:	69f9      	ldr	r1, [r7, #28]
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f000 ff0c 	bl	800e1f8 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 800d3e0:	f001 faba 	bl	800e958 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800d3e4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3730      	adds	r7, #48	; 0x30
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
 800d3ee:	bf00      	nop
 800d3f0:	e000ed04 	.word	0xe000ed04

0800d3f4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800d3f4:	b480      	push	{r7}
 800d3f6:	b085      	sub	sp, #20
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d400:	2b00      	cmp	r3, #0
 800d402:	d006      	beq.n	800d412 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	f1c3 0305 	rsb	r3, r3, #5
 800d40e:	60fb      	str	r3, [r7, #12]
 800d410:	e001      	b.n	800d416 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d412:	2300      	movs	r3, #0
 800d414:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800d416:	68fb      	ldr	r3, [r7, #12]
    }
 800d418:	4618      	mov	r0, r3
 800d41a:	3714      	adds	r7, #20
 800d41c:	46bd      	mov	sp, r7
 800d41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d422:	4770      	bx	lr

0800d424 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b086      	sub	sp, #24
 800d428:	af00      	add	r7, sp, #0
 800d42a:	60f8      	str	r0, [r7, #12]
 800d42c:	60b9      	str	r1, [r7, #8]
 800d42e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800d430:	2300      	movs	r3, #0
 800d432:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d438:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d10d      	bne.n	800d45e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d14d      	bne.n	800d4e6 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	689b      	ldr	r3, [r3, #8]
 800d44e:	4618      	mov	r0, r3
 800d450:	f000 fe58 	bl	800e104 <xTaskPriorityDisinherit>
 800d454:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	2200      	movs	r2, #0
 800d45a:	609a      	str	r2, [r3, #8]
 800d45c:	e043      	b.n	800d4e6 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d119      	bne.n	800d498 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	6858      	ldr	r0, [r3, #4]
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d46c:	461a      	mov	r2, r3
 800d46e:	68b9      	ldr	r1, [r7, #8]
 800d470:	f001 fd5c 	bl	800ef2c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	685a      	ldr	r2, [r3, #4]
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d47c:	441a      	add	r2, r3
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	685a      	ldr	r2, [r3, #4]
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	689b      	ldr	r3, [r3, #8]
 800d48a:	429a      	cmp	r2, r3
 800d48c:	d32b      	bcc.n	800d4e6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	681a      	ldr	r2, [r3, #0]
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	605a      	str	r2, [r3, #4]
 800d496:	e026      	b.n	800d4e6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	68d8      	ldr	r0, [r3, #12]
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4a0:	461a      	mov	r2, r3
 800d4a2:	68b9      	ldr	r1, [r7, #8]
 800d4a4:	f001 fd42 	bl	800ef2c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	68da      	ldr	r2, [r3, #12]
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4b0:	425b      	negs	r3, r3
 800d4b2:	441a      	add	r2, r3
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	68da      	ldr	r2, [r3, #12]
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	429a      	cmp	r2, r3
 800d4c2:	d207      	bcs.n	800d4d4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	689a      	ldr	r2, [r3, #8]
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4cc:	425b      	negs	r3, r3
 800d4ce:	441a      	add	r2, r3
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2b02      	cmp	r3, #2
 800d4d8:	d105      	bne.n	800d4e6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d002      	beq.n	800d4e6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	3b01      	subs	r3, #1
 800d4e4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d4e6:	693b      	ldr	r3, [r7, #16]
 800d4e8:	1c5a      	adds	r2, r3, #1
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800d4ee:	697b      	ldr	r3, [r7, #20]
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3718      	adds	r7, #24
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}

0800d4f8 <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b084      	sub	sp, #16
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800d500:	f001 f9fa 	bl	800e8f8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d50a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800d50c:	e011      	b.n	800d532 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d512:	2b00      	cmp	r3, #0
 800d514:	d012      	beq.n	800d53c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	3324      	adds	r3, #36	; 0x24
 800d51a:	4618      	mov	r0, r3
 800d51c:	f000 fbe0 	bl	800dce0 <xTaskRemoveFromEventList>
 800d520:	4603      	mov	r3, r0
 800d522:	2b00      	cmp	r3, #0
 800d524:	d001      	beq.n	800d52a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800d526:	f000 fcb9 	bl	800de9c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800d52a:	7bfb      	ldrb	r3, [r7, #15]
 800d52c:	3b01      	subs	r3, #1
 800d52e:	b2db      	uxtb	r3, r3
 800d530:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800d532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d536:	2b00      	cmp	r3, #0
 800d538:	dce9      	bgt.n	800d50e <prvUnlockQueue+0x16>
 800d53a:	e000      	b.n	800d53e <prvUnlockQueue+0x46>
                        break;
 800d53c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	22ff      	movs	r2, #255	; 0xff
 800d542:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800d546:	f001 fa07 	bl	800e958 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800d54a:	f001 f9d5 	bl	800e8f8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d554:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800d556:	e011      	b.n	800d57c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	691b      	ldr	r3, [r3, #16]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d012      	beq.n	800d586 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	3310      	adds	r3, #16
 800d564:	4618      	mov	r0, r3
 800d566:	f000 fbbb 	bl	800dce0 <xTaskRemoveFromEventList>
 800d56a:	4603      	mov	r3, r0
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d001      	beq.n	800d574 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800d570:	f000 fc94 	bl	800de9c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800d574:	7bbb      	ldrb	r3, [r7, #14]
 800d576:	3b01      	subs	r3, #1
 800d578:	b2db      	uxtb	r3, r3
 800d57a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800d57c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d580:	2b00      	cmp	r3, #0
 800d582:	dce9      	bgt.n	800d558 <prvUnlockQueue+0x60>
 800d584:	e000      	b.n	800d588 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800d586:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	22ff      	movs	r2, #255	; 0xff
 800d58c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800d590:	f001 f9e2 	bl	800e958 <vPortExitCritical>
}
 800d594:	bf00      	nop
 800d596:	3710      	adds	r7, #16
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}

0800d59c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b084      	sub	sp, #16
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800d5a4:	f001 f9a8 	bl	800e8f8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d102      	bne.n	800d5b6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	60fb      	str	r3, [r7, #12]
 800d5b4:	e001      	b.n	800d5ba <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800d5ba:	f001 f9cd 	bl	800e958 <vPortExitCritical>

    return xReturn;
 800d5be:	68fb      	ldr	r3, [r7, #12]
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3710      	adds	r7, #16
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b084      	sub	sp, #16
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800d5d0:	f001 f992 	bl	800e8f8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5dc:	429a      	cmp	r2, r3
 800d5de:	d102      	bne.n	800d5e6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	60fb      	str	r3, [r7, #12]
 800d5e4:	e001      	b.n	800d5ea <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800d5ea:	f001 f9b5 	bl	800e958 <vPortExitCritical>

    return xReturn;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3710      	adds	r7, #16
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}

0800d5f8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b08c      	sub	sp, #48	; 0x30
 800d5fc:	af04      	add	r7, sp, #16
 800d5fe:	60f8      	str	r0, [r7, #12]
 800d600:	60b9      	str	r1, [r7, #8]
 800d602:	603b      	str	r3, [r7, #0]
 800d604:	4613      	mov	r3, r2
 800d606:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d608:	88fb      	ldrh	r3, [r7, #6]
 800d60a:	009b      	lsls	r3, r3, #2
 800d60c:	4618      	mov	r0, r3
 800d60e:	f001 fa55 	bl	800eabc <pvPortMalloc>
 800d612:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d00e      	beq.n	800d638 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d61a:	2058      	movs	r0, #88	; 0x58
 800d61c:	f001 fa4e 	bl	800eabc <pvPortMalloc>
 800d620:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800d622:	69fb      	ldr	r3, [r7, #28]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d003      	beq.n	800d630 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800d628:	69fb      	ldr	r3, [r7, #28]
 800d62a:	697a      	ldr	r2, [r7, #20]
 800d62c:	631a      	str	r2, [r3, #48]	; 0x30
 800d62e:	e005      	b.n	800d63c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800d630:	6978      	ldr	r0, [r7, #20]
 800d632:	f001 fb23 	bl	800ec7c <vPortFree>
 800d636:	e001      	b.n	800d63c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800d638:	2300      	movs	r3, #0
 800d63a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800d63c:	69fb      	ldr	r3, [r7, #28]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d013      	beq.n	800d66a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d642:	88fa      	ldrh	r2, [r7, #6]
 800d644:	2300      	movs	r3, #0
 800d646:	9303      	str	r3, [sp, #12]
 800d648:	69fb      	ldr	r3, [r7, #28]
 800d64a:	9302      	str	r3, [sp, #8]
 800d64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d64e:	9301      	str	r3, [sp, #4]
 800d650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d652:	9300      	str	r3, [sp, #0]
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	68b9      	ldr	r1, [r7, #8]
 800d658:	68f8      	ldr	r0, [r7, #12]
 800d65a:	f000 f80e 	bl	800d67a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800d65e:	69f8      	ldr	r0, [r7, #28]
 800d660:	f000 f8a2 	bl	800d7a8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800d664:	2301      	movs	r3, #1
 800d666:	61bb      	str	r3, [r7, #24]
 800d668:	e002      	b.n	800d670 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d66a:	f04f 33ff 	mov.w	r3, #4294967295
 800d66e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800d670:	69bb      	ldr	r3, [r7, #24]
    }
 800d672:	4618      	mov	r0, r3
 800d674:	3720      	adds	r7, #32
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}

0800d67a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800d67a:	b580      	push	{r7, lr}
 800d67c:	b088      	sub	sp, #32
 800d67e:	af00      	add	r7, sp, #0
 800d680:	60f8      	str	r0, [r7, #12]
 800d682:	60b9      	str	r1, [r7, #8]
 800d684:	607a      	str	r2, [r7, #4]
 800d686:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d68a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	009b      	lsls	r3, r3, #2
 800d690:	461a      	mov	r2, r3
 800d692:	21a5      	movs	r1, #165	; 0xa5
 800d694:	f001 fc58 	bl	800ef48 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d69a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d6a2:	3b01      	subs	r3, #1
 800d6a4:	009b      	lsls	r3, r3, #2
 800d6a6:	4413      	add	r3, r2
 800d6a8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d6aa:	69bb      	ldr	r3, [r7, #24]
 800d6ac:	f023 0307 	bic.w	r3, r3, #7
 800d6b0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d6b2:	69bb      	ldr	r3, [r7, #24]
 800d6b4:	f003 0307 	and.w	r3, r3, #7
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d00a      	beq.n	800d6d2 <prvInitialiseNewTask+0x58>
        __asm volatile
 800d6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c0:	f383 8811 	msr	BASEPRI, r3
 800d6c4:	f3bf 8f6f 	isb	sy
 800d6c8:	f3bf 8f4f 	dsb	sy
 800d6cc:	617b      	str	r3, [r7, #20]
    }
 800d6ce:	bf00      	nop
 800d6d0:	e7fe      	b.n	800d6d0 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d01f      	beq.n	800d718 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d6d8:	2300      	movs	r3, #0
 800d6da:	61fb      	str	r3, [r7, #28]
 800d6dc:	e012      	b.n	800d704 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d6de:	68ba      	ldr	r2, [r7, #8]
 800d6e0:	69fb      	ldr	r3, [r7, #28]
 800d6e2:	4413      	add	r3, r2
 800d6e4:	7819      	ldrb	r1, [r3, #0]
 800d6e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6e8:	69fb      	ldr	r3, [r7, #28]
 800d6ea:	4413      	add	r3, r2
 800d6ec:	3334      	adds	r3, #52	; 0x34
 800d6ee:	460a      	mov	r2, r1
 800d6f0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800d6f2:	68ba      	ldr	r2, [r7, #8]
 800d6f4:	69fb      	ldr	r3, [r7, #28]
 800d6f6:	4413      	add	r3, r2
 800d6f8:	781b      	ldrb	r3, [r3, #0]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d006      	beq.n	800d70c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d6fe:	69fb      	ldr	r3, [r7, #28]
 800d700:	3301      	adds	r3, #1
 800d702:	61fb      	str	r3, [r7, #28]
 800d704:	69fb      	ldr	r3, [r7, #28]
 800d706:	2b09      	cmp	r3, #9
 800d708:	d9e9      	bls.n	800d6de <prvInitialiseNewTask+0x64>
 800d70a:	e000      	b.n	800d70e <prvInitialiseNewTask+0x94>
            {
                break;
 800d70c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d710:	2200      	movs	r2, #0
 800d712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800d716:	e003      	b.n	800d720 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d71a:	2200      	movs	r2, #0
 800d71c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d722:	2b04      	cmp	r3, #4
 800d724:	d901      	bls.n	800d72a <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d726:	2304      	movs	r3, #4
 800d728:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800d72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d72c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d72e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800d730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d732:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d734:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800d736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d738:	2200      	movs	r2, #0
 800d73a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d73e:	3304      	adds	r3, #4
 800d740:	4618      	mov	r0, r3
 800d742:	f7ff faca 	bl	800ccda <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d748:	3318      	adds	r3, #24
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7ff fac5 	bl	800ccda <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d752:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d754:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d758:	f1c3 0205 	rsb	r2, r3, #5
 800d75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d75e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d762:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d764:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800d766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d768:	3350      	adds	r3, #80	; 0x50
 800d76a:	2204      	movs	r2, #4
 800d76c:	2100      	movs	r1, #0
 800d76e:	4618      	mov	r0, r3
 800d770:	f001 fbea 	bl	800ef48 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800d774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d776:	3354      	adds	r3, #84	; 0x54
 800d778:	2201      	movs	r2, #1
 800d77a:	2100      	movs	r1, #0
 800d77c:	4618      	mov	r0, r3
 800d77e:	f001 fbe3 	bl	800ef48 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d782:	683a      	ldr	r2, [r7, #0]
 800d784:	68f9      	ldr	r1, [r7, #12]
 800d786:	69b8      	ldr	r0, [r7, #24]
 800d788:	f000 ff86 	bl	800e698 <pxPortInitialiseStack>
 800d78c:	4602      	mov	r2, r0
 800d78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d790:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800d792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d794:	2b00      	cmp	r3, #0
 800d796:	d002      	beq.n	800d79e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d79a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d79c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800d79e:	bf00      	nop
 800d7a0:	3720      	adds	r7, #32
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}
	...

0800d7a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b082      	sub	sp, #8
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800d7b0:	f001 f8a2 	bl	800e8f8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800d7b4:	4b2c      	ldr	r3, [pc, #176]	; (800d868 <prvAddNewTaskToReadyList+0xc0>)
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	3301      	adds	r3, #1
 800d7ba:	4a2b      	ldr	r2, [pc, #172]	; (800d868 <prvAddNewTaskToReadyList+0xc0>)
 800d7bc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800d7be:	4b2b      	ldr	r3, [pc, #172]	; (800d86c <prvAddNewTaskToReadyList+0xc4>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d109      	bne.n	800d7da <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800d7c6:	4a29      	ldr	r2, [pc, #164]	; (800d86c <prvAddNewTaskToReadyList+0xc4>)
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d7cc:	4b26      	ldr	r3, [pc, #152]	; (800d868 <prvAddNewTaskToReadyList+0xc0>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	2b01      	cmp	r3, #1
 800d7d2:	d110      	bne.n	800d7f6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800d7d4:	f000 fb86 	bl	800dee4 <prvInitialiseTaskLists>
 800d7d8:	e00d      	b.n	800d7f6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800d7da:	4b25      	ldr	r3, [pc, #148]	; (800d870 <prvAddNewTaskToReadyList+0xc8>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d109      	bne.n	800d7f6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d7e2:	4b22      	ldr	r3, [pc, #136]	; (800d86c <prvAddNewTaskToReadyList+0xc4>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ec:	429a      	cmp	r2, r3
 800d7ee:	d802      	bhi.n	800d7f6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800d7f0:	4a1e      	ldr	r2, [pc, #120]	; (800d86c <prvAddNewTaskToReadyList+0xc4>)
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800d7f6:	4b1f      	ldr	r3, [pc, #124]	; (800d874 <prvAddNewTaskToReadyList+0xcc>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	3301      	adds	r3, #1
 800d7fc:	4a1d      	ldr	r2, [pc, #116]	; (800d874 <prvAddNewTaskToReadyList+0xcc>)
 800d7fe:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d800:	4b1c      	ldr	r3, [pc, #112]	; (800d874 <prvAddNewTaskToReadyList+0xcc>)
 800d802:	681a      	ldr	r2, [r3, #0]
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d80c:	2201      	movs	r2, #1
 800d80e:	409a      	lsls	r2, r3
 800d810:	4b19      	ldr	r3, [pc, #100]	; (800d878 <prvAddNewTaskToReadyList+0xd0>)
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	4313      	orrs	r3, r2
 800d816:	4a18      	ldr	r2, [pc, #96]	; (800d878 <prvAddNewTaskToReadyList+0xd0>)
 800d818:	6013      	str	r3, [r2, #0]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d81e:	4613      	mov	r3, r2
 800d820:	009b      	lsls	r3, r3, #2
 800d822:	4413      	add	r3, r2
 800d824:	009b      	lsls	r3, r3, #2
 800d826:	4a15      	ldr	r2, [pc, #84]	; (800d87c <prvAddNewTaskToReadyList+0xd4>)
 800d828:	441a      	add	r2, r3
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	3304      	adds	r3, #4
 800d82e:	4619      	mov	r1, r3
 800d830:	4610      	mov	r0, r2
 800d832:	f7ff fa5f 	bl	800ccf4 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800d836:	f001 f88f 	bl	800e958 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800d83a:	4b0d      	ldr	r3, [pc, #52]	; (800d870 <prvAddNewTaskToReadyList+0xc8>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d00e      	beq.n	800d860 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d842:	4b0a      	ldr	r3, [pc, #40]	; (800d86c <prvAddNewTaskToReadyList+0xc4>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d207      	bcs.n	800d860 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800d850:	4b0b      	ldr	r3, [pc, #44]	; (800d880 <prvAddNewTaskToReadyList+0xd8>)
 800d852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d856:	601a      	str	r2, [r3, #0]
 800d858:	f3bf 8f4f 	dsb	sy
 800d85c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800d860:	bf00      	nop
 800d862:	3708      	adds	r7, #8
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}
 800d868:	20000d0c 	.word	0x20000d0c
 800d86c:	20000c34 	.word	0x20000c34
 800d870:	20000d18 	.word	0x20000d18
 800d874:	20000d28 	.word	0x20000d28
 800d878:	20000d14 	.word	0x20000d14
 800d87c:	20000c38 	.word	0x20000c38
 800d880:	e000ed04 	.word	0xe000ed04

0800d884 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b086      	sub	sp, #24
 800d888:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800d88a:	4b1d      	ldr	r3, [pc, #116]	; (800d900 <vTaskStartScheduler+0x7c>)
 800d88c:	9301      	str	r3, [sp, #4]
 800d88e:	2300      	movs	r3, #0
 800d890:	9300      	str	r3, [sp, #0]
 800d892:	2300      	movs	r3, #0
 800d894:	2282      	movs	r2, #130	; 0x82
 800d896:	491b      	ldr	r1, [pc, #108]	; (800d904 <vTaskStartScheduler+0x80>)
 800d898:	481b      	ldr	r0, [pc, #108]	; (800d908 <vTaskStartScheduler+0x84>)
 800d89a:	f7ff fead 	bl	800d5f8 <xTaskCreate>
 800d89e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	2b01      	cmp	r3, #1
 800d8a4:	d116      	bne.n	800d8d4 <vTaskStartScheduler+0x50>
        __asm volatile
 800d8a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8aa:	f383 8811 	msr	BASEPRI, r3
 800d8ae:	f3bf 8f6f 	isb	sy
 800d8b2:	f3bf 8f4f 	dsb	sy
 800d8b6:	60bb      	str	r3, [r7, #8]
    }
 800d8b8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800d8ba:	4b14      	ldr	r3, [pc, #80]	; (800d90c <vTaskStartScheduler+0x88>)
 800d8bc:	f04f 32ff 	mov.w	r2, #4294967295
 800d8c0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800d8c2:	4b13      	ldr	r3, [pc, #76]	; (800d910 <vTaskStartScheduler+0x8c>)
 800d8c4:	2201      	movs	r2, #1
 800d8c6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d8c8:	4b12      	ldr	r3, [pc, #72]	; (800d914 <vTaskStartScheduler+0x90>)
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800d8ce:	f000 ff71 	bl	800e7b4 <xPortStartScheduler>
 800d8d2:	e00e      	b.n	800d8f2 <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8da:	d10a      	bne.n	800d8f2 <vTaskStartScheduler+0x6e>
        __asm volatile
 800d8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e0:	f383 8811 	msr	BASEPRI, r3
 800d8e4:	f3bf 8f6f 	isb	sy
 800d8e8:	f3bf 8f4f 	dsb	sy
 800d8ec:	607b      	str	r3, [r7, #4]
    }
 800d8ee:	bf00      	nop
 800d8f0:	e7fe      	b.n	800d8f0 <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800d8f2:	4b09      	ldr	r3, [pc, #36]	; (800d918 <vTaskStartScheduler+0x94>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
}
 800d8f6:	bf00      	nop
 800d8f8:	3710      	adds	r7, #16
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}
 800d8fe:	bf00      	nop
 800d900:	20000d30 	.word	0x20000d30
 800d904:	0801188c 	.word	0x0801188c
 800d908:	0800deb5 	.word	0x0800deb5
 800d90c:	20000d2c 	.word	0x20000d2c
 800d910:	20000d18 	.word	0x20000d18
 800d914:	20000d10 	.word	0x20000d10
 800d918:	2000005c 	.word	0x2000005c

0800d91c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d91c:	b480      	push	{r7}
 800d91e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800d920:	4b04      	ldr	r3, [pc, #16]	; (800d934 <vTaskSuspendAll+0x18>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	3301      	adds	r3, #1
 800d926:	4a03      	ldr	r2, [pc, #12]	; (800d934 <vTaskSuspendAll+0x18>)
 800d928:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800d92a:	bf00      	nop
 800d92c:	46bd      	mov	sp, r7
 800d92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d932:	4770      	bx	lr
 800d934:	20000d34 	.word	0x20000d34

0800d938 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b084      	sub	sp, #16
 800d93c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800d93e:	2300      	movs	r3, #0
 800d940:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800d942:	2300      	movs	r3, #0
 800d944:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800d946:	4b41      	ldr	r3, [pc, #260]	; (800da4c <xTaskResumeAll+0x114>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d10a      	bne.n	800d964 <xTaskResumeAll+0x2c>
        __asm volatile
 800d94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d952:	f383 8811 	msr	BASEPRI, r3
 800d956:	f3bf 8f6f 	isb	sy
 800d95a:	f3bf 8f4f 	dsb	sy
 800d95e:	603b      	str	r3, [r7, #0]
    }
 800d960:	bf00      	nop
 800d962:	e7fe      	b.n	800d962 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800d964:	f000 ffc8 	bl	800e8f8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800d968:	4b38      	ldr	r3, [pc, #224]	; (800da4c <xTaskResumeAll+0x114>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	3b01      	subs	r3, #1
 800d96e:	4a37      	ldr	r2, [pc, #220]	; (800da4c <xTaskResumeAll+0x114>)
 800d970:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d972:	4b36      	ldr	r3, [pc, #216]	; (800da4c <xTaskResumeAll+0x114>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d161      	bne.n	800da3e <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d97a:	4b35      	ldr	r3, [pc, #212]	; (800da50 <xTaskResumeAll+0x118>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d05d      	beq.n	800da3e <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d982:	e02e      	b.n	800d9e2 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d984:	4b33      	ldr	r3, [pc, #204]	; (800da54 <xTaskResumeAll+0x11c>)
 800d986:	68db      	ldr	r3, [r3, #12]
 800d988:	68db      	ldr	r3, [r3, #12]
 800d98a:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	3318      	adds	r3, #24
 800d990:	4618      	mov	r0, r3
 800d992:	f7ff fa0c 	bl	800cdae <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	3304      	adds	r3, #4
 800d99a:	4618      	mov	r0, r3
 800d99c:	f7ff fa07 	bl	800cdae <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9a4:	2201      	movs	r2, #1
 800d9a6:	409a      	lsls	r2, r3
 800d9a8:	4b2b      	ldr	r3, [pc, #172]	; (800da58 <xTaskResumeAll+0x120>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	4313      	orrs	r3, r2
 800d9ae:	4a2a      	ldr	r2, [pc, #168]	; (800da58 <xTaskResumeAll+0x120>)
 800d9b0:	6013      	str	r3, [r2, #0]
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9b6:	4613      	mov	r3, r2
 800d9b8:	009b      	lsls	r3, r3, #2
 800d9ba:	4413      	add	r3, r2
 800d9bc:	009b      	lsls	r3, r3, #2
 800d9be:	4a27      	ldr	r2, [pc, #156]	; (800da5c <xTaskResumeAll+0x124>)
 800d9c0:	441a      	add	r2, r3
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	3304      	adds	r3, #4
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	4610      	mov	r0, r2
 800d9ca:	f7ff f993 	bl	800ccf4 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9d2:	4b23      	ldr	r3, [pc, #140]	; (800da60 <xTaskResumeAll+0x128>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d302      	bcc.n	800d9e2 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 800d9dc:	4b21      	ldr	r3, [pc, #132]	; (800da64 <xTaskResumeAll+0x12c>)
 800d9de:	2201      	movs	r2, #1
 800d9e0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d9e2:	4b1c      	ldr	r3, [pc, #112]	; (800da54 <xTaskResumeAll+0x11c>)
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d1cc      	bne.n	800d984 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d001      	beq.n	800d9f4 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800d9f0:	f000 faf6 	bl	800dfe0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d9f4:	4b1c      	ldr	r3, [pc, #112]	; (800da68 <xTaskResumeAll+0x130>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d010      	beq.n	800da22 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800da00:	f000 f836 	bl	800da70 <xTaskIncrementTick>
 800da04:	4603      	mov	r3, r0
 800da06:	2b00      	cmp	r3, #0
 800da08:	d002      	beq.n	800da10 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 800da0a:	4b16      	ldr	r3, [pc, #88]	; (800da64 <xTaskResumeAll+0x12c>)
 800da0c:	2201      	movs	r2, #1
 800da0e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	3b01      	subs	r3, #1
 800da14:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d1f1      	bne.n	800da00 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 800da1c:	4b12      	ldr	r3, [pc, #72]	; (800da68 <xTaskResumeAll+0x130>)
 800da1e:	2200      	movs	r2, #0
 800da20:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800da22:	4b10      	ldr	r3, [pc, #64]	; (800da64 <xTaskResumeAll+0x12c>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d009      	beq.n	800da3e <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800da2a:	2301      	movs	r3, #1
 800da2c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800da2e:	4b0f      	ldr	r3, [pc, #60]	; (800da6c <xTaskResumeAll+0x134>)
 800da30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da34:	601a      	str	r2, [r3, #0]
 800da36:	f3bf 8f4f 	dsb	sy
 800da3a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800da3e:	f000 ff8b 	bl	800e958 <vPortExitCritical>

    return xAlreadyYielded;
 800da42:	68bb      	ldr	r3, [r7, #8]
}
 800da44:	4618      	mov	r0, r3
 800da46:	3710      	adds	r7, #16
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}
 800da4c:	20000d34 	.word	0x20000d34
 800da50:	20000d0c 	.word	0x20000d0c
 800da54:	20000ccc 	.word	0x20000ccc
 800da58:	20000d14 	.word	0x20000d14
 800da5c:	20000c38 	.word	0x20000c38
 800da60:	20000c34 	.word	0x20000c34
 800da64:	20000d20 	.word	0x20000d20
 800da68:	20000d1c 	.word	0x20000d1c
 800da6c:	e000ed04 	.word	0xe000ed04

0800da70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b086      	sub	sp, #24
 800da74:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800da76:	2300      	movs	r3, #0
 800da78:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da7a:	4b4e      	ldr	r3, [pc, #312]	; (800dbb4 <xTaskIncrementTick+0x144>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	f040 808e 	bne.w	800dba0 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800da84:	4b4c      	ldr	r3, [pc, #304]	; (800dbb8 <xTaskIncrementTick+0x148>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	3301      	adds	r3, #1
 800da8a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800da8c:	4a4a      	ldr	r2, [pc, #296]	; (800dbb8 <xTaskIncrementTick+0x148>)
 800da8e:	693b      	ldr	r3, [r7, #16]
 800da90:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800da92:	693b      	ldr	r3, [r7, #16]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d120      	bne.n	800dada <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800da98:	4b48      	ldr	r3, [pc, #288]	; (800dbbc <xTaskIncrementTick+0x14c>)
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d00a      	beq.n	800dab8 <xTaskIncrementTick+0x48>
        __asm volatile
 800daa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daa6:	f383 8811 	msr	BASEPRI, r3
 800daaa:	f3bf 8f6f 	isb	sy
 800daae:	f3bf 8f4f 	dsb	sy
 800dab2:	603b      	str	r3, [r7, #0]
    }
 800dab4:	bf00      	nop
 800dab6:	e7fe      	b.n	800dab6 <xTaskIncrementTick+0x46>
 800dab8:	4b40      	ldr	r3, [pc, #256]	; (800dbbc <xTaskIncrementTick+0x14c>)
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	60fb      	str	r3, [r7, #12]
 800dabe:	4b40      	ldr	r3, [pc, #256]	; (800dbc0 <xTaskIncrementTick+0x150>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	4a3e      	ldr	r2, [pc, #248]	; (800dbbc <xTaskIncrementTick+0x14c>)
 800dac4:	6013      	str	r3, [r2, #0]
 800dac6:	4a3e      	ldr	r2, [pc, #248]	; (800dbc0 <xTaskIncrementTick+0x150>)
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	6013      	str	r3, [r2, #0]
 800dacc:	4b3d      	ldr	r3, [pc, #244]	; (800dbc4 <xTaskIncrementTick+0x154>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	3301      	adds	r3, #1
 800dad2:	4a3c      	ldr	r2, [pc, #240]	; (800dbc4 <xTaskIncrementTick+0x154>)
 800dad4:	6013      	str	r3, [r2, #0]
 800dad6:	f000 fa83 	bl	800dfe0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800dada:	4b3b      	ldr	r3, [pc, #236]	; (800dbc8 <xTaskIncrementTick+0x158>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	693a      	ldr	r2, [r7, #16]
 800dae0:	429a      	cmp	r2, r3
 800dae2:	d348      	bcc.n	800db76 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dae4:	4b35      	ldr	r3, [pc, #212]	; (800dbbc <xTaskIncrementTick+0x14c>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d104      	bne.n	800daf8 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800daee:	4b36      	ldr	r3, [pc, #216]	; (800dbc8 <xTaskIncrementTick+0x158>)
 800daf0:	f04f 32ff 	mov.w	r2, #4294967295
 800daf4:	601a      	str	r2, [r3, #0]
                    break;
 800daf6:	e03e      	b.n	800db76 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800daf8:	4b30      	ldr	r3, [pc, #192]	; (800dbbc <xTaskIncrementTick+0x14c>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	68db      	ldr	r3, [r3, #12]
 800dafe:	68db      	ldr	r3, [r3, #12]
 800db00:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	685b      	ldr	r3, [r3, #4]
 800db06:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800db08:	693a      	ldr	r2, [r7, #16]
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	429a      	cmp	r2, r3
 800db0e:	d203      	bcs.n	800db18 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800db10:	4a2d      	ldr	r2, [pc, #180]	; (800dbc8 <xTaskIncrementTick+0x158>)
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800db16:	e02e      	b.n	800db76 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	3304      	adds	r3, #4
 800db1c:	4618      	mov	r0, r3
 800db1e:	f7ff f946 	bl	800cdae <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db26:	2b00      	cmp	r3, #0
 800db28:	d004      	beq.n	800db34 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800db2a:	68bb      	ldr	r3, [r7, #8]
 800db2c:	3318      	adds	r3, #24
 800db2e:	4618      	mov	r0, r3
 800db30:	f7ff f93d 	bl	800cdae <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db38:	2201      	movs	r2, #1
 800db3a:	409a      	lsls	r2, r3
 800db3c:	4b23      	ldr	r3, [pc, #140]	; (800dbcc <xTaskIncrementTick+0x15c>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	4313      	orrs	r3, r2
 800db42:	4a22      	ldr	r2, [pc, #136]	; (800dbcc <xTaskIncrementTick+0x15c>)
 800db44:	6013      	str	r3, [r2, #0]
 800db46:	68bb      	ldr	r3, [r7, #8]
 800db48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db4a:	4613      	mov	r3, r2
 800db4c:	009b      	lsls	r3, r3, #2
 800db4e:	4413      	add	r3, r2
 800db50:	009b      	lsls	r3, r3, #2
 800db52:	4a1f      	ldr	r2, [pc, #124]	; (800dbd0 <xTaskIncrementTick+0x160>)
 800db54:	441a      	add	r2, r3
 800db56:	68bb      	ldr	r3, [r7, #8]
 800db58:	3304      	adds	r3, #4
 800db5a:	4619      	mov	r1, r3
 800db5c:	4610      	mov	r0, r2
 800db5e:	f7ff f8c9 	bl	800ccf4 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db66:	4b1b      	ldr	r3, [pc, #108]	; (800dbd4 <xTaskIncrementTick+0x164>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db6c:	429a      	cmp	r2, r3
 800db6e:	d3b9      	bcc.n	800dae4 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800db70:	2301      	movs	r3, #1
 800db72:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db74:	e7b6      	b.n	800dae4 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800db76:	4b17      	ldr	r3, [pc, #92]	; (800dbd4 <xTaskIncrementTick+0x164>)
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db7c:	4914      	ldr	r1, [pc, #80]	; (800dbd0 <xTaskIncrementTick+0x160>)
 800db7e:	4613      	mov	r3, r2
 800db80:	009b      	lsls	r3, r3, #2
 800db82:	4413      	add	r3, r2
 800db84:	009b      	lsls	r3, r3, #2
 800db86:	440b      	add	r3, r1
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	2b01      	cmp	r3, #1
 800db8c:	d901      	bls.n	800db92 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 800db8e:	2301      	movs	r3, #1
 800db90:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800db92:	4b11      	ldr	r3, [pc, #68]	; (800dbd8 <xTaskIncrementTick+0x168>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d007      	beq.n	800dbaa <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 800db9a:	2301      	movs	r3, #1
 800db9c:	617b      	str	r3, [r7, #20]
 800db9e:	e004      	b.n	800dbaa <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800dba0:	4b0e      	ldr	r3, [pc, #56]	; (800dbdc <xTaskIncrementTick+0x16c>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	3301      	adds	r3, #1
 800dba6:	4a0d      	ldr	r2, [pc, #52]	; (800dbdc <xTaskIncrementTick+0x16c>)
 800dba8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800dbaa:	697b      	ldr	r3, [r7, #20]
}
 800dbac:	4618      	mov	r0, r3
 800dbae:	3718      	adds	r7, #24
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}
 800dbb4:	20000d34 	.word	0x20000d34
 800dbb8:	20000d10 	.word	0x20000d10
 800dbbc:	20000cc4 	.word	0x20000cc4
 800dbc0:	20000cc8 	.word	0x20000cc8
 800dbc4:	20000d24 	.word	0x20000d24
 800dbc8:	20000d2c 	.word	0x20000d2c
 800dbcc:	20000d14 	.word	0x20000d14
 800dbd0:	20000c38 	.word	0x20000c38
 800dbd4:	20000c34 	.word	0x20000c34
 800dbd8:	20000d20 	.word	0x20000d20
 800dbdc:	20000d1c 	.word	0x20000d1c

0800dbe0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dbe0:	b480      	push	{r7}
 800dbe2:	b087      	sub	sp, #28
 800dbe4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dbe6:	4b27      	ldr	r3, [pc, #156]	; (800dc84 <vTaskSwitchContext+0xa4>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d003      	beq.n	800dbf6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800dbee:	4b26      	ldr	r3, [pc, #152]	; (800dc88 <vTaskSwitchContext+0xa8>)
 800dbf0:	2201      	movs	r2, #1
 800dbf2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800dbf4:	e03f      	b.n	800dc76 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800dbf6:	4b24      	ldr	r3, [pc, #144]	; (800dc88 <vTaskSwitchContext+0xa8>)
 800dbf8:	2200      	movs	r2, #0
 800dbfa:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbfc:	4b23      	ldr	r3, [pc, #140]	; (800dc8c <vTaskSwitchContext+0xac>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	fab3 f383 	clz	r3, r3
 800dc08:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800dc0a:	7afb      	ldrb	r3, [r7, #11]
 800dc0c:	f1c3 031f 	rsb	r3, r3, #31
 800dc10:	617b      	str	r3, [r7, #20]
 800dc12:	491f      	ldr	r1, [pc, #124]	; (800dc90 <vTaskSwitchContext+0xb0>)
 800dc14:	697a      	ldr	r2, [r7, #20]
 800dc16:	4613      	mov	r3, r2
 800dc18:	009b      	lsls	r3, r3, #2
 800dc1a:	4413      	add	r3, r2
 800dc1c:	009b      	lsls	r3, r3, #2
 800dc1e:	440b      	add	r3, r1
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d10a      	bne.n	800dc3c <vTaskSwitchContext+0x5c>
        __asm volatile
 800dc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc2a:	f383 8811 	msr	BASEPRI, r3
 800dc2e:	f3bf 8f6f 	isb	sy
 800dc32:	f3bf 8f4f 	dsb	sy
 800dc36:	607b      	str	r3, [r7, #4]
    }
 800dc38:	bf00      	nop
 800dc3a:	e7fe      	b.n	800dc3a <vTaskSwitchContext+0x5a>
 800dc3c:	697a      	ldr	r2, [r7, #20]
 800dc3e:	4613      	mov	r3, r2
 800dc40:	009b      	lsls	r3, r3, #2
 800dc42:	4413      	add	r3, r2
 800dc44:	009b      	lsls	r3, r3, #2
 800dc46:	4a12      	ldr	r2, [pc, #72]	; (800dc90 <vTaskSwitchContext+0xb0>)
 800dc48:	4413      	add	r3, r2
 800dc4a:	613b      	str	r3, [r7, #16]
 800dc4c:	693b      	ldr	r3, [r7, #16]
 800dc4e:	685b      	ldr	r3, [r3, #4]
 800dc50:	685a      	ldr	r2, [r3, #4]
 800dc52:	693b      	ldr	r3, [r7, #16]
 800dc54:	605a      	str	r2, [r3, #4]
 800dc56:	693b      	ldr	r3, [r7, #16]
 800dc58:	685a      	ldr	r2, [r3, #4]
 800dc5a:	693b      	ldr	r3, [r7, #16]
 800dc5c:	3308      	adds	r3, #8
 800dc5e:	429a      	cmp	r2, r3
 800dc60:	d104      	bne.n	800dc6c <vTaskSwitchContext+0x8c>
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	685b      	ldr	r3, [r3, #4]
 800dc66:	685a      	ldr	r2, [r3, #4]
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	605a      	str	r2, [r3, #4]
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	685b      	ldr	r3, [r3, #4]
 800dc70:	68db      	ldr	r3, [r3, #12]
 800dc72:	4a08      	ldr	r2, [pc, #32]	; (800dc94 <vTaskSwitchContext+0xb4>)
 800dc74:	6013      	str	r3, [r2, #0]
}
 800dc76:	bf00      	nop
 800dc78:	371c      	adds	r7, #28
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc80:	4770      	bx	lr
 800dc82:	bf00      	nop
 800dc84:	20000d34 	.word	0x20000d34
 800dc88:	20000d20 	.word	0x20000d20
 800dc8c:	20000d14 	.word	0x20000d14
 800dc90:	20000c38 	.word	0x20000c38
 800dc94:	20000c34 	.word	0x20000c34

0800dc98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b084      	sub	sp, #16
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
 800dca0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d10a      	bne.n	800dcbe <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800dca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcac:	f383 8811 	msr	BASEPRI, r3
 800dcb0:	f3bf 8f6f 	isb	sy
 800dcb4:	f3bf 8f4f 	dsb	sy
 800dcb8:	60fb      	str	r3, [r7, #12]
    }
 800dcba:	bf00      	nop
 800dcbc:	e7fe      	b.n	800dcbc <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dcbe:	4b07      	ldr	r3, [pc, #28]	; (800dcdc <vTaskPlaceOnEventList+0x44>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	3318      	adds	r3, #24
 800dcc4:	4619      	mov	r1, r3
 800dcc6:	6878      	ldr	r0, [r7, #4]
 800dcc8:	f7ff f838 	bl	800cd3c <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dccc:	2101      	movs	r1, #1
 800dcce:	6838      	ldr	r0, [r7, #0]
 800dcd0:	f000 fc7c 	bl	800e5cc <prvAddCurrentTaskToDelayedList>
}
 800dcd4:	bf00      	nop
 800dcd6:	3710      	adds	r7, #16
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}
 800dcdc:	20000c34 	.word	0x20000c34

0800dce0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b086      	sub	sp, #24
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	68db      	ldr	r3, [r3, #12]
 800dcec:	68db      	ldr	r3, [r3, #12]
 800dcee:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800dcf0:	693b      	ldr	r3, [r7, #16]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d10a      	bne.n	800dd0c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800dcf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcfa:	f383 8811 	msr	BASEPRI, r3
 800dcfe:	f3bf 8f6f 	isb	sy
 800dd02:	f3bf 8f4f 	dsb	sy
 800dd06:	60fb      	str	r3, [r7, #12]
    }
 800dd08:	bf00      	nop
 800dd0a:	e7fe      	b.n	800dd0a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dd0c:	693b      	ldr	r3, [r7, #16]
 800dd0e:	3318      	adds	r3, #24
 800dd10:	4618      	mov	r0, r3
 800dd12:	f7ff f84c 	bl	800cdae <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd16:	4b1d      	ldr	r3, [pc, #116]	; (800dd8c <xTaskRemoveFromEventList+0xac>)
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d11c      	bne.n	800dd58 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	3304      	adds	r3, #4
 800dd22:	4618      	mov	r0, r3
 800dd24:	f7ff f843 	bl	800cdae <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800dd28:	693b      	ldr	r3, [r7, #16]
 800dd2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd2c:	2201      	movs	r2, #1
 800dd2e:	409a      	lsls	r2, r3
 800dd30:	4b17      	ldr	r3, [pc, #92]	; (800dd90 <xTaskRemoveFromEventList+0xb0>)
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	4313      	orrs	r3, r2
 800dd36:	4a16      	ldr	r2, [pc, #88]	; (800dd90 <xTaskRemoveFromEventList+0xb0>)
 800dd38:	6013      	str	r3, [r2, #0]
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd3e:	4613      	mov	r3, r2
 800dd40:	009b      	lsls	r3, r3, #2
 800dd42:	4413      	add	r3, r2
 800dd44:	009b      	lsls	r3, r3, #2
 800dd46:	4a13      	ldr	r2, [pc, #76]	; (800dd94 <xTaskRemoveFromEventList+0xb4>)
 800dd48:	441a      	add	r2, r3
 800dd4a:	693b      	ldr	r3, [r7, #16]
 800dd4c:	3304      	adds	r3, #4
 800dd4e:	4619      	mov	r1, r3
 800dd50:	4610      	mov	r0, r2
 800dd52:	f7fe ffcf 	bl	800ccf4 <vListInsertEnd>
 800dd56:	e005      	b.n	800dd64 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	3318      	adds	r3, #24
 800dd5c:	4619      	mov	r1, r3
 800dd5e:	480e      	ldr	r0, [pc, #56]	; (800dd98 <xTaskRemoveFromEventList+0xb8>)
 800dd60:	f7fe ffc8 	bl	800ccf4 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dd64:	693b      	ldr	r3, [r7, #16]
 800dd66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd68:	4b0c      	ldr	r3, [pc, #48]	; (800dd9c <xTaskRemoveFromEventList+0xbc>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd6e:	429a      	cmp	r2, r3
 800dd70:	d905      	bls.n	800dd7e <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800dd72:	2301      	movs	r3, #1
 800dd74:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800dd76:	4b0a      	ldr	r3, [pc, #40]	; (800dda0 <xTaskRemoveFromEventList+0xc0>)
 800dd78:	2201      	movs	r2, #1
 800dd7a:	601a      	str	r2, [r3, #0]
 800dd7c:	e001      	b.n	800dd82 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800dd82:	697b      	ldr	r3, [r7, #20]
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	3718      	adds	r7, #24
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}
 800dd8c:	20000d34 	.word	0x20000d34
 800dd90:	20000d14 	.word	0x20000d14
 800dd94:	20000c38 	.word	0x20000c38
 800dd98:	20000ccc 	.word	0x20000ccc
 800dd9c:	20000c34 	.word	0x20000c34
 800dda0:	20000d20 	.word	0x20000d20

0800dda4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dda4:	b480      	push	{r7}
 800dda6:	b083      	sub	sp, #12
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ddac:	4b06      	ldr	r3, [pc, #24]	; (800ddc8 <vTaskInternalSetTimeOutState+0x24>)
 800ddae:	681a      	ldr	r2, [r3, #0]
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800ddb4:	4b05      	ldr	r3, [pc, #20]	; (800ddcc <vTaskInternalSetTimeOutState+0x28>)
 800ddb6:	681a      	ldr	r2, [r3, #0]
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	605a      	str	r2, [r3, #4]
}
 800ddbc:	bf00      	nop
 800ddbe:	370c      	adds	r7, #12
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc6:	4770      	bx	lr
 800ddc8:	20000d24 	.word	0x20000d24
 800ddcc:	20000d10 	.word	0x20000d10

0800ddd0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800ddd0:	b580      	push	{r7, lr}
 800ddd2:	b088      	sub	sp, #32
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
 800ddd8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d10a      	bne.n	800ddf6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800dde0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dde4:	f383 8811 	msr	BASEPRI, r3
 800dde8:	f3bf 8f6f 	isb	sy
 800ddec:	f3bf 8f4f 	dsb	sy
 800ddf0:	613b      	str	r3, [r7, #16]
    }
 800ddf2:	bf00      	nop
 800ddf4:	e7fe      	b.n	800ddf4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d10a      	bne.n	800de12 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800ddfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de00:	f383 8811 	msr	BASEPRI, r3
 800de04:	f3bf 8f6f 	isb	sy
 800de08:	f3bf 8f4f 	dsb	sy
 800de0c:	60fb      	str	r3, [r7, #12]
    }
 800de0e:	bf00      	nop
 800de10:	e7fe      	b.n	800de10 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800de12:	f000 fd71 	bl	800e8f8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800de16:	4b1f      	ldr	r3, [pc, #124]	; (800de94 <xTaskCheckForTimeOut+0xc4>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	685b      	ldr	r3, [r3, #4]
 800de20:	69ba      	ldr	r2, [r7, #24]
 800de22:	1ad3      	subs	r3, r2, r3
 800de24:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de2e:	d102      	bne.n	800de36 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800de30:	2300      	movs	r3, #0
 800de32:	61fb      	str	r3, [r7, #28]
 800de34:	e026      	b.n	800de84 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681a      	ldr	r2, [r3, #0]
 800de3a:	4b17      	ldr	r3, [pc, #92]	; (800de98 <xTaskCheckForTimeOut+0xc8>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	429a      	cmp	r2, r3
 800de40:	d00a      	beq.n	800de58 <xTaskCheckForTimeOut+0x88>
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	685b      	ldr	r3, [r3, #4]
 800de46:	69ba      	ldr	r2, [r7, #24]
 800de48:	429a      	cmp	r2, r3
 800de4a:	d305      	bcc.n	800de58 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800de4c:	2301      	movs	r3, #1
 800de4e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	2200      	movs	r2, #0
 800de54:	601a      	str	r2, [r3, #0]
 800de56:	e015      	b.n	800de84 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	697a      	ldr	r2, [r7, #20]
 800de5e:	429a      	cmp	r2, r3
 800de60:	d20b      	bcs.n	800de7a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	681a      	ldr	r2, [r3, #0]
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	1ad2      	subs	r2, r2, r3
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f7ff ff98 	bl	800dda4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800de74:	2300      	movs	r3, #0
 800de76:	61fb      	str	r3, [r7, #28]
 800de78:	e004      	b.n	800de84 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	2200      	movs	r2, #0
 800de7e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800de80:	2301      	movs	r3, #1
 800de82:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800de84:	f000 fd68 	bl	800e958 <vPortExitCritical>

    return xReturn;
 800de88:	69fb      	ldr	r3, [r7, #28]
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	3720      	adds	r7, #32
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}
 800de92:	bf00      	nop
 800de94:	20000d10 	.word	0x20000d10
 800de98:	20000d24 	.word	0x20000d24

0800de9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800de9c:	b480      	push	{r7}
 800de9e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800dea0:	4b03      	ldr	r3, [pc, #12]	; (800deb0 <vTaskMissedYield+0x14>)
 800dea2:	2201      	movs	r2, #1
 800dea4:	601a      	str	r2, [r3, #0]
}
 800dea6:	bf00      	nop
 800dea8:	46bd      	mov	sp, r7
 800deaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deae:	4770      	bx	lr
 800deb0:	20000d20 	.word	0x20000d20

0800deb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b082      	sub	sp, #8
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800debc:	f000 f852 	bl	800df64 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dec0:	4b06      	ldr	r3, [pc, #24]	; (800dedc <prvIdleTask+0x28>)
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	2b01      	cmp	r3, #1
 800dec6:	d9f9      	bls.n	800debc <prvIdleTask+0x8>
                {
                    taskYIELD();
 800dec8:	4b05      	ldr	r3, [pc, #20]	; (800dee0 <prvIdleTask+0x2c>)
 800deca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dece:	601a      	str	r2, [r3, #0]
 800ded0:	f3bf 8f4f 	dsb	sy
 800ded4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800ded8:	e7f0      	b.n	800debc <prvIdleTask+0x8>
 800deda:	bf00      	nop
 800dedc:	20000c38 	.word	0x20000c38
 800dee0:	e000ed04 	.word	0xe000ed04

0800dee4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b082      	sub	sp, #8
 800dee8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800deea:	2300      	movs	r3, #0
 800deec:	607b      	str	r3, [r7, #4]
 800deee:	e00c      	b.n	800df0a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800def0:	687a      	ldr	r2, [r7, #4]
 800def2:	4613      	mov	r3, r2
 800def4:	009b      	lsls	r3, r3, #2
 800def6:	4413      	add	r3, r2
 800def8:	009b      	lsls	r3, r3, #2
 800defa:	4a12      	ldr	r2, [pc, #72]	; (800df44 <prvInitialiseTaskLists+0x60>)
 800defc:	4413      	add	r3, r2
 800defe:	4618      	mov	r0, r3
 800df00:	f7fe fecb 	bl	800cc9a <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	3301      	adds	r3, #1
 800df08:	607b      	str	r3, [r7, #4]
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2b04      	cmp	r3, #4
 800df0e:	d9ef      	bls.n	800def0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800df10:	480d      	ldr	r0, [pc, #52]	; (800df48 <prvInitialiseTaskLists+0x64>)
 800df12:	f7fe fec2 	bl	800cc9a <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800df16:	480d      	ldr	r0, [pc, #52]	; (800df4c <prvInitialiseTaskLists+0x68>)
 800df18:	f7fe febf 	bl	800cc9a <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800df1c:	480c      	ldr	r0, [pc, #48]	; (800df50 <prvInitialiseTaskLists+0x6c>)
 800df1e:	f7fe febc 	bl	800cc9a <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800df22:	480c      	ldr	r0, [pc, #48]	; (800df54 <prvInitialiseTaskLists+0x70>)
 800df24:	f7fe feb9 	bl	800cc9a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800df28:	480b      	ldr	r0, [pc, #44]	; (800df58 <prvInitialiseTaskLists+0x74>)
 800df2a:	f7fe feb6 	bl	800cc9a <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800df2e:	4b0b      	ldr	r3, [pc, #44]	; (800df5c <prvInitialiseTaskLists+0x78>)
 800df30:	4a05      	ldr	r2, [pc, #20]	; (800df48 <prvInitialiseTaskLists+0x64>)
 800df32:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800df34:	4b0a      	ldr	r3, [pc, #40]	; (800df60 <prvInitialiseTaskLists+0x7c>)
 800df36:	4a05      	ldr	r2, [pc, #20]	; (800df4c <prvInitialiseTaskLists+0x68>)
 800df38:	601a      	str	r2, [r3, #0]
}
 800df3a:	bf00      	nop
 800df3c:	3708      	adds	r7, #8
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}
 800df42:	bf00      	nop
 800df44:	20000c38 	.word	0x20000c38
 800df48:	20000c9c 	.word	0x20000c9c
 800df4c:	20000cb0 	.word	0x20000cb0
 800df50:	20000ccc 	.word	0x20000ccc
 800df54:	20000ce0 	.word	0x20000ce0
 800df58:	20000cf8 	.word	0x20000cf8
 800df5c:	20000cc4 	.word	0x20000cc4
 800df60:	20000cc8 	.word	0x20000cc8

0800df64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b082      	sub	sp, #8
 800df68:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800df6a:	e019      	b.n	800dfa0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800df6c:	f000 fcc4 	bl	800e8f8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df70:	4b10      	ldr	r3, [pc, #64]	; (800dfb4 <prvCheckTasksWaitingTermination+0x50>)
 800df72:	68db      	ldr	r3, [r3, #12]
 800df74:	68db      	ldr	r3, [r3, #12]
 800df76:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	3304      	adds	r3, #4
 800df7c:	4618      	mov	r0, r3
 800df7e:	f7fe ff16 	bl	800cdae <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800df82:	4b0d      	ldr	r3, [pc, #52]	; (800dfb8 <prvCheckTasksWaitingTermination+0x54>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	3b01      	subs	r3, #1
 800df88:	4a0b      	ldr	r2, [pc, #44]	; (800dfb8 <prvCheckTasksWaitingTermination+0x54>)
 800df8a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800df8c:	4b0b      	ldr	r3, [pc, #44]	; (800dfbc <prvCheckTasksWaitingTermination+0x58>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	3b01      	subs	r3, #1
 800df92:	4a0a      	ldr	r2, [pc, #40]	; (800dfbc <prvCheckTasksWaitingTermination+0x58>)
 800df94:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800df96:	f000 fcdf 	bl	800e958 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f000 f810 	bl	800dfc0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dfa0:	4b06      	ldr	r3, [pc, #24]	; (800dfbc <prvCheckTasksWaitingTermination+0x58>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d1e1      	bne.n	800df6c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800dfa8:	bf00      	nop
 800dfaa:	bf00      	nop
 800dfac:	3708      	adds	r7, #8
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	bd80      	pop	{r7, pc}
 800dfb2:	bf00      	nop
 800dfb4:	20000ce0 	.word	0x20000ce0
 800dfb8:	20000d0c 	.word	0x20000d0c
 800dfbc:	20000cf4 	.word	0x20000cf4

0800dfc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b082      	sub	sp, #8
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f000 fe55 	bl	800ec7c <vPortFree>
                vPortFree( pxTCB );
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f000 fe52 	bl	800ec7c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800dfd8:	bf00      	nop
 800dfda:	3708      	adds	r7, #8
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}

0800dfe0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dfe4:	4b0a      	ldr	r3, [pc, #40]	; (800e010 <prvResetNextTaskUnblockTime+0x30>)
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d104      	bne.n	800dff8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800dfee:	4b09      	ldr	r3, [pc, #36]	; (800e014 <prvResetNextTaskUnblockTime+0x34>)
 800dff0:	f04f 32ff 	mov.w	r2, #4294967295
 800dff4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800dff6:	e005      	b.n	800e004 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800dff8:	4b05      	ldr	r3, [pc, #20]	; (800e010 <prvResetNextTaskUnblockTime+0x30>)
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	68db      	ldr	r3, [r3, #12]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	4a04      	ldr	r2, [pc, #16]	; (800e014 <prvResetNextTaskUnblockTime+0x34>)
 800e002:	6013      	str	r3, [r2, #0]
}
 800e004:	bf00      	nop
 800e006:	46bd      	mov	sp, r7
 800e008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00c:	4770      	bx	lr
 800e00e:	bf00      	nop
 800e010:	20000cc4 	.word	0x20000cc4
 800e014:	20000d2c 	.word	0x20000d2c

0800e018 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800e018:	b580      	push	{r7, lr}
 800e01a:	b084      	sub	sp, #16
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 800e024:	2300      	movs	r3, #0
 800e026:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d05e      	beq.n	800e0ec <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e032:	4b31      	ldr	r3, [pc, #196]	; (800e0f8 <xTaskPriorityInherit+0xe0>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e038:	429a      	cmp	r2, r3
 800e03a:	d24e      	bcs.n	800e0da <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	699b      	ldr	r3, [r3, #24]
 800e040:	2b00      	cmp	r3, #0
 800e042:	db06      	blt.n	800e052 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e044:	4b2c      	ldr	r3, [pc, #176]	; (800e0f8 <xTaskPriorityInherit+0xe0>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e04a:	f1c3 0205 	rsb	r2, r3, #5
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	6959      	ldr	r1, [r3, #20]
 800e056:	68bb      	ldr	r3, [r7, #8]
 800e058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e05a:	4613      	mov	r3, r2
 800e05c:	009b      	lsls	r3, r3, #2
 800e05e:	4413      	add	r3, r2
 800e060:	009b      	lsls	r3, r3, #2
 800e062:	4a26      	ldr	r2, [pc, #152]	; (800e0fc <xTaskPriorityInherit+0xe4>)
 800e064:	4413      	add	r3, r2
 800e066:	4299      	cmp	r1, r3
 800e068:	d12f      	bne.n	800e0ca <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e06a:	68bb      	ldr	r3, [r7, #8]
 800e06c:	3304      	adds	r3, #4
 800e06e:	4618      	mov	r0, r3
 800e070:	f7fe fe9d 	bl	800cdae <uxListRemove>
 800e074:	4603      	mov	r3, r0
 800e076:	2b00      	cmp	r3, #0
 800e078:	d10a      	bne.n	800e090 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e07e:	2201      	movs	r2, #1
 800e080:	fa02 f303 	lsl.w	r3, r2, r3
 800e084:	43da      	mvns	r2, r3
 800e086:	4b1e      	ldr	r3, [pc, #120]	; (800e100 <xTaskPriorityInherit+0xe8>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	4013      	ands	r3, r2
 800e08c:	4a1c      	ldr	r2, [pc, #112]	; (800e100 <xTaskPriorityInherit+0xe8>)
 800e08e:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e090:	4b19      	ldr	r3, [pc, #100]	; (800e0f8 <xTaskPriorityInherit+0xe0>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e09e:	2201      	movs	r2, #1
 800e0a0:	409a      	lsls	r2, r3
 800e0a2:	4b17      	ldr	r3, [pc, #92]	; (800e100 <xTaskPriorityInherit+0xe8>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	4313      	orrs	r3, r2
 800e0a8:	4a15      	ldr	r2, [pc, #84]	; (800e100 <xTaskPriorityInherit+0xe8>)
 800e0aa:	6013      	str	r3, [r2, #0]
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0b0:	4613      	mov	r3, r2
 800e0b2:	009b      	lsls	r3, r3, #2
 800e0b4:	4413      	add	r3, r2
 800e0b6:	009b      	lsls	r3, r3, #2
 800e0b8:	4a10      	ldr	r2, [pc, #64]	; (800e0fc <xTaskPriorityInherit+0xe4>)
 800e0ba:	441a      	add	r2, r3
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	3304      	adds	r3, #4
 800e0c0:	4619      	mov	r1, r3
 800e0c2:	4610      	mov	r0, r2
 800e0c4:	f7fe fe16 	bl	800ccf4 <vListInsertEnd>
 800e0c8:	e004      	b.n	800e0d4 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e0ca:	4b0b      	ldr	r3, [pc, #44]	; (800e0f8 <xTaskPriorityInherit+0xe0>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0d0:	68bb      	ldr	r3, [r7, #8]
 800e0d2:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	60fb      	str	r3, [r7, #12]
 800e0d8:	e008      	b.n	800e0ec <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e0de:	4b06      	ldr	r3, [pc, #24]	; (800e0f8 <xTaskPriorityInherit+0xe0>)
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	d201      	bcs.n	800e0ec <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800e0e8:	2301      	movs	r3, #1
 800e0ea:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
    }
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3710      	adds	r7, #16
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
 800e0f6:	bf00      	nop
 800e0f8:	20000c34 	.word	0x20000c34
 800e0fc:	20000c38 	.word	0x20000c38
 800e100:	20000d14 	.word	0x20000d14

0800e104 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800e104:	b580      	push	{r7, lr}
 800e106:	b086      	sub	sp, #24
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800e110:	2300      	movs	r3, #0
 800e112:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d063      	beq.n	800e1e2 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800e11a:	4b34      	ldr	r3, [pc, #208]	; (800e1ec <xTaskPriorityDisinherit+0xe8>)
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	693a      	ldr	r2, [r7, #16]
 800e120:	429a      	cmp	r2, r3
 800e122:	d00a      	beq.n	800e13a <xTaskPriorityDisinherit+0x36>
        __asm volatile
 800e124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e128:	f383 8811 	msr	BASEPRI, r3
 800e12c:	f3bf 8f6f 	isb	sy
 800e130:	f3bf 8f4f 	dsb	sy
 800e134:	60fb      	str	r3, [r7, #12]
    }
 800e136:	bf00      	nop
 800e138:	e7fe      	b.n	800e138 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800e13a:	693b      	ldr	r3, [r7, #16]
 800e13c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d10a      	bne.n	800e158 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800e142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e146:	f383 8811 	msr	BASEPRI, r3
 800e14a:	f3bf 8f6f 	isb	sy
 800e14e:	f3bf 8f4f 	dsb	sy
 800e152:	60bb      	str	r3, [r7, #8]
    }
 800e154:	bf00      	nop
 800e156:	e7fe      	b.n	800e156 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 800e158:	693b      	ldr	r3, [r7, #16]
 800e15a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e15c:	1e5a      	subs	r2, r3, #1
 800e15e:	693b      	ldr	r3, [r7, #16]
 800e160:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e162:	693b      	ldr	r3, [r7, #16]
 800e164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e166:	693b      	ldr	r3, [r7, #16]
 800e168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e16a:	429a      	cmp	r2, r3
 800e16c:	d039      	beq.n	800e1e2 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e16e:	693b      	ldr	r3, [r7, #16]
 800e170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e172:	2b00      	cmp	r3, #0
 800e174:	d135      	bne.n	800e1e2 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	3304      	adds	r3, #4
 800e17a:	4618      	mov	r0, r3
 800e17c:	f7fe fe17 	bl	800cdae <uxListRemove>
 800e180:	4603      	mov	r3, r0
 800e182:	2b00      	cmp	r3, #0
 800e184:	d10a      	bne.n	800e19c <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e18a:	2201      	movs	r2, #1
 800e18c:	fa02 f303 	lsl.w	r3, r2, r3
 800e190:	43da      	mvns	r2, r3
 800e192:	4b17      	ldr	r3, [pc, #92]	; (800e1f0 <xTaskPriorityDisinherit+0xec>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	4013      	ands	r3, r2
 800e198:	4a15      	ldr	r2, [pc, #84]	; (800e1f0 <xTaskPriorityDisinherit+0xec>)
 800e19a:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e19c:	693b      	ldr	r3, [r7, #16]
 800e19e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e1a0:	693b      	ldr	r3, [r7, #16]
 800e1a2:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1a4:	693b      	ldr	r3, [r7, #16]
 800e1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1a8:	f1c3 0205 	rsb	r2, r3, #5
 800e1ac:	693b      	ldr	r3, [r7, #16]
 800e1ae:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800e1b0:	693b      	ldr	r3, [r7, #16]
 800e1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1b4:	2201      	movs	r2, #1
 800e1b6:	409a      	lsls	r2, r3
 800e1b8:	4b0d      	ldr	r3, [pc, #52]	; (800e1f0 <xTaskPriorityDisinherit+0xec>)
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	4313      	orrs	r3, r2
 800e1be:	4a0c      	ldr	r2, [pc, #48]	; (800e1f0 <xTaskPriorityDisinherit+0xec>)
 800e1c0:	6013      	str	r3, [r2, #0]
 800e1c2:	693b      	ldr	r3, [r7, #16]
 800e1c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1c6:	4613      	mov	r3, r2
 800e1c8:	009b      	lsls	r3, r3, #2
 800e1ca:	4413      	add	r3, r2
 800e1cc:	009b      	lsls	r3, r3, #2
 800e1ce:	4a09      	ldr	r2, [pc, #36]	; (800e1f4 <xTaskPriorityDisinherit+0xf0>)
 800e1d0:	441a      	add	r2, r3
 800e1d2:	693b      	ldr	r3, [r7, #16]
 800e1d4:	3304      	adds	r3, #4
 800e1d6:	4619      	mov	r1, r3
 800e1d8:	4610      	mov	r0, r2
 800e1da:	f7fe fd8b 	bl	800ccf4 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800e1de:	2301      	movs	r3, #1
 800e1e0:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800e1e2:	697b      	ldr	r3, [r7, #20]
    }
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3718      	adds	r7, #24
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}
 800e1ec:	20000c34 	.word	0x20000c34
 800e1f0:	20000d14 	.word	0x20000d14
 800e1f4:	20000c38 	.word	0x20000c38

0800e1f8 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b088      	sub	sp, #32
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
 800e200:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e206:	2301      	movs	r3, #1
 800e208:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d077      	beq.n	800e300 <vTaskPriorityDisinheritAfterTimeout+0x108>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800e210:	69bb      	ldr	r3, [r7, #24]
 800e212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e214:	2b00      	cmp	r3, #0
 800e216:	d10a      	bne.n	800e22e <vTaskPriorityDisinheritAfterTimeout+0x36>
        __asm volatile
 800e218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e21c:	f383 8811 	msr	BASEPRI, r3
 800e220:	f3bf 8f6f 	isb	sy
 800e224:	f3bf 8f4f 	dsb	sy
 800e228:	60fb      	str	r3, [r7, #12]
    }
 800e22a:	bf00      	nop
 800e22c:	e7fe      	b.n	800e22c <vTaskPriorityDisinheritAfterTimeout+0x34>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e22e:	69bb      	ldr	r3, [r7, #24]
 800e230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e232:	683a      	ldr	r2, [r7, #0]
 800e234:	429a      	cmp	r2, r3
 800e236:	d902      	bls.n	800e23e <vTaskPriorityDisinheritAfterTimeout+0x46>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	61fb      	str	r3, [r7, #28]
 800e23c:	e002      	b.n	800e244 <vTaskPriorityDisinheritAfterTimeout+0x4c>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800e23e:	69bb      	ldr	r3, [r7, #24]
 800e240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e242:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800e244:	69bb      	ldr	r3, [r7, #24]
 800e246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e248:	69fa      	ldr	r2, [r7, #28]
 800e24a:	429a      	cmp	r2, r3
 800e24c:	d058      	beq.n	800e300 <vTaskPriorityDisinheritAfterTimeout+0x108>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e24e:	69bb      	ldr	r3, [r7, #24]
 800e250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e252:	697a      	ldr	r2, [r7, #20]
 800e254:	429a      	cmp	r2, r3
 800e256:	d153      	bne.n	800e300 <vTaskPriorityDisinheritAfterTimeout+0x108>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800e258:	4b2b      	ldr	r3, [pc, #172]	; (800e308 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	69ba      	ldr	r2, [r7, #24]
 800e25e:	429a      	cmp	r2, r3
 800e260:	d10a      	bne.n	800e278 <vTaskPriorityDisinheritAfterTimeout+0x80>
        __asm volatile
 800e262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e266:	f383 8811 	msr	BASEPRI, r3
 800e26a:	f3bf 8f6f 	isb	sy
 800e26e:	f3bf 8f4f 	dsb	sy
 800e272:	60bb      	str	r3, [r7, #8]
    }
 800e274:	bf00      	nop
 800e276:	e7fe      	b.n	800e276 <vTaskPriorityDisinheritAfterTimeout+0x7e>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e278:	69bb      	ldr	r3, [r7, #24]
 800e27a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e27c:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800e27e:	69bb      	ldr	r3, [r7, #24]
 800e280:	69fa      	ldr	r2, [r7, #28]
 800e282:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e284:	69bb      	ldr	r3, [r7, #24]
 800e286:	699b      	ldr	r3, [r3, #24]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	db04      	blt.n	800e296 <vTaskPriorityDisinheritAfterTimeout+0x9e>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e28c:	69fb      	ldr	r3, [r7, #28]
 800e28e:	f1c3 0205 	rsb	r2, r3, #5
 800e292:	69bb      	ldr	r3, [r7, #24]
 800e294:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e296:	69bb      	ldr	r3, [r7, #24]
 800e298:	6959      	ldr	r1, [r3, #20]
 800e29a:	693a      	ldr	r2, [r7, #16]
 800e29c:	4613      	mov	r3, r2
 800e29e:	009b      	lsls	r3, r3, #2
 800e2a0:	4413      	add	r3, r2
 800e2a2:	009b      	lsls	r3, r3, #2
 800e2a4:	4a19      	ldr	r2, [pc, #100]	; (800e30c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800e2a6:	4413      	add	r3, r2
 800e2a8:	4299      	cmp	r1, r3
 800e2aa:	d129      	bne.n	800e300 <vTaskPriorityDisinheritAfterTimeout+0x108>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e2ac:	69bb      	ldr	r3, [r7, #24]
 800e2ae:	3304      	adds	r3, #4
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f7fe fd7c 	bl	800cdae <uxListRemove>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d10a      	bne.n	800e2d2 <vTaskPriorityDisinheritAfterTimeout+0xda>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800e2bc:	69bb      	ldr	r3, [r7, #24]
 800e2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2c0:	2201      	movs	r2, #1
 800e2c2:	fa02 f303 	lsl.w	r3, r2, r3
 800e2c6:	43da      	mvns	r2, r3
 800e2c8:	4b11      	ldr	r3, [pc, #68]	; (800e310 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	4013      	ands	r3, r2
 800e2ce:	4a10      	ldr	r2, [pc, #64]	; (800e310 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e2d0:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800e2d2:	69bb      	ldr	r3, [r7, #24]
 800e2d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2d6:	2201      	movs	r2, #1
 800e2d8:	409a      	lsls	r2, r3
 800e2da:	4b0d      	ldr	r3, [pc, #52]	; (800e310 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	4313      	orrs	r3, r2
 800e2e0:	4a0b      	ldr	r2, [pc, #44]	; (800e310 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800e2e2:	6013      	str	r3, [r2, #0]
 800e2e4:	69bb      	ldr	r3, [r7, #24]
 800e2e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2e8:	4613      	mov	r3, r2
 800e2ea:	009b      	lsls	r3, r3, #2
 800e2ec:	4413      	add	r3, r2
 800e2ee:	009b      	lsls	r3, r3, #2
 800e2f0:	4a06      	ldr	r2, [pc, #24]	; (800e30c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800e2f2:	441a      	add	r2, r3
 800e2f4:	69bb      	ldr	r3, [r7, #24]
 800e2f6:	3304      	adds	r3, #4
 800e2f8:	4619      	mov	r1, r3
 800e2fa:	4610      	mov	r0, r2
 800e2fc:	f7fe fcfa 	bl	800ccf4 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800e300:	bf00      	nop
 800e302:	3720      	adds	r7, #32
 800e304:	46bd      	mov	sp, r7
 800e306:	bd80      	pop	{r7, pc}
 800e308:	20000c34 	.word	0x20000c34
 800e30c:	20000c38 	.word	0x20000c38
 800e310:	20000d14 	.word	0x20000d14

0800e314 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800e314:	b480      	push	{r7}
 800e316:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800e318:	4b07      	ldr	r3, [pc, #28]	; (800e338 <pvTaskIncrementMutexHeldCount+0x24>)
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d004      	beq.n	800e32a <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800e320:	4b05      	ldr	r3, [pc, #20]	; (800e338 <pvTaskIncrementMutexHeldCount+0x24>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e326:	3201      	adds	r2, #1
 800e328:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 800e32a:	4b03      	ldr	r3, [pc, #12]	; (800e338 <pvTaskIncrementMutexHeldCount+0x24>)
 800e32c:	681b      	ldr	r3, [r3, #0]
    }
 800e32e:	4618      	mov	r0, r3
 800e330:	46bd      	mov	sp, r7
 800e332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e336:	4770      	bx	lr
 800e338:	20000c34 	.word	0x20000c34

0800e33c <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b086      	sub	sp, #24
 800e340:	af00      	add	r7, sp, #0
 800e342:	60f8      	str	r0, [r7, #12]
 800e344:	60b9      	str	r1, [r7, #8]
 800e346:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d00a      	beq.n	800e364 <ulTaskGenericNotifyTake+0x28>
        __asm volatile
 800e34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e352:	f383 8811 	msr	BASEPRI, r3
 800e356:	f3bf 8f6f 	isb	sy
 800e35a:	f3bf 8f4f 	dsb	sy
 800e35e:	613b      	str	r3, [r7, #16]
    }
 800e360:	bf00      	nop
 800e362:	e7fe      	b.n	800e362 <ulTaskGenericNotifyTake+0x26>

        taskENTER_CRITICAL();
 800e364:	f000 fac8 	bl	800e8f8 <vPortEnterCritical>
        {
            /* Only block if the notification count is not already non-zero. */
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 800e368:	4b26      	ldr	r3, [pc, #152]	; (800e404 <ulTaskGenericNotifyTake+0xc8>)
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	68fa      	ldr	r2, [r7, #12]
 800e36e:	3214      	adds	r2, #20
 800e370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d115      	bne.n	800e3a4 <ulTaskGenericNotifyTake+0x68>
            {
                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800e378:	4b22      	ldr	r3, [pc, #136]	; (800e404 <ulTaskGenericNotifyTake+0xc8>)
 800e37a:	681a      	ldr	r2, [r3, #0]
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	4413      	add	r3, r2
 800e380:	3354      	adds	r3, #84	; 0x54
 800e382:	2201      	movs	r2, #1
 800e384:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d00b      	beq.n	800e3a4 <ulTaskGenericNotifyTake+0x68>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e38c:	2101      	movs	r1, #1
 800e38e:	6878      	ldr	r0, [r7, #4]
 800e390:	f000 f91c 	bl	800e5cc <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800e394:	4b1c      	ldr	r3, [pc, #112]	; (800e408 <ulTaskGenericNotifyTake+0xcc>)
 800e396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e39a:	601a      	str	r2, [r3, #0]
 800e39c:	f3bf 8f4f 	dsb	sy
 800e3a0:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800e3a4:	f000 fad8 	bl	800e958 <vPortExitCritical>

        taskENTER_CRITICAL();
 800e3a8:	f000 faa6 	bl	800e8f8 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE(  );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800e3ac:	4b15      	ldr	r3, [pc, #84]	; (800e404 <ulTaskGenericNotifyTake+0xc8>)
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	68fa      	ldr	r2, [r7, #12]
 800e3b2:	3214      	adds	r2, #20
 800e3b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3b8:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0UL )
 800e3ba:	697b      	ldr	r3, [r7, #20]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d012      	beq.n	800e3e6 <ulTaskGenericNotifyTake+0xaa>
            {
                if( xClearCountOnExit != pdFALSE )
 800e3c0:	68bb      	ldr	r3, [r7, #8]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d007      	beq.n	800e3d6 <ulTaskGenericNotifyTake+0x9a>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 800e3c6:	4b0f      	ldr	r3, [pc, #60]	; (800e404 <ulTaskGenericNotifyTake+0xc8>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	68fa      	ldr	r2, [r7, #12]
 800e3cc:	3214      	adds	r2, #20
 800e3ce:	2100      	movs	r1, #0
 800e3d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800e3d4:	e007      	b.n	800e3e6 <ulTaskGenericNotifyTake+0xaa>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 800e3d6:	4b0b      	ldr	r3, [pc, #44]	; (800e404 <ulTaskGenericNotifyTake+0xc8>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	697a      	ldr	r2, [r7, #20]
 800e3dc:	1e51      	subs	r1, r2, #1
 800e3de:	68fa      	ldr	r2, [r7, #12]
 800e3e0:	3214      	adds	r2, #20
 800e3e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800e3e6:	4b07      	ldr	r3, [pc, #28]	; (800e404 <ulTaskGenericNotifyTake+0xc8>)
 800e3e8:	681a      	ldr	r2, [r3, #0]
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	4413      	add	r3, r2
 800e3ee:	3354      	adds	r3, #84	; 0x54
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800e3f4:	f000 fab0 	bl	800e958 <vPortExitCritical>

        return ulReturn;
 800e3f8:	697b      	ldr	r3, [r7, #20]
    }
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	3718      	adds	r7, #24
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}
 800e402:	bf00      	nop
 800e404:	20000c34 	.word	0x20000c34
 800e408:	e000ed04 	.word	0xe000ed04

0800e40c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b08c      	sub	sp, #48	; 0x30
 800e410:	af00      	add	r7, sp, #0
 800e412:	60f8      	str	r0, [r7, #12]
 800e414:	60b9      	str	r1, [r7, #8]
 800e416:	607a      	str	r2, [r7, #4]
 800e418:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800e41a:	2301      	movs	r3, #1
 800e41c:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d00a      	beq.n	800e43a <xTaskGenericNotify+0x2e>
        __asm volatile
 800e424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e428:	f383 8811 	msr	BASEPRI, r3
 800e42c:	f3bf 8f6f 	isb	sy
 800e430:	f3bf 8f4f 	dsb	sy
 800e434:	623b      	str	r3, [r7, #32]
    }
 800e436:	bf00      	nop
 800e438:	e7fe      	b.n	800e438 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d10a      	bne.n	800e456 <xTaskGenericNotify+0x4a>
        __asm volatile
 800e440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e444:	f383 8811 	msr	BASEPRI, r3
 800e448:	f3bf 8f6f 	isb	sy
 800e44c:	f3bf 8f4f 	dsb	sy
 800e450:	61fb      	str	r3, [r7, #28]
    }
 800e452:	bf00      	nop
 800e454:	e7fe      	b.n	800e454 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 800e45a:	f000 fa4d 	bl	800e8f8 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800e45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e460:	2b00      	cmp	r3, #0
 800e462:	d006      	beq.n	800e472 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800e464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e466:	68ba      	ldr	r2, [r7, #8]
 800e468:	3214      	adds	r2, #20
 800e46a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e470:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800e472:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	4413      	add	r3, r2
 800e478:	3354      	adds	r3, #84	; 0x54
 800e47a:	781b      	ldrb	r3, [r3, #0]
 800e47c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800e480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e482:	68bb      	ldr	r3, [r7, #8]
 800e484:	4413      	add	r3, r2
 800e486:	3354      	adds	r3, #84	; 0x54
 800e488:	2202      	movs	r2, #2
 800e48a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800e48c:	78fb      	ldrb	r3, [r7, #3]
 800e48e:	2b04      	cmp	r3, #4
 800e490:	d83b      	bhi.n	800e50a <xTaskGenericNotify+0xfe>
 800e492:	a201      	add	r2, pc, #4	; (adr r2, 800e498 <xTaskGenericNotify+0x8c>)
 800e494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e498:	0800e529 	.word	0x0800e529
 800e49c:	0800e4ad 	.word	0x0800e4ad
 800e4a0:	0800e4c9 	.word	0x0800e4c9
 800e4a4:	0800e4e1 	.word	0x0800e4e1
 800e4a8:	0800e4ef 	.word	0x0800e4ef
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800e4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ae:	68ba      	ldr	r2, [r7, #8]
 800e4b0:	3214      	adds	r2, #20
 800e4b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	ea42 0103 	orr.w	r1, r2, r3
 800e4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4be:	68ba      	ldr	r2, [r7, #8]
 800e4c0:	3214      	adds	r2, #20
 800e4c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800e4c6:	e032      	b.n	800e52e <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800e4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ca:	68ba      	ldr	r2, [r7, #8]
 800e4cc:	3214      	adds	r2, #20
 800e4ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4d2:	1c59      	adds	r1, r3, #1
 800e4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4d6:	68ba      	ldr	r2, [r7, #8]
 800e4d8:	3214      	adds	r2, #20
 800e4da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800e4de:	e026      	b.n	800e52e <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800e4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e2:	68ba      	ldr	r2, [r7, #8]
 800e4e4:	3214      	adds	r2, #20
 800e4e6:	6879      	ldr	r1, [r7, #4]
 800e4e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800e4ec:	e01f      	b.n	800e52e <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800e4ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4f2:	2b02      	cmp	r3, #2
 800e4f4:	d006      	beq.n	800e504 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800e4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4f8:	68ba      	ldr	r2, [r7, #8]
 800e4fa:	3214      	adds	r2, #20
 800e4fc:	6879      	ldr	r1, [r7, #4]
 800e4fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800e502:	e014      	b.n	800e52e <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 800e504:	2300      	movs	r3, #0
 800e506:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 800e508:	e011      	b.n	800e52e <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800e50a:	4b2b      	ldr	r3, [pc, #172]	; (800e5b8 <xTaskGenericNotify+0x1ac>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d00c      	beq.n	800e52c <xTaskGenericNotify+0x120>
        __asm volatile
 800e512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e516:	f383 8811 	msr	BASEPRI, r3
 800e51a:	f3bf 8f6f 	isb	sy
 800e51e:	f3bf 8f4f 	dsb	sy
 800e522:	61bb      	str	r3, [r7, #24]
    }
 800e524:	bf00      	nop
 800e526:	e7fe      	b.n	800e526 <xTaskGenericNotify+0x11a>
                    break;
 800e528:	bf00      	nop
 800e52a:	e000      	b.n	800e52e <xTaskGenericNotify+0x122>

                    break;
 800e52c:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800e52e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e532:	2b01      	cmp	r3, #1
 800e534:	d139      	bne.n	800e5aa <xTaskGenericNotify+0x19e>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e538:	3304      	adds	r3, #4
 800e53a:	4618      	mov	r0, r3
 800e53c:	f7fe fc37 	bl	800cdae <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 800e540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e544:	2201      	movs	r2, #1
 800e546:	409a      	lsls	r2, r3
 800e548:	4b1c      	ldr	r3, [pc, #112]	; (800e5bc <xTaskGenericNotify+0x1b0>)
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	4313      	orrs	r3, r2
 800e54e:	4a1b      	ldr	r2, [pc, #108]	; (800e5bc <xTaskGenericNotify+0x1b0>)
 800e550:	6013      	str	r3, [r2, #0]
 800e552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e556:	4613      	mov	r3, r2
 800e558:	009b      	lsls	r3, r3, #2
 800e55a:	4413      	add	r3, r2
 800e55c:	009b      	lsls	r3, r3, #2
 800e55e:	4a18      	ldr	r2, [pc, #96]	; (800e5c0 <xTaskGenericNotify+0x1b4>)
 800e560:	441a      	add	r2, r3
 800e562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e564:	3304      	adds	r3, #4
 800e566:	4619      	mov	r1, r3
 800e568:	4610      	mov	r0, r2
 800e56a:	f7fe fbc3 	bl	800ccf4 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800e56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e572:	2b00      	cmp	r3, #0
 800e574:	d00a      	beq.n	800e58c <xTaskGenericNotify+0x180>
        __asm volatile
 800e576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e57a:	f383 8811 	msr	BASEPRI, r3
 800e57e:	f3bf 8f6f 	isb	sy
 800e582:	f3bf 8f4f 	dsb	sy
 800e586:	617b      	str	r3, [r7, #20]
    }
 800e588:	bf00      	nop
 800e58a:	e7fe      	b.n	800e58a <xTaskGenericNotify+0x17e>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e58e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e590:	4b0c      	ldr	r3, [pc, #48]	; (800e5c4 <xTaskGenericNotify+0x1b8>)
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e596:	429a      	cmp	r2, r3
 800e598:	d907      	bls.n	800e5aa <xTaskGenericNotify+0x19e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800e59a:	4b0b      	ldr	r3, [pc, #44]	; (800e5c8 <xTaskGenericNotify+0x1bc>)
 800e59c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5a0:	601a      	str	r2, [r3, #0]
 800e5a2:	f3bf 8f4f 	dsb	sy
 800e5a6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800e5aa:	f000 f9d5 	bl	800e958 <vPortExitCritical>

        return xReturn;
 800e5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3730      	adds	r7, #48	; 0x30
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}
 800e5b8:	20000d10 	.word	0x20000d10
 800e5bc:	20000d14 	.word	0x20000d14
 800e5c0:	20000c38 	.word	0x20000c38
 800e5c4:	20000c34 	.word	0x20000c34
 800e5c8:	e000ed04 	.word	0xe000ed04

0800e5cc <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b084      	sub	sp, #16
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
 800e5d4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800e5d6:	4b29      	ldr	r3, [pc, #164]	; (800e67c <prvAddCurrentTaskToDelayedList+0xb0>)
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e5dc:	4b28      	ldr	r3, [pc, #160]	; (800e680 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	3304      	adds	r3, #4
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	f7fe fbe3 	bl	800cdae <uxListRemove>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d10b      	bne.n	800e606 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e5ee:	4b24      	ldr	r3, [pc, #144]	; (800e680 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5f4:	2201      	movs	r2, #1
 800e5f6:	fa02 f303 	lsl.w	r3, r2, r3
 800e5fa:	43da      	mvns	r2, r3
 800e5fc:	4b21      	ldr	r3, [pc, #132]	; (800e684 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	4013      	ands	r3, r2
 800e602:	4a20      	ldr	r2, [pc, #128]	; (800e684 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e604:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e60c:	d10a      	bne.n	800e624 <prvAddCurrentTaskToDelayedList+0x58>
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d007      	beq.n	800e624 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e614:	4b1a      	ldr	r3, [pc, #104]	; (800e680 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	3304      	adds	r3, #4
 800e61a:	4619      	mov	r1, r3
 800e61c:	481a      	ldr	r0, [pc, #104]	; (800e688 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e61e:	f7fe fb69 	bl	800ccf4 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800e622:	e026      	b.n	800e672 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800e624:	68fa      	ldr	r2, [r7, #12]
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	4413      	add	r3, r2
 800e62a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e62c:	4b14      	ldr	r3, [pc, #80]	; (800e680 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	68ba      	ldr	r2, [r7, #8]
 800e632:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800e634:	68ba      	ldr	r2, [r7, #8]
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	429a      	cmp	r2, r3
 800e63a:	d209      	bcs.n	800e650 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e63c:	4b13      	ldr	r3, [pc, #76]	; (800e68c <prvAddCurrentTaskToDelayedList+0xc0>)
 800e63e:	681a      	ldr	r2, [r3, #0]
 800e640:	4b0f      	ldr	r3, [pc, #60]	; (800e680 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	3304      	adds	r3, #4
 800e646:	4619      	mov	r1, r3
 800e648:	4610      	mov	r0, r2
 800e64a:	f7fe fb77 	bl	800cd3c <vListInsert>
}
 800e64e:	e010      	b.n	800e672 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e650:	4b0f      	ldr	r3, [pc, #60]	; (800e690 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e652:	681a      	ldr	r2, [r3, #0]
 800e654:	4b0a      	ldr	r3, [pc, #40]	; (800e680 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	3304      	adds	r3, #4
 800e65a:	4619      	mov	r1, r3
 800e65c:	4610      	mov	r0, r2
 800e65e:	f7fe fb6d 	bl	800cd3c <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800e662:	4b0c      	ldr	r3, [pc, #48]	; (800e694 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	68ba      	ldr	r2, [r7, #8]
 800e668:	429a      	cmp	r2, r3
 800e66a:	d202      	bcs.n	800e672 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 800e66c:	4a09      	ldr	r2, [pc, #36]	; (800e694 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	6013      	str	r3, [r2, #0]
}
 800e672:	bf00      	nop
 800e674:	3710      	adds	r7, #16
 800e676:	46bd      	mov	sp, r7
 800e678:	bd80      	pop	{r7, pc}
 800e67a:	bf00      	nop
 800e67c:	20000d10 	.word	0x20000d10
 800e680:	20000c34 	.word	0x20000c34
 800e684:	20000d14 	.word	0x20000d14
 800e688:	20000cf8 	.word	0x20000cf8
 800e68c:	20000cc8 	.word	0x20000cc8
 800e690:	20000cc4 	.word	0x20000cc4
 800e694:	20000d2c 	.word	0x20000d2c

0800e698 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800e698:	b480      	push	{r7}
 800e69a:	b085      	sub	sp, #20
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	60f8      	str	r0, [r7, #12]
 800e6a0:	60b9      	str	r1, [r7, #8]
 800e6a2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	3b04      	subs	r3, #4
 800e6a8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e6b0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	3b04      	subs	r3, #4
 800e6b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800e6b8:	68bb      	ldr	r3, [r7, #8]
 800e6ba:	f023 0201 	bic.w	r2, r3, #1
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	3b04      	subs	r3, #4
 800e6c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800e6c8:	4a0c      	ldr	r2, [pc, #48]	; (800e6fc <pxPortInitialiseStack+0x64>)
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	3b14      	subs	r3, #20
 800e6d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800e6d4:	687a      	ldr	r2, [r7, #4]
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	3b04      	subs	r3, #4
 800e6de:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	f06f 0202 	mvn.w	r2, #2
 800e6e6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	3b20      	subs	r3, #32
 800e6ec:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
}
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	3714      	adds	r7, #20
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fa:	4770      	bx	lr
 800e6fc:	0800e701 	.word	0x0800e701

0800e700 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e700:	b480      	push	{r7}
 800e702:	b085      	sub	sp, #20
 800e704:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800e706:	2300      	movs	r3, #0
 800e708:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800e70a:	4b12      	ldr	r3, [pc, #72]	; (800e754 <prvTaskExitError+0x54>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e712:	d00a      	beq.n	800e72a <prvTaskExitError+0x2a>
        __asm volatile
 800e714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e718:	f383 8811 	msr	BASEPRI, r3
 800e71c:	f3bf 8f6f 	isb	sy
 800e720:	f3bf 8f4f 	dsb	sy
 800e724:	60fb      	str	r3, [r7, #12]
    }
 800e726:	bf00      	nop
 800e728:	e7fe      	b.n	800e728 <prvTaskExitError+0x28>
        __asm volatile
 800e72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e72e:	f383 8811 	msr	BASEPRI, r3
 800e732:	f3bf 8f6f 	isb	sy
 800e736:	f3bf 8f4f 	dsb	sy
 800e73a:	60bb      	str	r3, [r7, #8]
    }
 800e73c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800e73e:	bf00      	nop
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d0fc      	beq.n	800e740 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800e746:	bf00      	nop
 800e748:	bf00      	nop
 800e74a:	3714      	adds	r7, #20
 800e74c:	46bd      	mov	sp, r7
 800e74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e752:	4770      	bx	lr
 800e754:	20000060 	.word	0x20000060
	...

0800e760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800e760:	4b07      	ldr	r3, [pc, #28]	; (800e780 <pxCurrentTCBConst2>)
 800e762:	6819      	ldr	r1, [r3, #0]
 800e764:	6808      	ldr	r0, [r1, #0]
 800e766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e76a:	f380 8809 	msr	PSP, r0
 800e76e:	f3bf 8f6f 	isb	sy
 800e772:	f04f 0000 	mov.w	r0, #0
 800e776:	f380 8811 	msr	BASEPRI, r0
 800e77a:	4770      	bx	lr
 800e77c:	f3af 8000 	nop.w

0800e780 <pxCurrentTCBConst2>:
 800e780:	20000c34 	.word	0x20000c34
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 800e784:	bf00      	nop
 800e786:	bf00      	nop

0800e788 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800e788:	4808      	ldr	r0, [pc, #32]	; (800e7ac <prvPortStartFirstTask+0x24>)
 800e78a:	6800      	ldr	r0, [r0, #0]
 800e78c:	6800      	ldr	r0, [r0, #0]
 800e78e:	f380 8808 	msr	MSP, r0
 800e792:	f04f 0000 	mov.w	r0, #0
 800e796:	f380 8814 	msr	CONTROL, r0
 800e79a:	b662      	cpsie	i
 800e79c:	b661      	cpsie	f
 800e79e:	f3bf 8f4f 	dsb	sy
 800e7a2:	f3bf 8f6f 	isb	sy
 800e7a6:	df00      	svc	0
 800e7a8:	bf00      	nop
 800e7aa:	0000      	.short	0x0000
 800e7ac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 800e7b0:	bf00      	nop
 800e7b2:	bf00      	nop

0800e7b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b086      	sub	sp, #24
 800e7b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e7ba:	4b46      	ldr	r3, [pc, #280]	; (800e8d4 <xPortStartScheduler+0x120>)
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	4a46      	ldr	r2, [pc, #280]	; (800e8d8 <xPortStartScheduler+0x124>)
 800e7c0:	4293      	cmp	r3, r2
 800e7c2:	d10a      	bne.n	800e7da <xPortStartScheduler+0x26>
        __asm volatile
 800e7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7c8:	f383 8811 	msr	BASEPRI, r3
 800e7cc:	f3bf 8f6f 	isb	sy
 800e7d0:	f3bf 8f4f 	dsb	sy
 800e7d4:	613b      	str	r3, [r7, #16]
    }
 800e7d6:	bf00      	nop
 800e7d8:	e7fe      	b.n	800e7d8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e7da:	4b3e      	ldr	r3, [pc, #248]	; (800e8d4 <xPortStartScheduler+0x120>)
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	4a3f      	ldr	r2, [pc, #252]	; (800e8dc <xPortStartScheduler+0x128>)
 800e7e0:	4293      	cmp	r3, r2
 800e7e2:	d10a      	bne.n	800e7fa <xPortStartScheduler+0x46>
        __asm volatile
 800e7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7e8:	f383 8811 	msr	BASEPRI, r3
 800e7ec:	f3bf 8f6f 	isb	sy
 800e7f0:	f3bf 8f4f 	dsb	sy
 800e7f4:	60fb      	str	r3, [r7, #12]
    }
 800e7f6:	bf00      	nop
 800e7f8:	e7fe      	b.n	800e7f8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e7fa:	4b39      	ldr	r3, [pc, #228]	; (800e8e0 <xPortStartScheduler+0x12c>)
 800e7fc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e7fe:	697b      	ldr	r3, [r7, #20]
 800e800:	781b      	ldrb	r3, [r3, #0]
 800e802:	b2db      	uxtb	r3, r3
 800e804:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e806:	697b      	ldr	r3, [r7, #20]
 800e808:	22ff      	movs	r2, #255	; 0xff
 800e80a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e80c:	697b      	ldr	r3, [r7, #20]
 800e80e:	781b      	ldrb	r3, [r3, #0]
 800e810:	b2db      	uxtb	r3, r3
 800e812:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e814:	78fb      	ldrb	r3, [r7, #3]
 800e816:	b2db      	uxtb	r3, r3
 800e818:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e81c:	b2da      	uxtb	r2, r3
 800e81e:	4b31      	ldr	r3, [pc, #196]	; (800e8e4 <xPortStartScheduler+0x130>)
 800e820:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e822:	4b31      	ldr	r3, [pc, #196]	; (800e8e8 <xPortStartScheduler+0x134>)
 800e824:	2207      	movs	r2, #7
 800e826:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e828:	e009      	b.n	800e83e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800e82a:	4b2f      	ldr	r3, [pc, #188]	; (800e8e8 <xPortStartScheduler+0x134>)
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	3b01      	subs	r3, #1
 800e830:	4a2d      	ldr	r2, [pc, #180]	; (800e8e8 <xPortStartScheduler+0x134>)
 800e832:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e834:	78fb      	ldrb	r3, [r7, #3]
 800e836:	b2db      	uxtb	r3, r3
 800e838:	005b      	lsls	r3, r3, #1
 800e83a:	b2db      	uxtb	r3, r3
 800e83c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e83e:	78fb      	ldrb	r3, [r7, #3]
 800e840:	b2db      	uxtb	r3, r3
 800e842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e846:	2b80      	cmp	r3, #128	; 0x80
 800e848:	d0ef      	beq.n	800e82a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e84a:	4b27      	ldr	r3, [pc, #156]	; (800e8e8 <xPortStartScheduler+0x134>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	f1c3 0307 	rsb	r3, r3, #7
 800e852:	2b04      	cmp	r3, #4
 800e854:	d00a      	beq.n	800e86c <xPortStartScheduler+0xb8>
        __asm volatile
 800e856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e85a:	f383 8811 	msr	BASEPRI, r3
 800e85e:	f3bf 8f6f 	isb	sy
 800e862:	f3bf 8f4f 	dsb	sy
 800e866:	60bb      	str	r3, [r7, #8]
    }
 800e868:	bf00      	nop
 800e86a:	e7fe      	b.n	800e86a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e86c:	4b1e      	ldr	r3, [pc, #120]	; (800e8e8 <xPortStartScheduler+0x134>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	021b      	lsls	r3, r3, #8
 800e872:	4a1d      	ldr	r2, [pc, #116]	; (800e8e8 <xPortStartScheduler+0x134>)
 800e874:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e876:	4b1c      	ldr	r3, [pc, #112]	; (800e8e8 <xPortStartScheduler+0x134>)
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e87e:	4a1a      	ldr	r2, [pc, #104]	; (800e8e8 <xPortStartScheduler+0x134>)
 800e880:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	b2da      	uxtb	r2, r3
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800e88a:	4b18      	ldr	r3, [pc, #96]	; (800e8ec <xPortStartScheduler+0x138>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	4a17      	ldr	r2, [pc, #92]	; (800e8ec <xPortStartScheduler+0x138>)
 800e890:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e894:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800e896:	4b15      	ldr	r3, [pc, #84]	; (800e8ec <xPortStartScheduler+0x138>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	4a14      	ldr	r2, [pc, #80]	; (800e8ec <xPortStartScheduler+0x138>)
 800e89c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e8a0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800e8a2:	f000 f8db 	bl	800ea5c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800e8a6:	4b12      	ldr	r3, [pc, #72]	; (800e8f0 <xPortStartScheduler+0x13c>)
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800e8ac:	f000 f8fa 	bl	800eaa4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e8b0:	4b10      	ldr	r3, [pc, #64]	; (800e8f4 <xPortStartScheduler+0x140>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	4a0f      	ldr	r2, [pc, #60]	; (800e8f4 <xPortStartScheduler+0x140>)
 800e8b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e8ba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800e8bc:	f7ff ff64 	bl	800e788 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800e8c0:	f7ff f98e 	bl	800dbe0 <vTaskSwitchContext>
    prvTaskExitError();
 800e8c4:	f7ff ff1c 	bl	800e700 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800e8c8:	2300      	movs	r3, #0
}
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	3718      	adds	r7, #24
 800e8ce:	46bd      	mov	sp, r7
 800e8d0:	bd80      	pop	{r7, pc}
 800e8d2:	bf00      	nop
 800e8d4:	e000ed00 	.word	0xe000ed00
 800e8d8:	410fc271 	.word	0x410fc271
 800e8dc:	410fc270 	.word	0x410fc270
 800e8e0:	e000e400 	.word	0xe000e400
 800e8e4:	20000d38 	.word	0x20000d38
 800e8e8:	20000d3c 	.word	0x20000d3c
 800e8ec:	e000ed20 	.word	0xe000ed20
 800e8f0:	20000060 	.word	0x20000060
 800e8f4:	e000ef34 	.word	0xe000ef34

0800e8f8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e8f8:	b480      	push	{r7}
 800e8fa:	b083      	sub	sp, #12
 800e8fc:	af00      	add	r7, sp, #0
        __asm volatile
 800e8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e902:	f383 8811 	msr	BASEPRI, r3
 800e906:	f3bf 8f6f 	isb	sy
 800e90a:	f3bf 8f4f 	dsb	sy
 800e90e:	607b      	str	r3, [r7, #4]
    }
 800e910:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800e912:	4b0f      	ldr	r3, [pc, #60]	; (800e950 <vPortEnterCritical+0x58>)
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	3301      	adds	r3, #1
 800e918:	4a0d      	ldr	r2, [pc, #52]	; (800e950 <vPortEnterCritical+0x58>)
 800e91a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800e91c:	4b0c      	ldr	r3, [pc, #48]	; (800e950 <vPortEnterCritical+0x58>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	2b01      	cmp	r3, #1
 800e922:	d10f      	bne.n	800e944 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e924:	4b0b      	ldr	r3, [pc, #44]	; (800e954 <vPortEnterCritical+0x5c>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	b2db      	uxtb	r3, r3
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d00a      	beq.n	800e944 <vPortEnterCritical+0x4c>
        __asm volatile
 800e92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e932:	f383 8811 	msr	BASEPRI, r3
 800e936:	f3bf 8f6f 	isb	sy
 800e93a:	f3bf 8f4f 	dsb	sy
 800e93e:	603b      	str	r3, [r7, #0]
    }
 800e940:	bf00      	nop
 800e942:	e7fe      	b.n	800e942 <vPortEnterCritical+0x4a>
    }
}
 800e944:	bf00      	nop
 800e946:	370c      	adds	r7, #12
 800e948:	46bd      	mov	sp, r7
 800e94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94e:	4770      	bx	lr
 800e950:	20000060 	.word	0x20000060
 800e954:	e000ed04 	.word	0xe000ed04

0800e958 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e958:	b480      	push	{r7}
 800e95a:	b083      	sub	sp, #12
 800e95c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800e95e:	4b12      	ldr	r3, [pc, #72]	; (800e9a8 <vPortExitCritical+0x50>)
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d10a      	bne.n	800e97c <vPortExitCritical+0x24>
        __asm volatile
 800e966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e96a:	f383 8811 	msr	BASEPRI, r3
 800e96e:	f3bf 8f6f 	isb	sy
 800e972:	f3bf 8f4f 	dsb	sy
 800e976:	607b      	str	r3, [r7, #4]
    }
 800e978:	bf00      	nop
 800e97a:	e7fe      	b.n	800e97a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800e97c:	4b0a      	ldr	r3, [pc, #40]	; (800e9a8 <vPortExitCritical+0x50>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	3b01      	subs	r3, #1
 800e982:	4a09      	ldr	r2, [pc, #36]	; (800e9a8 <vPortExitCritical+0x50>)
 800e984:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800e986:	4b08      	ldr	r3, [pc, #32]	; (800e9a8 <vPortExitCritical+0x50>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d105      	bne.n	800e99a <vPortExitCritical+0x42>
 800e98e:	2300      	movs	r3, #0
 800e990:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800e998:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800e99a:	bf00      	nop
 800e99c:	370c      	adds	r7, #12
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a4:	4770      	bx	lr
 800e9a6:	bf00      	nop
 800e9a8:	20000060 	.word	0x20000060
 800e9ac:	00000000 	.word	0x00000000

0800e9b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800e9b0:	f3ef 8009 	mrs	r0, PSP
 800e9b4:	f3bf 8f6f 	isb	sy
 800e9b8:	4b15      	ldr	r3, [pc, #84]	; (800ea10 <pxCurrentTCBConst>)
 800e9ba:	681a      	ldr	r2, [r3, #0]
 800e9bc:	f01e 0f10 	tst.w	lr, #16
 800e9c0:	bf08      	it	eq
 800e9c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e9c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9ca:	6010      	str	r0, [r2, #0]
 800e9cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e9d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e9d4:	f380 8811 	msr	BASEPRI, r0
 800e9d8:	f3bf 8f4f 	dsb	sy
 800e9dc:	f3bf 8f6f 	isb	sy
 800e9e0:	f7ff f8fe 	bl	800dbe0 <vTaskSwitchContext>
 800e9e4:	f04f 0000 	mov.w	r0, #0
 800e9e8:	f380 8811 	msr	BASEPRI, r0
 800e9ec:	bc09      	pop	{r0, r3}
 800e9ee:	6819      	ldr	r1, [r3, #0]
 800e9f0:	6808      	ldr	r0, [r1, #0]
 800e9f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9f6:	f01e 0f10 	tst.w	lr, #16
 800e9fa:	bf08      	it	eq
 800e9fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ea00:	f380 8809 	msr	PSP, r0
 800ea04:	f3bf 8f6f 	isb	sy
 800ea08:	4770      	bx	lr
 800ea0a:	bf00      	nop
 800ea0c:	f3af 8000 	nop.w

0800ea10 <pxCurrentTCBConst>:
 800ea10:	20000c34 	.word	0x20000c34
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800ea14:	bf00      	nop
 800ea16:	bf00      	nop

0800ea18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b082      	sub	sp, #8
 800ea1c:	af00      	add	r7, sp, #0
        __asm volatile
 800ea1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea22:	f383 8811 	msr	BASEPRI, r3
 800ea26:	f3bf 8f6f 	isb	sy
 800ea2a:	f3bf 8f4f 	dsb	sy
 800ea2e:	607b      	str	r3, [r7, #4]
    }
 800ea30:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800ea32:	f7ff f81d 	bl	800da70 <xTaskIncrementTick>
 800ea36:	4603      	mov	r3, r0
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d003      	beq.n	800ea44 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ea3c:	4b06      	ldr	r3, [pc, #24]	; (800ea58 <SysTick_Handler+0x40>)
 800ea3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea42:	601a      	str	r2, [r3, #0]
 800ea44:	2300      	movs	r3, #0
 800ea46:	603b      	str	r3, [r7, #0]
        __asm volatile
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	f383 8811 	msr	BASEPRI, r3
    }
 800ea4e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 800ea50:	bf00      	nop
 800ea52:	3708      	adds	r7, #8
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd80      	pop	{r7, pc}
 800ea58:	e000ed04 	.word	0xe000ed04

0800ea5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800ea5c:	b480      	push	{r7}
 800ea5e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ea60:	4b0b      	ldr	r3, [pc, #44]	; (800ea90 <vPortSetupTimerInterrupt+0x34>)
 800ea62:	2200      	movs	r2, #0
 800ea64:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ea66:	4b0b      	ldr	r3, [pc, #44]	; (800ea94 <vPortSetupTimerInterrupt+0x38>)
 800ea68:	2200      	movs	r2, #0
 800ea6a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ea6c:	4b0a      	ldr	r3, [pc, #40]	; (800ea98 <vPortSetupTimerInterrupt+0x3c>)
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	4a0a      	ldr	r2, [pc, #40]	; (800ea9c <vPortSetupTimerInterrupt+0x40>)
 800ea72:	fba2 2303 	umull	r2, r3, r2, r3
 800ea76:	099b      	lsrs	r3, r3, #6
 800ea78:	4a09      	ldr	r2, [pc, #36]	; (800eaa0 <vPortSetupTimerInterrupt+0x44>)
 800ea7a:	3b01      	subs	r3, #1
 800ea7c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ea7e:	4b04      	ldr	r3, [pc, #16]	; (800ea90 <vPortSetupTimerInterrupt+0x34>)
 800ea80:	2207      	movs	r2, #7
 800ea82:	601a      	str	r2, [r3, #0]
}
 800ea84:	bf00      	nop
 800ea86:	46bd      	mov	sp, r7
 800ea88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8c:	4770      	bx	lr
 800ea8e:	bf00      	nop
 800ea90:	e000e010 	.word	0xe000e010
 800ea94:	e000e018 	.word	0xe000e018
 800ea98:	20000050 	.word	0x20000050
 800ea9c:	10624dd3 	.word	0x10624dd3
 800eaa0:	e000e014 	.word	0xe000e014

0800eaa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800eaa4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800eab4 <vPortEnableVFP+0x10>
 800eaa8:	6801      	ldr	r1, [r0, #0]
 800eaaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800eaae:	6001      	str	r1, [r0, #0]
 800eab0:	4770      	bx	lr
 800eab2:	0000      	.short	0x0000
 800eab4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800eab8:	bf00      	nop
 800eaba:	bf00      	nop

0800eabc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b08a      	sub	sp, #40	; 0x28
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800eac4:	2300      	movs	r3, #0
 800eac6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800eac8:	f7fe ff28 	bl	800d91c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800eacc:	4b65      	ldr	r3, [pc, #404]	; (800ec64 <pvPortMalloc+0x1a8>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d101      	bne.n	800ead8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800ead4:	f000 f934 	bl	800ed40 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ead8:	4b63      	ldr	r3, [pc, #396]	; (800ec68 <pvPortMalloc+0x1ac>)
 800eada:	681a      	ldr	r2, [r3, #0]
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	4013      	ands	r3, r2
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	f040 80a7 	bne.w	800ec34 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d02d      	beq.n	800eb48 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800eaec:	2208      	movs	r2, #8
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800eaf2:	687a      	ldr	r2, [r7, #4]
 800eaf4:	429a      	cmp	r2, r3
 800eaf6:	d227      	bcs.n	800eb48 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 800eaf8:	2208      	movs	r2, #8
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	4413      	add	r3, r2
 800eafe:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f003 0307 	and.w	r3, r3, #7
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d021      	beq.n	800eb4e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	f023 0307 	bic.w	r3, r3, #7
 800eb10:	3308      	adds	r3, #8
 800eb12:	687a      	ldr	r2, [r7, #4]
 800eb14:	429a      	cmp	r2, r3
 800eb16:	d214      	bcs.n	800eb42 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f023 0307 	bic.w	r3, r3, #7
 800eb1e:	3308      	adds	r3, #8
 800eb20:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	f003 0307 	and.w	r3, r3, #7
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d010      	beq.n	800eb4e <pvPortMalloc+0x92>
        __asm volatile
 800eb2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb30:	f383 8811 	msr	BASEPRI, r3
 800eb34:	f3bf 8f6f 	isb	sy
 800eb38:	f3bf 8f4f 	dsb	sy
 800eb3c:	617b      	str	r3, [r7, #20]
    }
 800eb3e:	bf00      	nop
 800eb40:	e7fe      	b.n	800eb40 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 800eb42:	2300      	movs	r3, #0
 800eb44:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800eb46:	e002      	b.n	800eb4e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800eb48:	2300      	movs	r3, #0
 800eb4a:	607b      	str	r3, [r7, #4]
 800eb4c:	e000      	b.n	800eb50 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800eb4e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d06e      	beq.n	800ec34 <pvPortMalloc+0x178>
 800eb56:	4b45      	ldr	r3, [pc, #276]	; (800ec6c <pvPortMalloc+0x1b0>)
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	687a      	ldr	r2, [r7, #4]
 800eb5c:	429a      	cmp	r2, r3
 800eb5e:	d869      	bhi.n	800ec34 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800eb60:	4b43      	ldr	r3, [pc, #268]	; (800ec70 <pvPortMalloc+0x1b4>)
 800eb62:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800eb64:	4b42      	ldr	r3, [pc, #264]	; (800ec70 <pvPortMalloc+0x1b4>)
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eb6a:	e004      	b.n	800eb76 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800eb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb6e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800eb70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb78:	685b      	ldr	r3, [r3, #4]
 800eb7a:	687a      	ldr	r2, [r7, #4]
 800eb7c:	429a      	cmp	r2, r3
 800eb7e:	d903      	bls.n	800eb88 <pvPortMalloc+0xcc>
 800eb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d1f1      	bne.n	800eb6c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800eb88:	4b36      	ldr	r3, [pc, #216]	; (800ec64 <pvPortMalloc+0x1a8>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb8e:	429a      	cmp	r2, r3
 800eb90:	d050      	beq.n	800ec34 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800eb92:	6a3b      	ldr	r3, [r7, #32]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	2208      	movs	r2, #8
 800eb98:	4413      	add	r3, r2
 800eb9a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800eb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb9e:	681a      	ldr	r2, [r3, #0]
 800eba0:	6a3b      	ldr	r3, [r7, #32]
 800eba2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800eba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eba6:	685a      	ldr	r2, [r3, #4]
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	1ad2      	subs	r2, r2, r3
 800ebac:	2308      	movs	r3, #8
 800ebae:	005b      	lsls	r3, r3, #1
 800ebb0:	429a      	cmp	r2, r3
 800ebb2:	d91f      	bls.n	800ebf4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ebb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	4413      	add	r3, r2
 800ebba:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ebbc:	69bb      	ldr	r3, [r7, #24]
 800ebbe:	f003 0307 	and.w	r3, r3, #7
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d00a      	beq.n	800ebdc <pvPortMalloc+0x120>
        __asm volatile
 800ebc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebca:	f383 8811 	msr	BASEPRI, r3
 800ebce:	f3bf 8f6f 	isb	sy
 800ebd2:	f3bf 8f4f 	dsb	sy
 800ebd6:	613b      	str	r3, [r7, #16]
    }
 800ebd8:	bf00      	nop
 800ebda:	e7fe      	b.n	800ebda <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ebdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebde:	685a      	ldr	r2, [r3, #4]
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	1ad2      	subs	r2, r2, r3
 800ebe4:	69bb      	ldr	r3, [r7, #24]
 800ebe6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800ebe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebea:	687a      	ldr	r2, [r7, #4]
 800ebec:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ebee:	69b8      	ldr	r0, [r7, #24]
 800ebf0:	f000 f908 	bl	800ee04 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ebf4:	4b1d      	ldr	r3, [pc, #116]	; (800ec6c <pvPortMalloc+0x1b0>)
 800ebf6:	681a      	ldr	r2, [r3, #0]
 800ebf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebfa:	685b      	ldr	r3, [r3, #4]
 800ebfc:	1ad3      	subs	r3, r2, r3
 800ebfe:	4a1b      	ldr	r2, [pc, #108]	; (800ec6c <pvPortMalloc+0x1b0>)
 800ec00:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ec02:	4b1a      	ldr	r3, [pc, #104]	; (800ec6c <pvPortMalloc+0x1b0>)
 800ec04:	681a      	ldr	r2, [r3, #0]
 800ec06:	4b1b      	ldr	r3, [pc, #108]	; (800ec74 <pvPortMalloc+0x1b8>)
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	429a      	cmp	r2, r3
 800ec0c:	d203      	bcs.n	800ec16 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ec0e:	4b17      	ldr	r3, [pc, #92]	; (800ec6c <pvPortMalloc+0x1b0>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	4a18      	ldr	r2, [pc, #96]	; (800ec74 <pvPortMalloc+0x1b8>)
 800ec14:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ec16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec18:	685a      	ldr	r2, [r3, #4]
 800ec1a:	4b13      	ldr	r3, [pc, #76]	; (800ec68 <pvPortMalloc+0x1ac>)
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	431a      	orrs	r2, r3
 800ec20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec22:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800ec24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec26:	2200      	movs	r2, #0
 800ec28:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800ec2a:	4b13      	ldr	r3, [pc, #76]	; (800ec78 <pvPortMalloc+0x1bc>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	3301      	adds	r3, #1
 800ec30:	4a11      	ldr	r2, [pc, #68]	; (800ec78 <pvPortMalloc+0x1bc>)
 800ec32:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800ec34:	f7fe fe80 	bl	800d938 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ec38:	69fb      	ldr	r3, [r7, #28]
 800ec3a:	f003 0307 	and.w	r3, r3, #7
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d00a      	beq.n	800ec58 <pvPortMalloc+0x19c>
        __asm volatile
 800ec42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec46:	f383 8811 	msr	BASEPRI, r3
 800ec4a:	f3bf 8f6f 	isb	sy
 800ec4e:	f3bf 8f4f 	dsb	sy
 800ec52:	60fb      	str	r3, [r7, #12]
    }
 800ec54:	bf00      	nop
 800ec56:	e7fe      	b.n	800ec56 <pvPortMalloc+0x19a>
    return pvReturn;
 800ec58:	69fb      	ldr	r3, [r7, #28]
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	3728      	adds	r7, #40	; 0x28
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}
 800ec62:	bf00      	nop
 800ec64:	20013948 	.word	0x20013948
 800ec68:	2001395c 	.word	0x2001395c
 800ec6c:	2001394c 	.word	0x2001394c
 800ec70:	20013940 	.word	0x20013940
 800ec74:	20013950 	.word	0x20013950
 800ec78:	20013954 	.word	0x20013954

0800ec7c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b086      	sub	sp, #24
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d04d      	beq.n	800ed2a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800ec8e:	2308      	movs	r3, #8
 800ec90:	425b      	negs	r3, r3
 800ec92:	697a      	ldr	r2, [r7, #20]
 800ec94:	4413      	add	r3, r2
 800ec96:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800ec98:	697b      	ldr	r3, [r7, #20]
 800ec9a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ec9c:	693b      	ldr	r3, [r7, #16]
 800ec9e:	685a      	ldr	r2, [r3, #4]
 800eca0:	4b24      	ldr	r3, [pc, #144]	; (800ed34 <vPortFree+0xb8>)
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	4013      	ands	r3, r2
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d10a      	bne.n	800ecc0 <vPortFree+0x44>
        __asm volatile
 800ecaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecae:	f383 8811 	msr	BASEPRI, r3
 800ecb2:	f3bf 8f6f 	isb	sy
 800ecb6:	f3bf 8f4f 	dsb	sy
 800ecba:	60fb      	str	r3, [r7, #12]
    }
 800ecbc:	bf00      	nop
 800ecbe:	e7fe      	b.n	800ecbe <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ecc0:	693b      	ldr	r3, [r7, #16]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d00a      	beq.n	800ecde <vPortFree+0x62>
        __asm volatile
 800ecc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eccc:	f383 8811 	msr	BASEPRI, r3
 800ecd0:	f3bf 8f6f 	isb	sy
 800ecd4:	f3bf 8f4f 	dsb	sy
 800ecd8:	60bb      	str	r3, [r7, #8]
    }
 800ecda:	bf00      	nop
 800ecdc:	e7fe      	b.n	800ecdc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ecde:	693b      	ldr	r3, [r7, #16]
 800ece0:	685a      	ldr	r2, [r3, #4]
 800ece2:	4b14      	ldr	r3, [pc, #80]	; (800ed34 <vPortFree+0xb8>)
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	4013      	ands	r3, r2
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d01e      	beq.n	800ed2a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800ecec:	693b      	ldr	r3, [r7, #16]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d11a      	bne.n	800ed2a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ecf4:	693b      	ldr	r3, [r7, #16]
 800ecf6:	685a      	ldr	r2, [r3, #4]
 800ecf8:	4b0e      	ldr	r3, [pc, #56]	; (800ed34 <vPortFree+0xb8>)
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	43db      	mvns	r3, r3
 800ecfe:	401a      	ands	r2, r3
 800ed00:	693b      	ldr	r3, [r7, #16]
 800ed02:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800ed04:	f7fe fe0a 	bl	800d91c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800ed08:	693b      	ldr	r3, [r7, #16]
 800ed0a:	685a      	ldr	r2, [r3, #4]
 800ed0c:	4b0a      	ldr	r3, [pc, #40]	; (800ed38 <vPortFree+0xbc>)
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	4413      	add	r3, r2
 800ed12:	4a09      	ldr	r2, [pc, #36]	; (800ed38 <vPortFree+0xbc>)
 800ed14:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ed16:	6938      	ldr	r0, [r7, #16]
 800ed18:	f000 f874 	bl	800ee04 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800ed1c:	4b07      	ldr	r3, [pc, #28]	; (800ed3c <vPortFree+0xc0>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	3301      	adds	r3, #1
 800ed22:	4a06      	ldr	r2, [pc, #24]	; (800ed3c <vPortFree+0xc0>)
 800ed24:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800ed26:	f7fe fe07 	bl	800d938 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800ed2a:	bf00      	nop
 800ed2c:	3718      	adds	r7, #24
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}
 800ed32:	bf00      	nop
 800ed34:	2001395c 	.word	0x2001395c
 800ed38:	2001394c 	.word	0x2001394c
 800ed3c:	20013958 	.word	0x20013958

0800ed40 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800ed40:	b480      	push	{r7}
 800ed42:	b085      	sub	sp, #20
 800ed44:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ed46:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800ed4a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800ed4c:	4b27      	ldr	r3, [pc, #156]	; (800edec <prvHeapInit+0xac>)
 800ed4e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	f003 0307 	and.w	r3, r3, #7
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d00c      	beq.n	800ed74 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	3307      	adds	r3, #7
 800ed5e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	f023 0307 	bic.w	r3, r3, #7
 800ed66:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ed68:	68ba      	ldr	r2, [r7, #8]
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	1ad3      	subs	r3, r2, r3
 800ed6e:	4a1f      	ldr	r2, [pc, #124]	; (800edec <prvHeapInit+0xac>)
 800ed70:	4413      	add	r3, r2
 800ed72:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ed78:	4a1d      	ldr	r2, [pc, #116]	; (800edf0 <prvHeapInit+0xb0>)
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800ed7e:	4b1c      	ldr	r3, [pc, #112]	; (800edf0 <prvHeapInit+0xb0>)
 800ed80:	2200      	movs	r2, #0
 800ed82:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	68ba      	ldr	r2, [r7, #8]
 800ed88:	4413      	add	r3, r2
 800ed8a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800ed8c:	2208      	movs	r2, #8
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	1a9b      	subs	r3, r3, r2
 800ed92:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	f023 0307 	bic.w	r3, r3, #7
 800ed9a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	4a15      	ldr	r2, [pc, #84]	; (800edf4 <prvHeapInit+0xb4>)
 800eda0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800eda2:	4b14      	ldr	r3, [pc, #80]	; (800edf4 <prvHeapInit+0xb4>)
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	2200      	movs	r2, #0
 800eda8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800edaa:	4b12      	ldr	r3, [pc, #72]	; (800edf4 <prvHeapInit+0xb4>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	2200      	movs	r2, #0
 800edb0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	68fa      	ldr	r2, [r7, #12]
 800edba:	1ad2      	subs	r2, r2, r3
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800edc0:	4b0c      	ldr	r3, [pc, #48]	; (800edf4 <prvHeapInit+0xb4>)
 800edc2:	681a      	ldr	r2, [r3, #0]
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	685b      	ldr	r3, [r3, #4]
 800edcc:	4a0a      	ldr	r2, [pc, #40]	; (800edf8 <prvHeapInit+0xb8>)
 800edce:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	685b      	ldr	r3, [r3, #4]
 800edd4:	4a09      	ldr	r2, [pc, #36]	; (800edfc <prvHeapInit+0xbc>)
 800edd6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800edd8:	4b09      	ldr	r3, [pc, #36]	; (800ee00 <prvHeapInit+0xc0>)
 800edda:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800edde:	601a      	str	r2, [r3, #0]
}
 800ede0:	bf00      	nop
 800ede2:	3714      	adds	r7, #20
 800ede4:	46bd      	mov	sp, r7
 800ede6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edea:	4770      	bx	lr
 800edec:	20000d40 	.word	0x20000d40
 800edf0:	20013940 	.word	0x20013940
 800edf4:	20013948 	.word	0x20013948
 800edf8:	20013950 	.word	0x20013950
 800edfc:	2001394c 	.word	0x2001394c
 800ee00:	2001395c 	.word	0x2001395c

0800ee04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800ee04:	b480      	push	{r7}
 800ee06:	b085      	sub	sp, #20
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ee0c:	4b28      	ldr	r3, [pc, #160]	; (800eeb0 <prvInsertBlockIntoFreeList+0xac>)
 800ee0e:	60fb      	str	r3, [r7, #12]
 800ee10:	e002      	b.n	800ee18 <prvInsertBlockIntoFreeList+0x14>
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	60fb      	str	r3, [r7, #12]
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	687a      	ldr	r2, [r7, #4]
 800ee1e:	429a      	cmp	r2, r3
 800ee20:	d8f7      	bhi.n	800ee12 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	685b      	ldr	r3, [r3, #4]
 800ee2a:	68ba      	ldr	r2, [r7, #8]
 800ee2c:	4413      	add	r3, r2
 800ee2e:	687a      	ldr	r2, [r7, #4]
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d108      	bne.n	800ee46 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	685a      	ldr	r2, [r3, #4]
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	685b      	ldr	r3, [r3, #4]
 800ee3c:	441a      	add	r2, r3
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	685b      	ldr	r3, [r3, #4]
 800ee4e:	68ba      	ldr	r2, [r7, #8]
 800ee50:	441a      	add	r2, r3
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	429a      	cmp	r2, r3
 800ee58:	d118      	bne.n	800ee8c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	681a      	ldr	r2, [r3, #0]
 800ee5e:	4b15      	ldr	r3, [pc, #84]	; (800eeb4 <prvInsertBlockIntoFreeList+0xb0>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	429a      	cmp	r2, r3
 800ee64:	d00d      	beq.n	800ee82 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	685a      	ldr	r2, [r3, #4]
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	685b      	ldr	r3, [r3, #4]
 800ee70:	441a      	add	r2, r3
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	681a      	ldr	r2, [r3, #0]
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	601a      	str	r2, [r3, #0]
 800ee80:	e008      	b.n	800ee94 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ee82:	4b0c      	ldr	r3, [pc, #48]	; (800eeb4 <prvInsertBlockIntoFreeList+0xb0>)
 800ee84:	681a      	ldr	r2, [r3, #0]
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	601a      	str	r2, [r3, #0]
 800ee8a:	e003      	b.n	800ee94 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	681a      	ldr	r2, [r3, #0]
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800ee94:	68fa      	ldr	r2, [r7, #12]
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	429a      	cmp	r2, r3
 800ee9a:	d002      	beq.n	800eea2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	687a      	ldr	r2, [r7, #4]
 800eea0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800eea2:	bf00      	nop
 800eea4:	3714      	adds	r7, #20
 800eea6:	46bd      	mov	sp, r7
 800eea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeac:	4770      	bx	lr
 800eeae:	bf00      	nop
 800eeb0:	20013940 	.word	0x20013940
 800eeb4:	20013948 	.word	0x20013948

0800eeb8 <__errno>:
 800eeb8:	4b01      	ldr	r3, [pc, #4]	; (800eec0 <__errno+0x8>)
 800eeba:	6818      	ldr	r0, [r3, #0]
 800eebc:	4770      	bx	lr
 800eebe:	bf00      	nop
 800eec0:	20000064 	.word	0x20000064

0800eec4 <__libc_init_array>:
 800eec4:	b570      	push	{r4, r5, r6, lr}
 800eec6:	4d0d      	ldr	r5, [pc, #52]	; (800eefc <__libc_init_array+0x38>)
 800eec8:	4c0d      	ldr	r4, [pc, #52]	; (800ef00 <__libc_init_array+0x3c>)
 800eeca:	1b64      	subs	r4, r4, r5
 800eecc:	10a4      	asrs	r4, r4, #2
 800eece:	2600      	movs	r6, #0
 800eed0:	42a6      	cmp	r6, r4
 800eed2:	d109      	bne.n	800eee8 <__libc_init_array+0x24>
 800eed4:	4d0b      	ldr	r5, [pc, #44]	; (800ef04 <__libc_init_array+0x40>)
 800eed6:	4c0c      	ldr	r4, [pc, #48]	; (800ef08 <__libc_init_array+0x44>)
 800eed8:	f002 f958 	bl	801118c <_init>
 800eedc:	1b64      	subs	r4, r4, r5
 800eede:	10a4      	asrs	r4, r4, #2
 800eee0:	2600      	movs	r6, #0
 800eee2:	42a6      	cmp	r6, r4
 800eee4:	d105      	bne.n	800eef2 <__libc_init_array+0x2e>
 800eee6:	bd70      	pop	{r4, r5, r6, pc}
 800eee8:	f855 3b04 	ldr.w	r3, [r5], #4
 800eeec:	4798      	blx	r3
 800eeee:	3601      	adds	r6, #1
 800eef0:	e7ee      	b.n	800eed0 <__libc_init_array+0xc>
 800eef2:	f855 3b04 	ldr.w	r3, [r5], #4
 800eef6:	4798      	blx	r3
 800eef8:	3601      	adds	r6, #1
 800eefa:	e7f2      	b.n	800eee2 <__libc_init_array+0x1e>
 800eefc:	08011a60 	.word	0x08011a60
 800ef00:	08011a60 	.word	0x08011a60
 800ef04:	08011a60 	.word	0x08011a60
 800ef08:	08011a64 	.word	0x08011a64

0800ef0c <malloc>:
 800ef0c:	4b02      	ldr	r3, [pc, #8]	; (800ef18 <malloc+0xc>)
 800ef0e:	4601      	mov	r1, r0
 800ef10:	6818      	ldr	r0, [r3, #0]
 800ef12:	f000 b88d 	b.w	800f030 <_malloc_r>
 800ef16:	bf00      	nop
 800ef18:	20000064 	.word	0x20000064

0800ef1c <free>:
 800ef1c:	4b02      	ldr	r3, [pc, #8]	; (800ef28 <free+0xc>)
 800ef1e:	4601      	mov	r1, r0
 800ef20:	6818      	ldr	r0, [r3, #0]
 800ef22:	f000 b819 	b.w	800ef58 <_free_r>
 800ef26:	bf00      	nop
 800ef28:	20000064 	.word	0x20000064

0800ef2c <memcpy>:
 800ef2c:	440a      	add	r2, r1
 800ef2e:	4291      	cmp	r1, r2
 800ef30:	f100 33ff 	add.w	r3, r0, #4294967295
 800ef34:	d100      	bne.n	800ef38 <memcpy+0xc>
 800ef36:	4770      	bx	lr
 800ef38:	b510      	push	{r4, lr}
 800ef3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef42:	4291      	cmp	r1, r2
 800ef44:	d1f9      	bne.n	800ef3a <memcpy+0xe>
 800ef46:	bd10      	pop	{r4, pc}

0800ef48 <memset>:
 800ef48:	4402      	add	r2, r0
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	4293      	cmp	r3, r2
 800ef4e:	d100      	bne.n	800ef52 <memset+0xa>
 800ef50:	4770      	bx	lr
 800ef52:	f803 1b01 	strb.w	r1, [r3], #1
 800ef56:	e7f9      	b.n	800ef4c <memset+0x4>

0800ef58 <_free_r>:
 800ef58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef5a:	2900      	cmp	r1, #0
 800ef5c:	d044      	beq.n	800efe8 <_free_r+0x90>
 800ef5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef62:	9001      	str	r0, [sp, #4]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	f1a1 0404 	sub.w	r4, r1, #4
 800ef6a:	bfb8      	it	lt
 800ef6c:	18e4      	addlt	r4, r4, r3
 800ef6e:	f000 fc71 	bl	800f854 <__malloc_lock>
 800ef72:	4a1e      	ldr	r2, [pc, #120]	; (800efec <_free_r+0x94>)
 800ef74:	9801      	ldr	r0, [sp, #4]
 800ef76:	6813      	ldr	r3, [r2, #0]
 800ef78:	b933      	cbnz	r3, 800ef88 <_free_r+0x30>
 800ef7a:	6063      	str	r3, [r4, #4]
 800ef7c:	6014      	str	r4, [r2, #0]
 800ef7e:	b003      	add	sp, #12
 800ef80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef84:	f000 bc6c 	b.w	800f860 <__malloc_unlock>
 800ef88:	42a3      	cmp	r3, r4
 800ef8a:	d908      	bls.n	800ef9e <_free_r+0x46>
 800ef8c:	6825      	ldr	r5, [r4, #0]
 800ef8e:	1961      	adds	r1, r4, r5
 800ef90:	428b      	cmp	r3, r1
 800ef92:	bf01      	itttt	eq
 800ef94:	6819      	ldreq	r1, [r3, #0]
 800ef96:	685b      	ldreq	r3, [r3, #4]
 800ef98:	1949      	addeq	r1, r1, r5
 800ef9a:	6021      	streq	r1, [r4, #0]
 800ef9c:	e7ed      	b.n	800ef7a <_free_r+0x22>
 800ef9e:	461a      	mov	r2, r3
 800efa0:	685b      	ldr	r3, [r3, #4]
 800efa2:	b10b      	cbz	r3, 800efa8 <_free_r+0x50>
 800efa4:	42a3      	cmp	r3, r4
 800efa6:	d9fa      	bls.n	800ef9e <_free_r+0x46>
 800efa8:	6811      	ldr	r1, [r2, #0]
 800efaa:	1855      	adds	r5, r2, r1
 800efac:	42a5      	cmp	r5, r4
 800efae:	d10b      	bne.n	800efc8 <_free_r+0x70>
 800efb0:	6824      	ldr	r4, [r4, #0]
 800efb2:	4421      	add	r1, r4
 800efb4:	1854      	adds	r4, r2, r1
 800efb6:	42a3      	cmp	r3, r4
 800efb8:	6011      	str	r1, [r2, #0]
 800efba:	d1e0      	bne.n	800ef7e <_free_r+0x26>
 800efbc:	681c      	ldr	r4, [r3, #0]
 800efbe:	685b      	ldr	r3, [r3, #4]
 800efc0:	6053      	str	r3, [r2, #4]
 800efc2:	4421      	add	r1, r4
 800efc4:	6011      	str	r1, [r2, #0]
 800efc6:	e7da      	b.n	800ef7e <_free_r+0x26>
 800efc8:	d902      	bls.n	800efd0 <_free_r+0x78>
 800efca:	230c      	movs	r3, #12
 800efcc:	6003      	str	r3, [r0, #0]
 800efce:	e7d6      	b.n	800ef7e <_free_r+0x26>
 800efd0:	6825      	ldr	r5, [r4, #0]
 800efd2:	1961      	adds	r1, r4, r5
 800efd4:	428b      	cmp	r3, r1
 800efd6:	bf04      	itt	eq
 800efd8:	6819      	ldreq	r1, [r3, #0]
 800efda:	685b      	ldreq	r3, [r3, #4]
 800efdc:	6063      	str	r3, [r4, #4]
 800efde:	bf04      	itt	eq
 800efe0:	1949      	addeq	r1, r1, r5
 800efe2:	6021      	streq	r1, [r4, #0]
 800efe4:	6054      	str	r4, [r2, #4]
 800efe6:	e7ca      	b.n	800ef7e <_free_r+0x26>
 800efe8:	b003      	add	sp, #12
 800efea:	bd30      	pop	{r4, r5, pc}
 800efec:	20013960 	.word	0x20013960

0800eff0 <sbrk_aligned>:
 800eff0:	b570      	push	{r4, r5, r6, lr}
 800eff2:	4e0e      	ldr	r6, [pc, #56]	; (800f02c <sbrk_aligned+0x3c>)
 800eff4:	460c      	mov	r4, r1
 800eff6:	6831      	ldr	r1, [r6, #0]
 800eff8:	4605      	mov	r5, r0
 800effa:	b911      	cbnz	r1, 800f002 <sbrk_aligned+0x12>
 800effc:	f000 f91a 	bl	800f234 <_sbrk_r>
 800f000:	6030      	str	r0, [r6, #0]
 800f002:	4621      	mov	r1, r4
 800f004:	4628      	mov	r0, r5
 800f006:	f000 f915 	bl	800f234 <_sbrk_r>
 800f00a:	1c43      	adds	r3, r0, #1
 800f00c:	d00a      	beq.n	800f024 <sbrk_aligned+0x34>
 800f00e:	1cc4      	adds	r4, r0, #3
 800f010:	f024 0403 	bic.w	r4, r4, #3
 800f014:	42a0      	cmp	r0, r4
 800f016:	d007      	beq.n	800f028 <sbrk_aligned+0x38>
 800f018:	1a21      	subs	r1, r4, r0
 800f01a:	4628      	mov	r0, r5
 800f01c:	f000 f90a 	bl	800f234 <_sbrk_r>
 800f020:	3001      	adds	r0, #1
 800f022:	d101      	bne.n	800f028 <sbrk_aligned+0x38>
 800f024:	f04f 34ff 	mov.w	r4, #4294967295
 800f028:	4620      	mov	r0, r4
 800f02a:	bd70      	pop	{r4, r5, r6, pc}
 800f02c:	20013964 	.word	0x20013964

0800f030 <_malloc_r>:
 800f030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f034:	1ccd      	adds	r5, r1, #3
 800f036:	f025 0503 	bic.w	r5, r5, #3
 800f03a:	3508      	adds	r5, #8
 800f03c:	2d0c      	cmp	r5, #12
 800f03e:	bf38      	it	cc
 800f040:	250c      	movcc	r5, #12
 800f042:	2d00      	cmp	r5, #0
 800f044:	4607      	mov	r7, r0
 800f046:	db01      	blt.n	800f04c <_malloc_r+0x1c>
 800f048:	42a9      	cmp	r1, r5
 800f04a:	d905      	bls.n	800f058 <_malloc_r+0x28>
 800f04c:	230c      	movs	r3, #12
 800f04e:	603b      	str	r3, [r7, #0]
 800f050:	2600      	movs	r6, #0
 800f052:	4630      	mov	r0, r6
 800f054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f058:	4e2e      	ldr	r6, [pc, #184]	; (800f114 <_malloc_r+0xe4>)
 800f05a:	f000 fbfb 	bl	800f854 <__malloc_lock>
 800f05e:	6833      	ldr	r3, [r6, #0]
 800f060:	461c      	mov	r4, r3
 800f062:	bb34      	cbnz	r4, 800f0b2 <_malloc_r+0x82>
 800f064:	4629      	mov	r1, r5
 800f066:	4638      	mov	r0, r7
 800f068:	f7ff ffc2 	bl	800eff0 <sbrk_aligned>
 800f06c:	1c43      	adds	r3, r0, #1
 800f06e:	4604      	mov	r4, r0
 800f070:	d14d      	bne.n	800f10e <_malloc_r+0xde>
 800f072:	6834      	ldr	r4, [r6, #0]
 800f074:	4626      	mov	r6, r4
 800f076:	2e00      	cmp	r6, #0
 800f078:	d140      	bne.n	800f0fc <_malloc_r+0xcc>
 800f07a:	6823      	ldr	r3, [r4, #0]
 800f07c:	4631      	mov	r1, r6
 800f07e:	4638      	mov	r0, r7
 800f080:	eb04 0803 	add.w	r8, r4, r3
 800f084:	f000 f8d6 	bl	800f234 <_sbrk_r>
 800f088:	4580      	cmp	r8, r0
 800f08a:	d13a      	bne.n	800f102 <_malloc_r+0xd2>
 800f08c:	6821      	ldr	r1, [r4, #0]
 800f08e:	3503      	adds	r5, #3
 800f090:	1a6d      	subs	r5, r5, r1
 800f092:	f025 0503 	bic.w	r5, r5, #3
 800f096:	3508      	adds	r5, #8
 800f098:	2d0c      	cmp	r5, #12
 800f09a:	bf38      	it	cc
 800f09c:	250c      	movcc	r5, #12
 800f09e:	4629      	mov	r1, r5
 800f0a0:	4638      	mov	r0, r7
 800f0a2:	f7ff ffa5 	bl	800eff0 <sbrk_aligned>
 800f0a6:	3001      	adds	r0, #1
 800f0a8:	d02b      	beq.n	800f102 <_malloc_r+0xd2>
 800f0aa:	6823      	ldr	r3, [r4, #0]
 800f0ac:	442b      	add	r3, r5
 800f0ae:	6023      	str	r3, [r4, #0]
 800f0b0:	e00e      	b.n	800f0d0 <_malloc_r+0xa0>
 800f0b2:	6822      	ldr	r2, [r4, #0]
 800f0b4:	1b52      	subs	r2, r2, r5
 800f0b6:	d41e      	bmi.n	800f0f6 <_malloc_r+0xc6>
 800f0b8:	2a0b      	cmp	r2, #11
 800f0ba:	d916      	bls.n	800f0ea <_malloc_r+0xba>
 800f0bc:	1961      	adds	r1, r4, r5
 800f0be:	42a3      	cmp	r3, r4
 800f0c0:	6025      	str	r5, [r4, #0]
 800f0c2:	bf18      	it	ne
 800f0c4:	6059      	strne	r1, [r3, #4]
 800f0c6:	6863      	ldr	r3, [r4, #4]
 800f0c8:	bf08      	it	eq
 800f0ca:	6031      	streq	r1, [r6, #0]
 800f0cc:	5162      	str	r2, [r4, r5]
 800f0ce:	604b      	str	r3, [r1, #4]
 800f0d0:	4638      	mov	r0, r7
 800f0d2:	f104 060b 	add.w	r6, r4, #11
 800f0d6:	f000 fbc3 	bl	800f860 <__malloc_unlock>
 800f0da:	f026 0607 	bic.w	r6, r6, #7
 800f0de:	1d23      	adds	r3, r4, #4
 800f0e0:	1af2      	subs	r2, r6, r3
 800f0e2:	d0b6      	beq.n	800f052 <_malloc_r+0x22>
 800f0e4:	1b9b      	subs	r3, r3, r6
 800f0e6:	50a3      	str	r3, [r4, r2]
 800f0e8:	e7b3      	b.n	800f052 <_malloc_r+0x22>
 800f0ea:	6862      	ldr	r2, [r4, #4]
 800f0ec:	42a3      	cmp	r3, r4
 800f0ee:	bf0c      	ite	eq
 800f0f0:	6032      	streq	r2, [r6, #0]
 800f0f2:	605a      	strne	r2, [r3, #4]
 800f0f4:	e7ec      	b.n	800f0d0 <_malloc_r+0xa0>
 800f0f6:	4623      	mov	r3, r4
 800f0f8:	6864      	ldr	r4, [r4, #4]
 800f0fa:	e7b2      	b.n	800f062 <_malloc_r+0x32>
 800f0fc:	4634      	mov	r4, r6
 800f0fe:	6876      	ldr	r6, [r6, #4]
 800f100:	e7b9      	b.n	800f076 <_malloc_r+0x46>
 800f102:	230c      	movs	r3, #12
 800f104:	603b      	str	r3, [r7, #0]
 800f106:	4638      	mov	r0, r7
 800f108:	f000 fbaa 	bl	800f860 <__malloc_unlock>
 800f10c:	e7a1      	b.n	800f052 <_malloc_r+0x22>
 800f10e:	6025      	str	r5, [r4, #0]
 800f110:	e7de      	b.n	800f0d0 <_malloc_r+0xa0>
 800f112:	bf00      	nop
 800f114:	20013960 	.word	0x20013960

0800f118 <iprintf>:
 800f118:	b40f      	push	{r0, r1, r2, r3}
 800f11a:	4b0a      	ldr	r3, [pc, #40]	; (800f144 <iprintf+0x2c>)
 800f11c:	b513      	push	{r0, r1, r4, lr}
 800f11e:	681c      	ldr	r4, [r3, #0]
 800f120:	b124      	cbz	r4, 800f12c <iprintf+0x14>
 800f122:	69a3      	ldr	r3, [r4, #24]
 800f124:	b913      	cbnz	r3, 800f12c <iprintf+0x14>
 800f126:	4620      	mov	r0, r4
 800f128:	f000 fa8e 	bl	800f648 <__sinit>
 800f12c:	ab05      	add	r3, sp, #20
 800f12e:	9a04      	ldr	r2, [sp, #16]
 800f130:	68a1      	ldr	r1, [r4, #8]
 800f132:	9301      	str	r3, [sp, #4]
 800f134:	4620      	mov	r0, r4
 800f136:	f000 fd1f 	bl	800fb78 <_vfiprintf_r>
 800f13a:	b002      	add	sp, #8
 800f13c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f140:	b004      	add	sp, #16
 800f142:	4770      	bx	lr
 800f144:	20000064 	.word	0x20000064

0800f148 <_puts_r>:
 800f148:	b570      	push	{r4, r5, r6, lr}
 800f14a:	460e      	mov	r6, r1
 800f14c:	4605      	mov	r5, r0
 800f14e:	b118      	cbz	r0, 800f158 <_puts_r+0x10>
 800f150:	6983      	ldr	r3, [r0, #24]
 800f152:	b90b      	cbnz	r3, 800f158 <_puts_r+0x10>
 800f154:	f000 fa78 	bl	800f648 <__sinit>
 800f158:	69ab      	ldr	r3, [r5, #24]
 800f15a:	68ac      	ldr	r4, [r5, #8]
 800f15c:	b913      	cbnz	r3, 800f164 <_puts_r+0x1c>
 800f15e:	4628      	mov	r0, r5
 800f160:	f000 fa72 	bl	800f648 <__sinit>
 800f164:	4b2c      	ldr	r3, [pc, #176]	; (800f218 <_puts_r+0xd0>)
 800f166:	429c      	cmp	r4, r3
 800f168:	d120      	bne.n	800f1ac <_puts_r+0x64>
 800f16a:	686c      	ldr	r4, [r5, #4]
 800f16c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f16e:	07db      	lsls	r3, r3, #31
 800f170:	d405      	bmi.n	800f17e <_puts_r+0x36>
 800f172:	89a3      	ldrh	r3, [r4, #12]
 800f174:	0598      	lsls	r0, r3, #22
 800f176:	d402      	bmi.n	800f17e <_puts_r+0x36>
 800f178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f17a:	f000 fb03 	bl	800f784 <__retarget_lock_acquire_recursive>
 800f17e:	89a3      	ldrh	r3, [r4, #12]
 800f180:	0719      	lsls	r1, r3, #28
 800f182:	d51d      	bpl.n	800f1c0 <_puts_r+0x78>
 800f184:	6923      	ldr	r3, [r4, #16]
 800f186:	b1db      	cbz	r3, 800f1c0 <_puts_r+0x78>
 800f188:	3e01      	subs	r6, #1
 800f18a:	68a3      	ldr	r3, [r4, #8]
 800f18c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f190:	3b01      	subs	r3, #1
 800f192:	60a3      	str	r3, [r4, #8]
 800f194:	bb39      	cbnz	r1, 800f1e6 <_puts_r+0x9e>
 800f196:	2b00      	cmp	r3, #0
 800f198:	da38      	bge.n	800f20c <_puts_r+0xc4>
 800f19a:	4622      	mov	r2, r4
 800f19c:	210a      	movs	r1, #10
 800f19e:	4628      	mov	r0, r5
 800f1a0:	f000 f878 	bl	800f294 <__swbuf_r>
 800f1a4:	3001      	adds	r0, #1
 800f1a6:	d011      	beq.n	800f1cc <_puts_r+0x84>
 800f1a8:	250a      	movs	r5, #10
 800f1aa:	e011      	b.n	800f1d0 <_puts_r+0x88>
 800f1ac:	4b1b      	ldr	r3, [pc, #108]	; (800f21c <_puts_r+0xd4>)
 800f1ae:	429c      	cmp	r4, r3
 800f1b0:	d101      	bne.n	800f1b6 <_puts_r+0x6e>
 800f1b2:	68ac      	ldr	r4, [r5, #8]
 800f1b4:	e7da      	b.n	800f16c <_puts_r+0x24>
 800f1b6:	4b1a      	ldr	r3, [pc, #104]	; (800f220 <_puts_r+0xd8>)
 800f1b8:	429c      	cmp	r4, r3
 800f1ba:	bf08      	it	eq
 800f1bc:	68ec      	ldreq	r4, [r5, #12]
 800f1be:	e7d5      	b.n	800f16c <_puts_r+0x24>
 800f1c0:	4621      	mov	r1, r4
 800f1c2:	4628      	mov	r0, r5
 800f1c4:	f000 f8b8 	bl	800f338 <__swsetup_r>
 800f1c8:	2800      	cmp	r0, #0
 800f1ca:	d0dd      	beq.n	800f188 <_puts_r+0x40>
 800f1cc:	f04f 35ff 	mov.w	r5, #4294967295
 800f1d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f1d2:	07da      	lsls	r2, r3, #31
 800f1d4:	d405      	bmi.n	800f1e2 <_puts_r+0x9a>
 800f1d6:	89a3      	ldrh	r3, [r4, #12]
 800f1d8:	059b      	lsls	r3, r3, #22
 800f1da:	d402      	bmi.n	800f1e2 <_puts_r+0x9a>
 800f1dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f1de:	f000 fad2 	bl	800f786 <__retarget_lock_release_recursive>
 800f1e2:	4628      	mov	r0, r5
 800f1e4:	bd70      	pop	{r4, r5, r6, pc}
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	da04      	bge.n	800f1f4 <_puts_r+0xac>
 800f1ea:	69a2      	ldr	r2, [r4, #24]
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	dc06      	bgt.n	800f1fe <_puts_r+0xb6>
 800f1f0:	290a      	cmp	r1, #10
 800f1f2:	d004      	beq.n	800f1fe <_puts_r+0xb6>
 800f1f4:	6823      	ldr	r3, [r4, #0]
 800f1f6:	1c5a      	adds	r2, r3, #1
 800f1f8:	6022      	str	r2, [r4, #0]
 800f1fa:	7019      	strb	r1, [r3, #0]
 800f1fc:	e7c5      	b.n	800f18a <_puts_r+0x42>
 800f1fe:	4622      	mov	r2, r4
 800f200:	4628      	mov	r0, r5
 800f202:	f000 f847 	bl	800f294 <__swbuf_r>
 800f206:	3001      	adds	r0, #1
 800f208:	d1bf      	bne.n	800f18a <_puts_r+0x42>
 800f20a:	e7df      	b.n	800f1cc <_puts_r+0x84>
 800f20c:	6823      	ldr	r3, [r4, #0]
 800f20e:	250a      	movs	r5, #10
 800f210:	1c5a      	adds	r2, r3, #1
 800f212:	6022      	str	r2, [r4, #0]
 800f214:	701d      	strb	r5, [r3, #0]
 800f216:	e7db      	b.n	800f1d0 <_puts_r+0x88>
 800f218:	080119b0 	.word	0x080119b0
 800f21c:	080119d0 	.word	0x080119d0
 800f220:	08011990 	.word	0x08011990

0800f224 <puts>:
 800f224:	4b02      	ldr	r3, [pc, #8]	; (800f230 <puts+0xc>)
 800f226:	4601      	mov	r1, r0
 800f228:	6818      	ldr	r0, [r3, #0]
 800f22a:	f7ff bf8d 	b.w	800f148 <_puts_r>
 800f22e:	bf00      	nop
 800f230:	20000064 	.word	0x20000064

0800f234 <_sbrk_r>:
 800f234:	b538      	push	{r3, r4, r5, lr}
 800f236:	4d06      	ldr	r5, [pc, #24]	; (800f250 <_sbrk_r+0x1c>)
 800f238:	2300      	movs	r3, #0
 800f23a:	4604      	mov	r4, r0
 800f23c:	4608      	mov	r0, r1
 800f23e:	602b      	str	r3, [r5, #0]
 800f240:	f7f5 fa26 	bl	8004690 <_sbrk>
 800f244:	1c43      	adds	r3, r0, #1
 800f246:	d102      	bne.n	800f24e <_sbrk_r+0x1a>
 800f248:	682b      	ldr	r3, [r5, #0]
 800f24a:	b103      	cbz	r3, 800f24e <_sbrk_r+0x1a>
 800f24c:	6023      	str	r3, [r4, #0]
 800f24e:	bd38      	pop	{r3, r4, r5, pc}
 800f250:	2001396c 	.word	0x2001396c

0800f254 <siprintf>:
 800f254:	b40e      	push	{r1, r2, r3}
 800f256:	b500      	push	{lr}
 800f258:	b09c      	sub	sp, #112	; 0x70
 800f25a:	ab1d      	add	r3, sp, #116	; 0x74
 800f25c:	9002      	str	r0, [sp, #8]
 800f25e:	9006      	str	r0, [sp, #24]
 800f260:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f264:	4809      	ldr	r0, [pc, #36]	; (800f28c <siprintf+0x38>)
 800f266:	9107      	str	r1, [sp, #28]
 800f268:	9104      	str	r1, [sp, #16]
 800f26a:	4909      	ldr	r1, [pc, #36]	; (800f290 <siprintf+0x3c>)
 800f26c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f270:	9105      	str	r1, [sp, #20]
 800f272:	6800      	ldr	r0, [r0, #0]
 800f274:	9301      	str	r3, [sp, #4]
 800f276:	a902      	add	r1, sp, #8
 800f278:	f000 fb54 	bl	800f924 <_svfiprintf_r>
 800f27c:	9b02      	ldr	r3, [sp, #8]
 800f27e:	2200      	movs	r2, #0
 800f280:	701a      	strb	r2, [r3, #0]
 800f282:	b01c      	add	sp, #112	; 0x70
 800f284:	f85d eb04 	ldr.w	lr, [sp], #4
 800f288:	b003      	add	sp, #12
 800f28a:	4770      	bx	lr
 800f28c:	20000064 	.word	0x20000064
 800f290:	ffff0208 	.word	0xffff0208

0800f294 <__swbuf_r>:
 800f294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f296:	460e      	mov	r6, r1
 800f298:	4614      	mov	r4, r2
 800f29a:	4605      	mov	r5, r0
 800f29c:	b118      	cbz	r0, 800f2a6 <__swbuf_r+0x12>
 800f29e:	6983      	ldr	r3, [r0, #24]
 800f2a0:	b90b      	cbnz	r3, 800f2a6 <__swbuf_r+0x12>
 800f2a2:	f000 f9d1 	bl	800f648 <__sinit>
 800f2a6:	4b21      	ldr	r3, [pc, #132]	; (800f32c <__swbuf_r+0x98>)
 800f2a8:	429c      	cmp	r4, r3
 800f2aa:	d12b      	bne.n	800f304 <__swbuf_r+0x70>
 800f2ac:	686c      	ldr	r4, [r5, #4]
 800f2ae:	69a3      	ldr	r3, [r4, #24]
 800f2b0:	60a3      	str	r3, [r4, #8]
 800f2b2:	89a3      	ldrh	r3, [r4, #12]
 800f2b4:	071a      	lsls	r2, r3, #28
 800f2b6:	d52f      	bpl.n	800f318 <__swbuf_r+0x84>
 800f2b8:	6923      	ldr	r3, [r4, #16]
 800f2ba:	b36b      	cbz	r3, 800f318 <__swbuf_r+0x84>
 800f2bc:	6923      	ldr	r3, [r4, #16]
 800f2be:	6820      	ldr	r0, [r4, #0]
 800f2c0:	1ac0      	subs	r0, r0, r3
 800f2c2:	6963      	ldr	r3, [r4, #20]
 800f2c4:	b2f6      	uxtb	r6, r6
 800f2c6:	4283      	cmp	r3, r0
 800f2c8:	4637      	mov	r7, r6
 800f2ca:	dc04      	bgt.n	800f2d6 <__swbuf_r+0x42>
 800f2cc:	4621      	mov	r1, r4
 800f2ce:	4628      	mov	r0, r5
 800f2d0:	f000 f926 	bl	800f520 <_fflush_r>
 800f2d4:	bb30      	cbnz	r0, 800f324 <__swbuf_r+0x90>
 800f2d6:	68a3      	ldr	r3, [r4, #8]
 800f2d8:	3b01      	subs	r3, #1
 800f2da:	60a3      	str	r3, [r4, #8]
 800f2dc:	6823      	ldr	r3, [r4, #0]
 800f2de:	1c5a      	adds	r2, r3, #1
 800f2e0:	6022      	str	r2, [r4, #0]
 800f2e2:	701e      	strb	r6, [r3, #0]
 800f2e4:	6963      	ldr	r3, [r4, #20]
 800f2e6:	3001      	adds	r0, #1
 800f2e8:	4283      	cmp	r3, r0
 800f2ea:	d004      	beq.n	800f2f6 <__swbuf_r+0x62>
 800f2ec:	89a3      	ldrh	r3, [r4, #12]
 800f2ee:	07db      	lsls	r3, r3, #31
 800f2f0:	d506      	bpl.n	800f300 <__swbuf_r+0x6c>
 800f2f2:	2e0a      	cmp	r6, #10
 800f2f4:	d104      	bne.n	800f300 <__swbuf_r+0x6c>
 800f2f6:	4621      	mov	r1, r4
 800f2f8:	4628      	mov	r0, r5
 800f2fa:	f000 f911 	bl	800f520 <_fflush_r>
 800f2fe:	b988      	cbnz	r0, 800f324 <__swbuf_r+0x90>
 800f300:	4638      	mov	r0, r7
 800f302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f304:	4b0a      	ldr	r3, [pc, #40]	; (800f330 <__swbuf_r+0x9c>)
 800f306:	429c      	cmp	r4, r3
 800f308:	d101      	bne.n	800f30e <__swbuf_r+0x7a>
 800f30a:	68ac      	ldr	r4, [r5, #8]
 800f30c:	e7cf      	b.n	800f2ae <__swbuf_r+0x1a>
 800f30e:	4b09      	ldr	r3, [pc, #36]	; (800f334 <__swbuf_r+0xa0>)
 800f310:	429c      	cmp	r4, r3
 800f312:	bf08      	it	eq
 800f314:	68ec      	ldreq	r4, [r5, #12]
 800f316:	e7ca      	b.n	800f2ae <__swbuf_r+0x1a>
 800f318:	4621      	mov	r1, r4
 800f31a:	4628      	mov	r0, r5
 800f31c:	f000 f80c 	bl	800f338 <__swsetup_r>
 800f320:	2800      	cmp	r0, #0
 800f322:	d0cb      	beq.n	800f2bc <__swbuf_r+0x28>
 800f324:	f04f 37ff 	mov.w	r7, #4294967295
 800f328:	e7ea      	b.n	800f300 <__swbuf_r+0x6c>
 800f32a:	bf00      	nop
 800f32c:	080119b0 	.word	0x080119b0
 800f330:	080119d0 	.word	0x080119d0
 800f334:	08011990 	.word	0x08011990

0800f338 <__swsetup_r>:
 800f338:	4b32      	ldr	r3, [pc, #200]	; (800f404 <__swsetup_r+0xcc>)
 800f33a:	b570      	push	{r4, r5, r6, lr}
 800f33c:	681d      	ldr	r5, [r3, #0]
 800f33e:	4606      	mov	r6, r0
 800f340:	460c      	mov	r4, r1
 800f342:	b125      	cbz	r5, 800f34e <__swsetup_r+0x16>
 800f344:	69ab      	ldr	r3, [r5, #24]
 800f346:	b913      	cbnz	r3, 800f34e <__swsetup_r+0x16>
 800f348:	4628      	mov	r0, r5
 800f34a:	f000 f97d 	bl	800f648 <__sinit>
 800f34e:	4b2e      	ldr	r3, [pc, #184]	; (800f408 <__swsetup_r+0xd0>)
 800f350:	429c      	cmp	r4, r3
 800f352:	d10f      	bne.n	800f374 <__swsetup_r+0x3c>
 800f354:	686c      	ldr	r4, [r5, #4]
 800f356:	89a3      	ldrh	r3, [r4, #12]
 800f358:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f35c:	0719      	lsls	r1, r3, #28
 800f35e:	d42c      	bmi.n	800f3ba <__swsetup_r+0x82>
 800f360:	06dd      	lsls	r5, r3, #27
 800f362:	d411      	bmi.n	800f388 <__swsetup_r+0x50>
 800f364:	2309      	movs	r3, #9
 800f366:	6033      	str	r3, [r6, #0]
 800f368:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f36c:	81a3      	strh	r3, [r4, #12]
 800f36e:	f04f 30ff 	mov.w	r0, #4294967295
 800f372:	e03e      	b.n	800f3f2 <__swsetup_r+0xba>
 800f374:	4b25      	ldr	r3, [pc, #148]	; (800f40c <__swsetup_r+0xd4>)
 800f376:	429c      	cmp	r4, r3
 800f378:	d101      	bne.n	800f37e <__swsetup_r+0x46>
 800f37a:	68ac      	ldr	r4, [r5, #8]
 800f37c:	e7eb      	b.n	800f356 <__swsetup_r+0x1e>
 800f37e:	4b24      	ldr	r3, [pc, #144]	; (800f410 <__swsetup_r+0xd8>)
 800f380:	429c      	cmp	r4, r3
 800f382:	bf08      	it	eq
 800f384:	68ec      	ldreq	r4, [r5, #12]
 800f386:	e7e6      	b.n	800f356 <__swsetup_r+0x1e>
 800f388:	0758      	lsls	r0, r3, #29
 800f38a:	d512      	bpl.n	800f3b2 <__swsetup_r+0x7a>
 800f38c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f38e:	b141      	cbz	r1, 800f3a2 <__swsetup_r+0x6a>
 800f390:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f394:	4299      	cmp	r1, r3
 800f396:	d002      	beq.n	800f39e <__swsetup_r+0x66>
 800f398:	4630      	mov	r0, r6
 800f39a:	f7ff fddd 	bl	800ef58 <_free_r>
 800f39e:	2300      	movs	r3, #0
 800f3a0:	6363      	str	r3, [r4, #52]	; 0x34
 800f3a2:	89a3      	ldrh	r3, [r4, #12]
 800f3a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f3a8:	81a3      	strh	r3, [r4, #12]
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	6063      	str	r3, [r4, #4]
 800f3ae:	6923      	ldr	r3, [r4, #16]
 800f3b0:	6023      	str	r3, [r4, #0]
 800f3b2:	89a3      	ldrh	r3, [r4, #12]
 800f3b4:	f043 0308 	orr.w	r3, r3, #8
 800f3b8:	81a3      	strh	r3, [r4, #12]
 800f3ba:	6923      	ldr	r3, [r4, #16]
 800f3bc:	b94b      	cbnz	r3, 800f3d2 <__swsetup_r+0x9a>
 800f3be:	89a3      	ldrh	r3, [r4, #12]
 800f3c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f3c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f3c8:	d003      	beq.n	800f3d2 <__swsetup_r+0x9a>
 800f3ca:	4621      	mov	r1, r4
 800f3cc:	4630      	mov	r0, r6
 800f3ce:	f000 fa01 	bl	800f7d4 <__smakebuf_r>
 800f3d2:	89a0      	ldrh	r0, [r4, #12]
 800f3d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f3d8:	f010 0301 	ands.w	r3, r0, #1
 800f3dc:	d00a      	beq.n	800f3f4 <__swsetup_r+0xbc>
 800f3de:	2300      	movs	r3, #0
 800f3e0:	60a3      	str	r3, [r4, #8]
 800f3e2:	6963      	ldr	r3, [r4, #20]
 800f3e4:	425b      	negs	r3, r3
 800f3e6:	61a3      	str	r3, [r4, #24]
 800f3e8:	6923      	ldr	r3, [r4, #16]
 800f3ea:	b943      	cbnz	r3, 800f3fe <__swsetup_r+0xc6>
 800f3ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f3f0:	d1ba      	bne.n	800f368 <__swsetup_r+0x30>
 800f3f2:	bd70      	pop	{r4, r5, r6, pc}
 800f3f4:	0781      	lsls	r1, r0, #30
 800f3f6:	bf58      	it	pl
 800f3f8:	6963      	ldrpl	r3, [r4, #20]
 800f3fa:	60a3      	str	r3, [r4, #8]
 800f3fc:	e7f4      	b.n	800f3e8 <__swsetup_r+0xb0>
 800f3fe:	2000      	movs	r0, #0
 800f400:	e7f7      	b.n	800f3f2 <__swsetup_r+0xba>
 800f402:	bf00      	nop
 800f404:	20000064 	.word	0x20000064
 800f408:	080119b0 	.word	0x080119b0
 800f40c:	080119d0 	.word	0x080119d0
 800f410:	08011990 	.word	0x08011990

0800f414 <__sflush_r>:
 800f414:	898a      	ldrh	r2, [r1, #12]
 800f416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f41a:	4605      	mov	r5, r0
 800f41c:	0710      	lsls	r0, r2, #28
 800f41e:	460c      	mov	r4, r1
 800f420:	d458      	bmi.n	800f4d4 <__sflush_r+0xc0>
 800f422:	684b      	ldr	r3, [r1, #4]
 800f424:	2b00      	cmp	r3, #0
 800f426:	dc05      	bgt.n	800f434 <__sflush_r+0x20>
 800f428:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	dc02      	bgt.n	800f434 <__sflush_r+0x20>
 800f42e:	2000      	movs	r0, #0
 800f430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f434:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f436:	2e00      	cmp	r6, #0
 800f438:	d0f9      	beq.n	800f42e <__sflush_r+0x1a>
 800f43a:	2300      	movs	r3, #0
 800f43c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f440:	682f      	ldr	r7, [r5, #0]
 800f442:	602b      	str	r3, [r5, #0]
 800f444:	d032      	beq.n	800f4ac <__sflush_r+0x98>
 800f446:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f448:	89a3      	ldrh	r3, [r4, #12]
 800f44a:	075a      	lsls	r2, r3, #29
 800f44c:	d505      	bpl.n	800f45a <__sflush_r+0x46>
 800f44e:	6863      	ldr	r3, [r4, #4]
 800f450:	1ac0      	subs	r0, r0, r3
 800f452:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f454:	b10b      	cbz	r3, 800f45a <__sflush_r+0x46>
 800f456:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f458:	1ac0      	subs	r0, r0, r3
 800f45a:	2300      	movs	r3, #0
 800f45c:	4602      	mov	r2, r0
 800f45e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f460:	6a21      	ldr	r1, [r4, #32]
 800f462:	4628      	mov	r0, r5
 800f464:	47b0      	blx	r6
 800f466:	1c43      	adds	r3, r0, #1
 800f468:	89a3      	ldrh	r3, [r4, #12]
 800f46a:	d106      	bne.n	800f47a <__sflush_r+0x66>
 800f46c:	6829      	ldr	r1, [r5, #0]
 800f46e:	291d      	cmp	r1, #29
 800f470:	d82c      	bhi.n	800f4cc <__sflush_r+0xb8>
 800f472:	4a2a      	ldr	r2, [pc, #168]	; (800f51c <__sflush_r+0x108>)
 800f474:	40ca      	lsrs	r2, r1
 800f476:	07d6      	lsls	r6, r2, #31
 800f478:	d528      	bpl.n	800f4cc <__sflush_r+0xb8>
 800f47a:	2200      	movs	r2, #0
 800f47c:	6062      	str	r2, [r4, #4]
 800f47e:	04d9      	lsls	r1, r3, #19
 800f480:	6922      	ldr	r2, [r4, #16]
 800f482:	6022      	str	r2, [r4, #0]
 800f484:	d504      	bpl.n	800f490 <__sflush_r+0x7c>
 800f486:	1c42      	adds	r2, r0, #1
 800f488:	d101      	bne.n	800f48e <__sflush_r+0x7a>
 800f48a:	682b      	ldr	r3, [r5, #0]
 800f48c:	b903      	cbnz	r3, 800f490 <__sflush_r+0x7c>
 800f48e:	6560      	str	r0, [r4, #84]	; 0x54
 800f490:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f492:	602f      	str	r7, [r5, #0]
 800f494:	2900      	cmp	r1, #0
 800f496:	d0ca      	beq.n	800f42e <__sflush_r+0x1a>
 800f498:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f49c:	4299      	cmp	r1, r3
 800f49e:	d002      	beq.n	800f4a6 <__sflush_r+0x92>
 800f4a0:	4628      	mov	r0, r5
 800f4a2:	f7ff fd59 	bl	800ef58 <_free_r>
 800f4a6:	2000      	movs	r0, #0
 800f4a8:	6360      	str	r0, [r4, #52]	; 0x34
 800f4aa:	e7c1      	b.n	800f430 <__sflush_r+0x1c>
 800f4ac:	6a21      	ldr	r1, [r4, #32]
 800f4ae:	2301      	movs	r3, #1
 800f4b0:	4628      	mov	r0, r5
 800f4b2:	47b0      	blx	r6
 800f4b4:	1c41      	adds	r1, r0, #1
 800f4b6:	d1c7      	bne.n	800f448 <__sflush_r+0x34>
 800f4b8:	682b      	ldr	r3, [r5, #0]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d0c4      	beq.n	800f448 <__sflush_r+0x34>
 800f4be:	2b1d      	cmp	r3, #29
 800f4c0:	d001      	beq.n	800f4c6 <__sflush_r+0xb2>
 800f4c2:	2b16      	cmp	r3, #22
 800f4c4:	d101      	bne.n	800f4ca <__sflush_r+0xb6>
 800f4c6:	602f      	str	r7, [r5, #0]
 800f4c8:	e7b1      	b.n	800f42e <__sflush_r+0x1a>
 800f4ca:	89a3      	ldrh	r3, [r4, #12]
 800f4cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4d0:	81a3      	strh	r3, [r4, #12]
 800f4d2:	e7ad      	b.n	800f430 <__sflush_r+0x1c>
 800f4d4:	690f      	ldr	r7, [r1, #16]
 800f4d6:	2f00      	cmp	r7, #0
 800f4d8:	d0a9      	beq.n	800f42e <__sflush_r+0x1a>
 800f4da:	0793      	lsls	r3, r2, #30
 800f4dc:	680e      	ldr	r6, [r1, #0]
 800f4de:	bf08      	it	eq
 800f4e0:	694b      	ldreq	r3, [r1, #20]
 800f4e2:	600f      	str	r7, [r1, #0]
 800f4e4:	bf18      	it	ne
 800f4e6:	2300      	movne	r3, #0
 800f4e8:	eba6 0807 	sub.w	r8, r6, r7
 800f4ec:	608b      	str	r3, [r1, #8]
 800f4ee:	f1b8 0f00 	cmp.w	r8, #0
 800f4f2:	dd9c      	ble.n	800f42e <__sflush_r+0x1a>
 800f4f4:	6a21      	ldr	r1, [r4, #32]
 800f4f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f4f8:	4643      	mov	r3, r8
 800f4fa:	463a      	mov	r2, r7
 800f4fc:	4628      	mov	r0, r5
 800f4fe:	47b0      	blx	r6
 800f500:	2800      	cmp	r0, #0
 800f502:	dc06      	bgt.n	800f512 <__sflush_r+0xfe>
 800f504:	89a3      	ldrh	r3, [r4, #12]
 800f506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f50a:	81a3      	strh	r3, [r4, #12]
 800f50c:	f04f 30ff 	mov.w	r0, #4294967295
 800f510:	e78e      	b.n	800f430 <__sflush_r+0x1c>
 800f512:	4407      	add	r7, r0
 800f514:	eba8 0800 	sub.w	r8, r8, r0
 800f518:	e7e9      	b.n	800f4ee <__sflush_r+0xda>
 800f51a:	bf00      	nop
 800f51c:	20400001 	.word	0x20400001

0800f520 <_fflush_r>:
 800f520:	b538      	push	{r3, r4, r5, lr}
 800f522:	690b      	ldr	r3, [r1, #16]
 800f524:	4605      	mov	r5, r0
 800f526:	460c      	mov	r4, r1
 800f528:	b913      	cbnz	r3, 800f530 <_fflush_r+0x10>
 800f52a:	2500      	movs	r5, #0
 800f52c:	4628      	mov	r0, r5
 800f52e:	bd38      	pop	{r3, r4, r5, pc}
 800f530:	b118      	cbz	r0, 800f53a <_fflush_r+0x1a>
 800f532:	6983      	ldr	r3, [r0, #24]
 800f534:	b90b      	cbnz	r3, 800f53a <_fflush_r+0x1a>
 800f536:	f000 f887 	bl	800f648 <__sinit>
 800f53a:	4b14      	ldr	r3, [pc, #80]	; (800f58c <_fflush_r+0x6c>)
 800f53c:	429c      	cmp	r4, r3
 800f53e:	d11b      	bne.n	800f578 <_fflush_r+0x58>
 800f540:	686c      	ldr	r4, [r5, #4]
 800f542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d0ef      	beq.n	800f52a <_fflush_r+0xa>
 800f54a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f54c:	07d0      	lsls	r0, r2, #31
 800f54e:	d404      	bmi.n	800f55a <_fflush_r+0x3a>
 800f550:	0599      	lsls	r1, r3, #22
 800f552:	d402      	bmi.n	800f55a <_fflush_r+0x3a>
 800f554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f556:	f000 f915 	bl	800f784 <__retarget_lock_acquire_recursive>
 800f55a:	4628      	mov	r0, r5
 800f55c:	4621      	mov	r1, r4
 800f55e:	f7ff ff59 	bl	800f414 <__sflush_r>
 800f562:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f564:	07da      	lsls	r2, r3, #31
 800f566:	4605      	mov	r5, r0
 800f568:	d4e0      	bmi.n	800f52c <_fflush_r+0xc>
 800f56a:	89a3      	ldrh	r3, [r4, #12]
 800f56c:	059b      	lsls	r3, r3, #22
 800f56e:	d4dd      	bmi.n	800f52c <_fflush_r+0xc>
 800f570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f572:	f000 f908 	bl	800f786 <__retarget_lock_release_recursive>
 800f576:	e7d9      	b.n	800f52c <_fflush_r+0xc>
 800f578:	4b05      	ldr	r3, [pc, #20]	; (800f590 <_fflush_r+0x70>)
 800f57a:	429c      	cmp	r4, r3
 800f57c:	d101      	bne.n	800f582 <_fflush_r+0x62>
 800f57e:	68ac      	ldr	r4, [r5, #8]
 800f580:	e7df      	b.n	800f542 <_fflush_r+0x22>
 800f582:	4b04      	ldr	r3, [pc, #16]	; (800f594 <_fflush_r+0x74>)
 800f584:	429c      	cmp	r4, r3
 800f586:	bf08      	it	eq
 800f588:	68ec      	ldreq	r4, [r5, #12]
 800f58a:	e7da      	b.n	800f542 <_fflush_r+0x22>
 800f58c:	080119b0 	.word	0x080119b0
 800f590:	080119d0 	.word	0x080119d0
 800f594:	08011990 	.word	0x08011990

0800f598 <std>:
 800f598:	2300      	movs	r3, #0
 800f59a:	b510      	push	{r4, lr}
 800f59c:	4604      	mov	r4, r0
 800f59e:	e9c0 3300 	strd	r3, r3, [r0]
 800f5a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f5a6:	6083      	str	r3, [r0, #8]
 800f5a8:	8181      	strh	r1, [r0, #12]
 800f5aa:	6643      	str	r3, [r0, #100]	; 0x64
 800f5ac:	81c2      	strh	r2, [r0, #14]
 800f5ae:	6183      	str	r3, [r0, #24]
 800f5b0:	4619      	mov	r1, r3
 800f5b2:	2208      	movs	r2, #8
 800f5b4:	305c      	adds	r0, #92	; 0x5c
 800f5b6:	f7ff fcc7 	bl	800ef48 <memset>
 800f5ba:	4b05      	ldr	r3, [pc, #20]	; (800f5d0 <std+0x38>)
 800f5bc:	6263      	str	r3, [r4, #36]	; 0x24
 800f5be:	4b05      	ldr	r3, [pc, #20]	; (800f5d4 <std+0x3c>)
 800f5c0:	62a3      	str	r3, [r4, #40]	; 0x28
 800f5c2:	4b05      	ldr	r3, [pc, #20]	; (800f5d8 <std+0x40>)
 800f5c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f5c6:	4b05      	ldr	r3, [pc, #20]	; (800f5dc <std+0x44>)
 800f5c8:	6224      	str	r4, [r4, #32]
 800f5ca:	6323      	str	r3, [r4, #48]	; 0x30
 800f5cc:	bd10      	pop	{r4, pc}
 800f5ce:	bf00      	nop
 800f5d0:	08010101 	.word	0x08010101
 800f5d4:	08010123 	.word	0x08010123
 800f5d8:	0801015b 	.word	0x0801015b
 800f5dc:	0801017f 	.word	0x0801017f

0800f5e0 <_cleanup_r>:
 800f5e0:	4901      	ldr	r1, [pc, #4]	; (800f5e8 <_cleanup_r+0x8>)
 800f5e2:	f000 b8af 	b.w	800f744 <_fwalk_reent>
 800f5e6:	bf00      	nop
 800f5e8:	0800f521 	.word	0x0800f521

0800f5ec <__sfmoreglue>:
 800f5ec:	b570      	push	{r4, r5, r6, lr}
 800f5ee:	2268      	movs	r2, #104	; 0x68
 800f5f0:	1e4d      	subs	r5, r1, #1
 800f5f2:	4355      	muls	r5, r2
 800f5f4:	460e      	mov	r6, r1
 800f5f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f5fa:	f7ff fd19 	bl	800f030 <_malloc_r>
 800f5fe:	4604      	mov	r4, r0
 800f600:	b140      	cbz	r0, 800f614 <__sfmoreglue+0x28>
 800f602:	2100      	movs	r1, #0
 800f604:	e9c0 1600 	strd	r1, r6, [r0]
 800f608:	300c      	adds	r0, #12
 800f60a:	60a0      	str	r0, [r4, #8]
 800f60c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f610:	f7ff fc9a 	bl	800ef48 <memset>
 800f614:	4620      	mov	r0, r4
 800f616:	bd70      	pop	{r4, r5, r6, pc}

0800f618 <__sfp_lock_acquire>:
 800f618:	4801      	ldr	r0, [pc, #4]	; (800f620 <__sfp_lock_acquire+0x8>)
 800f61a:	f000 b8b3 	b.w	800f784 <__retarget_lock_acquire_recursive>
 800f61e:	bf00      	nop
 800f620:	20013969 	.word	0x20013969

0800f624 <__sfp_lock_release>:
 800f624:	4801      	ldr	r0, [pc, #4]	; (800f62c <__sfp_lock_release+0x8>)
 800f626:	f000 b8ae 	b.w	800f786 <__retarget_lock_release_recursive>
 800f62a:	bf00      	nop
 800f62c:	20013969 	.word	0x20013969

0800f630 <__sinit_lock_acquire>:
 800f630:	4801      	ldr	r0, [pc, #4]	; (800f638 <__sinit_lock_acquire+0x8>)
 800f632:	f000 b8a7 	b.w	800f784 <__retarget_lock_acquire_recursive>
 800f636:	bf00      	nop
 800f638:	2001396a 	.word	0x2001396a

0800f63c <__sinit_lock_release>:
 800f63c:	4801      	ldr	r0, [pc, #4]	; (800f644 <__sinit_lock_release+0x8>)
 800f63e:	f000 b8a2 	b.w	800f786 <__retarget_lock_release_recursive>
 800f642:	bf00      	nop
 800f644:	2001396a 	.word	0x2001396a

0800f648 <__sinit>:
 800f648:	b510      	push	{r4, lr}
 800f64a:	4604      	mov	r4, r0
 800f64c:	f7ff fff0 	bl	800f630 <__sinit_lock_acquire>
 800f650:	69a3      	ldr	r3, [r4, #24]
 800f652:	b11b      	cbz	r3, 800f65c <__sinit+0x14>
 800f654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f658:	f7ff bff0 	b.w	800f63c <__sinit_lock_release>
 800f65c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f660:	6523      	str	r3, [r4, #80]	; 0x50
 800f662:	4b13      	ldr	r3, [pc, #76]	; (800f6b0 <__sinit+0x68>)
 800f664:	4a13      	ldr	r2, [pc, #76]	; (800f6b4 <__sinit+0x6c>)
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	62a2      	str	r2, [r4, #40]	; 0x28
 800f66a:	42a3      	cmp	r3, r4
 800f66c:	bf04      	itt	eq
 800f66e:	2301      	moveq	r3, #1
 800f670:	61a3      	streq	r3, [r4, #24]
 800f672:	4620      	mov	r0, r4
 800f674:	f000 f820 	bl	800f6b8 <__sfp>
 800f678:	6060      	str	r0, [r4, #4]
 800f67a:	4620      	mov	r0, r4
 800f67c:	f000 f81c 	bl	800f6b8 <__sfp>
 800f680:	60a0      	str	r0, [r4, #8]
 800f682:	4620      	mov	r0, r4
 800f684:	f000 f818 	bl	800f6b8 <__sfp>
 800f688:	2200      	movs	r2, #0
 800f68a:	60e0      	str	r0, [r4, #12]
 800f68c:	2104      	movs	r1, #4
 800f68e:	6860      	ldr	r0, [r4, #4]
 800f690:	f7ff ff82 	bl	800f598 <std>
 800f694:	68a0      	ldr	r0, [r4, #8]
 800f696:	2201      	movs	r2, #1
 800f698:	2109      	movs	r1, #9
 800f69a:	f7ff ff7d 	bl	800f598 <std>
 800f69e:	68e0      	ldr	r0, [r4, #12]
 800f6a0:	2202      	movs	r2, #2
 800f6a2:	2112      	movs	r1, #18
 800f6a4:	f7ff ff78 	bl	800f598 <std>
 800f6a8:	2301      	movs	r3, #1
 800f6aa:	61a3      	str	r3, [r4, #24]
 800f6ac:	e7d2      	b.n	800f654 <__sinit+0xc>
 800f6ae:	bf00      	nop
 800f6b0:	0801198c 	.word	0x0801198c
 800f6b4:	0800f5e1 	.word	0x0800f5e1

0800f6b8 <__sfp>:
 800f6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6ba:	4607      	mov	r7, r0
 800f6bc:	f7ff ffac 	bl	800f618 <__sfp_lock_acquire>
 800f6c0:	4b1e      	ldr	r3, [pc, #120]	; (800f73c <__sfp+0x84>)
 800f6c2:	681e      	ldr	r6, [r3, #0]
 800f6c4:	69b3      	ldr	r3, [r6, #24]
 800f6c6:	b913      	cbnz	r3, 800f6ce <__sfp+0x16>
 800f6c8:	4630      	mov	r0, r6
 800f6ca:	f7ff ffbd 	bl	800f648 <__sinit>
 800f6ce:	3648      	adds	r6, #72	; 0x48
 800f6d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f6d4:	3b01      	subs	r3, #1
 800f6d6:	d503      	bpl.n	800f6e0 <__sfp+0x28>
 800f6d8:	6833      	ldr	r3, [r6, #0]
 800f6da:	b30b      	cbz	r3, 800f720 <__sfp+0x68>
 800f6dc:	6836      	ldr	r6, [r6, #0]
 800f6de:	e7f7      	b.n	800f6d0 <__sfp+0x18>
 800f6e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f6e4:	b9d5      	cbnz	r5, 800f71c <__sfp+0x64>
 800f6e6:	4b16      	ldr	r3, [pc, #88]	; (800f740 <__sfp+0x88>)
 800f6e8:	60e3      	str	r3, [r4, #12]
 800f6ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f6ee:	6665      	str	r5, [r4, #100]	; 0x64
 800f6f0:	f000 f847 	bl	800f782 <__retarget_lock_init_recursive>
 800f6f4:	f7ff ff96 	bl	800f624 <__sfp_lock_release>
 800f6f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f6fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f700:	6025      	str	r5, [r4, #0]
 800f702:	61a5      	str	r5, [r4, #24]
 800f704:	2208      	movs	r2, #8
 800f706:	4629      	mov	r1, r5
 800f708:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f70c:	f7ff fc1c 	bl	800ef48 <memset>
 800f710:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f714:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f718:	4620      	mov	r0, r4
 800f71a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f71c:	3468      	adds	r4, #104	; 0x68
 800f71e:	e7d9      	b.n	800f6d4 <__sfp+0x1c>
 800f720:	2104      	movs	r1, #4
 800f722:	4638      	mov	r0, r7
 800f724:	f7ff ff62 	bl	800f5ec <__sfmoreglue>
 800f728:	4604      	mov	r4, r0
 800f72a:	6030      	str	r0, [r6, #0]
 800f72c:	2800      	cmp	r0, #0
 800f72e:	d1d5      	bne.n	800f6dc <__sfp+0x24>
 800f730:	f7ff ff78 	bl	800f624 <__sfp_lock_release>
 800f734:	230c      	movs	r3, #12
 800f736:	603b      	str	r3, [r7, #0]
 800f738:	e7ee      	b.n	800f718 <__sfp+0x60>
 800f73a:	bf00      	nop
 800f73c:	0801198c 	.word	0x0801198c
 800f740:	ffff0001 	.word	0xffff0001

0800f744 <_fwalk_reent>:
 800f744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f748:	4606      	mov	r6, r0
 800f74a:	4688      	mov	r8, r1
 800f74c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f750:	2700      	movs	r7, #0
 800f752:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f756:	f1b9 0901 	subs.w	r9, r9, #1
 800f75a:	d505      	bpl.n	800f768 <_fwalk_reent+0x24>
 800f75c:	6824      	ldr	r4, [r4, #0]
 800f75e:	2c00      	cmp	r4, #0
 800f760:	d1f7      	bne.n	800f752 <_fwalk_reent+0xe>
 800f762:	4638      	mov	r0, r7
 800f764:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f768:	89ab      	ldrh	r3, [r5, #12]
 800f76a:	2b01      	cmp	r3, #1
 800f76c:	d907      	bls.n	800f77e <_fwalk_reent+0x3a>
 800f76e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f772:	3301      	adds	r3, #1
 800f774:	d003      	beq.n	800f77e <_fwalk_reent+0x3a>
 800f776:	4629      	mov	r1, r5
 800f778:	4630      	mov	r0, r6
 800f77a:	47c0      	blx	r8
 800f77c:	4307      	orrs	r7, r0
 800f77e:	3568      	adds	r5, #104	; 0x68
 800f780:	e7e9      	b.n	800f756 <_fwalk_reent+0x12>

0800f782 <__retarget_lock_init_recursive>:
 800f782:	4770      	bx	lr

0800f784 <__retarget_lock_acquire_recursive>:
 800f784:	4770      	bx	lr

0800f786 <__retarget_lock_release_recursive>:
 800f786:	4770      	bx	lr

0800f788 <__swhatbuf_r>:
 800f788:	b570      	push	{r4, r5, r6, lr}
 800f78a:	460e      	mov	r6, r1
 800f78c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f790:	2900      	cmp	r1, #0
 800f792:	b096      	sub	sp, #88	; 0x58
 800f794:	4614      	mov	r4, r2
 800f796:	461d      	mov	r5, r3
 800f798:	da08      	bge.n	800f7ac <__swhatbuf_r+0x24>
 800f79a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f79e:	2200      	movs	r2, #0
 800f7a0:	602a      	str	r2, [r5, #0]
 800f7a2:	061a      	lsls	r2, r3, #24
 800f7a4:	d410      	bmi.n	800f7c8 <__swhatbuf_r+0x40>
 800f7a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7aa:	e00e      	b.n	800f7ca <__swhatbuf_r+0x42>
 800f7ac:	466a      	mov	r2, sp
 800f7ae:	f000 fd0d 	bl	80101cc <_fstat_r>
 800f7b2:	2800      	cmp	r0, #0
 800f7b4:	dbf1      	blt.n	800f79a <__swhatbuf_r+0x12>
 800f7b6:	9a01      	ldr	r2, [sp, #4]
 800f7b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f7bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f7c0:	425a      	negs	r2, r3
 800f7c2:	415a      	adcs	r2, r3
 800f7c4:	602a      	str	r2, [r5, #0]
 800f7c6:	e7ee      	b.n	800f7a6 <__swhatbuf_r+0x1e>
 800f7c8:	2340      	movs	r3, #64	; 0x40
 800f7ca:	2000      	movs	r0, #0
 800f7cc:	6023      	str	r3, [r4, #0]
 800f7ce:	b016      	add	sp, #88	; 0x58
 800f7d0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f7d4 <__smakebuf_r>:
 800f7d4:	898b      	ldrh	r3, [r1, #12]
 800f7d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f7d8:	079d      	lsls	r5, r3, #30
 800f7da:	4606      	mov	r6, r0
 800f7dc:	460c      	mov	r4, r1
 800f7de:	d507      	bpl.n	800f7f0 <__smakebuf_r+0x1c>
 800f7e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f7e4:	6023      	str	r3, [r4, #0]
 800f7e6:	6123      	str	r3, [r4, #16]
 800f7e8:	2301      	movs	r3, #1
 800f7ea:	6163      	str	r3, [r4, #20]
 800f7ec:	b002      	add	sp, #8
 800f7ee:	bd70      	pop	{r4, r5, r6, pc}
 800f7f0:	ab01      	add	r3, sp, #4
 800f7f2:	466a      	mov	r2, sp
 800f7f4:	f7ff ffc8 	bl	800f788 <__swhatbuf_r>
 800f7f8:	9900      	ldr	r1, [sp, #0]
 800f7fa:	4605      	mov	r5, r0
 800f7fc:	4630      	mov	r0, r6
 800f7fe:	f7ff fc17 	bl	800f030 <_malloc_r>
 800f802:	b948      	cbnz	r0, 800f818 <__smakebuf_r+0x44>
 800f804:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f808:	059a      	lsls	r2, r3, #22
 800f80a:	d4ef      	bmi.n	800f7ec <__smakebuf_r+0x18>
 800f80c:	f023 0303 	bic.w	r3, r3, #3
 800f810:	f043 0302 	orr.w	r3, r3, #2
 800f814:	81a3      	strh	r3, [r4, #12]
 800f816:	e7e3      	b.n	800f7e0 <__smakebuf_r+0xc>
 800f818:	4b0d      	ldr	r3, [pc, #52]	; (800f850 <__smakebuf_r+0x7c>)
 800f81a:	62b3      	str	r3, [r6, #40]	; 0x28
 800f81c:	89a3      	ldrh	r3, [r4, #12]
 800f81e:	6020      	str	r0, [r4, #0]
 800f820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f824:	81a3      	strh	r3, [r4, #12]
 800f826:	9b00      	ldr	r3, [sp, #0]
 800f828:	6163      	str	r3, [r4, #20]
 800f82a:	9b01      	ldr	r3, [sp, #4]
 800f82c:	6120      	str	r0, [r4, #16]
 800f82e:	b15b      	cbz	r3, 800f848 <__smakebuf_r+0x74>
 800f830:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f834:	4630      	mov	r0, r6
 800f836:	f000 fcdb 	bl	80101f0 <_isatty_r>
 800f83a:	b128      	cbz	r0, 800f848 <__smakebuf_r+0x74>
 800f83c:	89a3      	ldrh	r3, [r4, #12]
 800f83e:	f023 0303 	bic.w	r3, r3, #3
 800f842:	f043 0301 	orr.w	r3, r3, #1
 800f846:	81a3      	strh	r3, [r4, #12]
 800f848:	89a0      	ldrh	r0, [r4, #12]
 800f84a:	4305      	orrs	r5, r0
 800f84c:	81a5      	strh	r5, [r4, #12]
 800f84e:	e7cd      	b.n	800f7ec <__smakebuf_r+0x18>
 800f850:	0800f5e1 	.word	0x0800f5e1

0800f854 <__malloc_lock>:
 800f854:	4801      	ldr	r0, [pc, #4]	; (800f85c <__malloc_lock+0x8>)
 800f856:	f7ff bf95 	b.w	800f784 <__retarget_lock_acquire_recursive>
 800f85a:	bf00      	nop
 800f85c:	20013968 	.word	0x20013968

0800f860 <__malloc_unlock>:
 800f860:	4801      	ldr	r0, [pc, #4]	; (800f868 <__malloc_unlock+0x8>)
 800f862:	f7ff bf90 	b.w	800f786 <__retarget_lock_release_recursive>
 800f866:	bf00      	nop
 800f868:	20013968 	.word	0x20013968

0800f86c <__ssputs_r>:
 800f86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f870:	688e      	ldr	r6, [r1, #8]
 800f872:	429e      	cmp	r6, r3
 800f874:	4682      	mov	sl, r0
 800f876:	460c      	mov	r4, r1
 800f878:	4690      	mov	r8, r2
 800f87a:	461f      	mov	r7, r3
 800f87c:	d838      	bhi.n	800f8f0 <__ssputs_r+0x84>
 800f87e:	898a      	ldrh	r2, [r1, #12]
 800f880:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f884:	d032      	beq.n	800f8ec <__ssputs_r+0x80>
 800f886:	6825      	ldr	r5, [r4, #0]
 800f888:	6909      	ldr	r1, [r1, #16]
 800f88a:	eba5 0901 	sub.w	r9, r5, r1
 800f88e:	6965      	ldr	r5, [r4, #20]
 800f890:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f894:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f898:	3301      	adds	r3, #1
 800f89a:	444b      	add	r3, r9
 800f89c:	106d      	asrs	r5, r5, #1
 800f89e:	429d      	cmp	r5, r3
 800f8a0:	bf38      	it	cc
 800f8a2:	461d      	movcc	r5, r3
 800f8a4:	0553      	lsls	r3, r2, #21
 800f8a6:	d531      	bpl.n	800f90c <__ssputs_r+0xa0>
 800f8a8:	4629      	mov	r1, r5
 800f8aa:	f7ff fbc1 	bl	800f030 <_malloc_r>
 800f8ae:	4606      	mov	r6, r0
 800f8b0:	b950      	cbnz	r0, 800f8c8 <__ssputs_r+0x5c>
 800f8b2:	230c      	movs	r3, #12
 800f8b4:	f8ca 3000 	str.w	r3, [sl]
 800f8b8:	89a3      	ldrh	r3, [r4, #12]
 800f8ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8be:	81a3      	strh	r3, [r4, #12]
 800f8c0:	f04f 30ff 	mov.w	r0, #4294967295
 800f8c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8c8:	6921      	ldr	r1, [r4, #16]
 800f8ca:	464a      	mov	r2, r9
 800f8cc:	f7ff fb2e 	bl	800ef2c <memcpy>
 800f8d0:	89a3      	ldrh	r3, [r4, #12]
 800f8d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f8d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f8da:	81a3      	strh	r3, [r4, #12]
 800f8dc:	6126      	str	r6, [r4, #16]
 800f8de:	6165      	str	r5, [r4, #20]
 800f8e0:	444e      	add	r6, r9
 800f8e2:	eba5 0509 	sub.w	r5, r5, r9
 800f8e6:	6026      	str	r6, [r4, #0]
 800f8e8:	60a5      	str	r5, [r4, #8]
 800f8ea:	463e      	mov	r6, r7
 800f8ec:	42be      	cmp	r6, r7
 800f8ee:	d900      	bls.n	800f8f2 <__ssputs_r+0x86>
 800f8f0:	463e      	mov	r6, r7
 800f8f2:	6820      	ldr	r0, [r4, #0]
 800f8f4:	4632      	mov	r2, r6
 800f8f6:	4641      	mov	r1, r8
 800f8f8:	f000 fc9c 	bl	8010234 <memmove>
 800f8fc:	68a3      	ldr	r3, [r4, #8]
 800f8fe:	1b9b      	subs	r3, r3, r6
 800f900:	60a3      	str	r3, [r4, #8]
 800f902:	6823      	ldr	r3, [r4, #0]
 800f904:	4433      	add	r3, r6
 800f906:	6023      	str	r3, [r4, #0]
 800f908:	2000      	movs	r0, #0
 800f90a:	e7db      	b.n	800f8c4 <__ssputs_r+0x58>
 800f90c:	462a      	mov	r2, r5
 800f90e:	f000 fcab 	bl	8010268 <_realloc_r>
 800f912:	4606      	mov	r6, r0
 800f914:	2800      	cmp	r0, #0
 800f916:	d1e1      	bne.n	800f8dc <__ssputs_r+0x70>
 800f918:	6921      	ldr	r1, [r4, #16]
 800f91a:	4650      	mov	r0, sl
 800f91c:	f7ff fb1c 	bl	800ef58 <_free_r>
 800f920:	e7c7      	b.n	800f8b2 <__ssputs_r+0x46>
	...

0800f924 <_svfiprintf_r>:
 800f924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f928:	4698      	mov	r8, r3
 800f92a:	898b      	ldrh	r3, [r1, #12]
 800f92c:	061b      	lsls	r3, r3, #24
 800f92e:	b09d      	sub	sp, #116	; 0x74
 800f930:	4607      	mov	r7, r0
 800f932:	460d      	mov	r5, r1
 800f934:	4614      	mov	r4, r2
 800f936:	d50e      	bpl.n	800f956 <_svfiprintf_r+0x32>
 800f938:	690b      	ldr	r3, [r1, #16]
 800f93a:	b963      	cbnz	r3, 800f956 <_svfiprintf_r+0x32>
 800f93c:	2140      	movs	r1, #64	; 0x40
 800f93e:	f7ff fb77 	bl	800f030 <_malloc_r>
 800f942:	6028      	str	r0, [r5, #0]
 800f944:	6128      	str	r0, [r5, #16]
 800f946:	b920      	cbnz	r0, 800f952 <_svfiprintf_r+0x2e>
 800f948:	230c      	movs	r3, #12
 800f94a:	603b      	str	r3, [r7, #0]
 800f94c:	f04f 30ff 	mov.w	r0, #4294967295
 800f950:	e0d1      	b.n	800faf6 <_svfiprintf_r+0x1d2>
 800f952:	2340      	movs	r3, #64	; 0x40
 800f954:	616b      	str	r3, [r5, #20]
 800f956:	2300      	movs	r3, #0
 800f958:	9309      	str	r3, [sp, #36]	; 0x24
 800f95a:	2320      	movs	r3, #32
 800f95c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f960:	f8cd 800c 	str.w	r8, [sp, #12]
 800f964:	2330      	movs	r3, #48	; 0x30
 800f966:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fb10 <_svfiprintf_r+0x1ec>
 800f96a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f96e:	f04f 0901 	mov.w	r9, #1
 800f972:	4623      	mov	r3, r4
 800f974:	469a      	mov	sl, r3
 800f976:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f97a:	b10a      	cbz	r2, 800f980 <_svfiprintf_r+0x5c>
 800f97c:	2a25      	cmp	r2, #37	; 0x25
 800f97e:	d1f9      	bne.n	800f974 <_svfiprintf_r+0x50>
 800f980:	ebba 0b04 	subs.w	fp, sl, r4
 800f984:	d00b      	beq.n	800f99e <_svfiprintf_r+0x7a>
 800f986:	465b      	mov	r3, fp
 800f988:	4622      	mov	r2, r4
 800f98a:	4629      	mov	r1, r5
 800f98c:	4638      	mov	r0, r7
 800f98e:	f7ff ff6d 	bl	800f86c <__ssputs_r>
 800f992:	3001      	adds	r0, #1
 800f994:	f000 80aa 	beq.w	800faec <_svfiprintf_r+0x1c8>
 800f998:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f99a:	445a      	add	r2, fp
 800f99c:	9209      	str	r2, [sp, #36]	; 0x24
 800f99e:	f89a 3000 	ldrb.w	r3, [sl]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	f000 80a2 	beq.w	800faec <_svfiprintf_r+0x1c8>
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	f04f 32ff 	mov.w	r2, #4294967295
 800f9ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f9b2:	f10a 0a01 	add.w	sl, sl, #1
 800f9b6:	9304      	str	r3, [sp, #16]
 800f9b8:	9307      	str	r3, [sp, #28]
 800f9ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f9be:	931a      	str	r3, [sp, #104]	; 0x68
 800f9c0:	4654      	mov	r4, sl
 800f9c2:	2205      	movs	r2, #5
 800f9c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9c8:	4851      	ldr	r0, [pc, #324]	; (800fb10 <_svfiprintf_r+0x1ec>)
 800f9ca:	f7f0 fc19 	bl	8000200 <memchr>
 800f9ce:	9a04      	ldr	r2, [sp, #16]
 800f9d0:	b9d8      	cbnz	r0, 800fa0a <_svfiprintf_r+0xe6>
 800f9d2:	06d0      	lsls	r0, r2, #27
 800f9d4:	bf44      	itt	mi
 800f9d6:	2320      	movmi	r3, #32
 800f9d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f9dc:	0711      	lsls	r1, r2, #28
 800f9de:	bf44      	itt	mi
 800f9e0:	232b      	movmi	r3, #43	; 0x2b
 800f9e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f9e6:	f89a 3000 	ldrb.w	r3, [sl]
 800f9ea:	2b2a      	cmp	r3, #42	; 0x2a
 800f9ec:	d015      	beq.n	800fa1a <_svfiprintf_r+0xf6>
 800f9ee:	9a07      	ldr	r2, [sp, #28]
 800f9f0:	4654      	mov	r4, sl
 800f9f2:	2000      	movs	r0, #0
 800f9f4:	f04f 0c0a 	mov.w	ip, #10
 800f9f8:	4621      	mov	r1, r4
 800f9fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f9fe:	3b30      	subs	r3, #48	; 0x30
 800fa00:	2b09      	cmp	r3, #9
 800fa02:	d94e      	bls.n	800faa2 <_svfiprintf_r+0x17e>
 800fa04:	b1b0      	cbz	r0, 800fa34 <_svfiprintf_r+0x110>
 800fa06:	9207      	str	r2, [sp, #28]
 800fa08:	e014      	b.n	800fa34 <_svfiprintf_r+0x110>
 800fa0a:	eba0 0308 	sub.w	r3, r0, r8
 800fa0e:	fa09 f303 	lsl.w	r3, r9, r3
 800fa12:	4313      	orrs	r3, r2
 800fa14:	9304      	str	r3, [sp, #16]
 800fa16:	46a2      	mov	sl, r4
 800fa18:	e7d2      	b.n	800f9c0 <_svfiprintf_r+0x9c>
 800fa1a:	9b03      	ldr	r3, [sp, #12]
 800fa1c:	1d19      	adds	r1, r3, #4
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	9103      	str	r1, [sp, #12]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	bfbb      	ittet	lt
 800fa26:	425b      	neglt	r3, r3
 800fa28:	f042 0202 	orrlt.w	r2, r2, #2
 800fa2c:	9307      	strge	r3, [sp, #28]
 800fa2e:	9307      	strlt	r3, [sp, #28]
 800fa30:	bfb8      	it	lt
 800fa32:	9204      	strlt	r2, [sp, #16]
 800fa34:	7823      	ldrb	r3, [r4, #0]
 800fa36:	2b2e      	cmp	r3, #46	; 0x2e
 800fa38:	d10c      	bne.n	800fa54 <_svfiprintf_r+0x130>
 800fa3a:	7863      	ldrb	r3, [r4, #1]
 800fa3c:	2b2a      	cmp	r3, #42	; 0x2a
 800fa3e:	d135      	bne.n	800faac <_svfiprintf_r+0x188>
 800fa40:	9b03      	ldr	r3, [sp, #12]
 800fa42:	1d1a      	adds	r2, r3, #4
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	9203      	str	r2, [sp, #12]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	bfb8      	it	lt
 800fa4c:	f04f 33ff 	movlt.w	r3, #4294967295
 800fa50:	3402      	adds	r4, #2
 800fa52:	9305      	str	r3, [sp, #20]
 800fa54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fb20 <_svfiprintf_r+0x1fc>
 800fa58:	7821      	ldrb	r1, [r4, #0]
 800fa5a:	2203      	movs	r2, #3
 800fa5c:	4650      	mov	r0, sl
 800fa5e:	f7f0 fbcf 	bl	8000200 <memchr>
 800fa62:	b140      	cbz	r0, 800fa76 <_svfiprintf_r+0x152>
 800fa64:	2340      	movs	r3, #64	; 0x40
 800fa66:	eba0 000a 	sub.w	r0, r0, sl
 800fa6a:	fa03 f000 	lsl.w	r0, r3, r0
 800fa6e:	9b04      	ldr	r3, [sp, #16]
 800fa70:	4303      	orrs	r3, r0
 800fa72:	3401      	adds	r4, #1
 800fa74:	9304      	str	r3, [sp, #16]
 800fa76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa7a:	4826      	ldr	r0, [pc, #152]	; (800fb14 <_svfiprintf_r+0x1f0>)
 800fa7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fa80:	2206      	movs	r2, #6
 800fa82:	f7f0 fbbd 	bl	8000200 <memchr>
 800fa86:	2800      	cmp	r0, #0
 800fa88:	d038      	beq.n	800fafc <_svfiprintf_r+0x1d8>
 800fa8a:	4b23      	ldr	r3, [pc, #140]	; (800fb18 <_svfiprintf_r+0x1f4>)
 800fa8c:	bb1b      	cbnz	r3, 800fad6 <_svfiprintf_r+0x1b2>
 800fa8e:	9b03      	ldr	r3, [sp, #12]
 800fa90:	3307      	adds	r3, #7
 800fa92:	f023 0307 	bic.w	r3, r3, #7
 800fa96:	3308      	adds	r3, #8
 800fa98:	9303      	str	r3, [sp, #12]
 800fa9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa9c:	4433      	add	r3, r6
 800fa9e:	9309      	str	r3, [sp, #36]	; 0x24
 800faa0:	e767      	b.n	800f972 <_svfiprintf_r+0x4e>
 800faa2:	fb0c 3202 	mla	r2, ip, r2, r3
 800faa6:	460c      	mov	r4, r1
 800faa8:	2001      	movs	r0, #1
 800faaa:	e7a5      	b.n	800f9f8 <_svfiprintf_r+0xd4>
 800faac:	2300      	movs	r3, #0
 800faae:	3401      	adds	r4, #1
 800fab0:	9305      	str	r3, [sp, #20]
 800fab2:	4619      	mov	r1, r3
 800fab4:	f04f 0c0a 	mov.w	ip, #10
 800fab8:	4620      	mov	r0, r4
 800faba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fabe:	3a30      	subs	r2, #48	; 0x30
 800fac0:	2a09      	cmp	r2, #9
 800fac2:	d903      	bls.n	800facc <_svfiprintf_r+0x1a8>
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d0c5      	beq.n	800fa54 <_svfiprintf_r+0x130>
 800fac8:	9105      	str	r1, [sp, #20]
 800faca:	e7c3      	b.n	800fa54 <_svfiprintf_r+0x130>
 800facc:	fb0c 2101 	mla	r1, ip, r1, r2
 800fad0:	4604      	mov	r4, r0
 800fad2:	2301      	movs	r3, #1
 800fad4:	e7f0      	b.n	800fab8 <_svfiprintf_r+0x194>
 800fad6:	ab03      	add	r3, sp, #12
 800fad8:	9300      	str	r3, [sp, #0]
 800fada:	462a      	mov	r2, r5
 800fadc:	4b0f      	ldr	r3, [pc, #60]	; (800fb1c <_svfiprintf_r+0x1f8>)
 800fade:	a904      	add	r1, sp, #16
 800fae0:	4638      	mov	r0, r7
 800fae2:	f3af 8000 	nop.w
 800fae6:	1c42      	adds	r2, r0, #1
 800fae8:	4606      	mov	r6, r0
 800faea:	d1d6      	bne.n	800fa9a <_svfiprintf_r+0x176>
 800faec:	89ab      	ldrh	r3, [r5, #12]
 800faee:	065b      	lsls	r3, r3, #25
 800faf0:	f53f af2c 	bmi.w	800f94c <_svfiprintf_r+0x28>
 800faf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800faf6:	b01d      	add	sp, #116	; 0x74
 800faf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fafc:	ab03      	add	r3, sp, #12
 800fafe:	9300      	str	r3, [sp, #0]
 800fb00:	462a      	mov	r2, r5
 800fb02:	4b06      	ldr	r3, [pc, #24]	; (800fb1c <_svfiprintf_r+0x1f8>)
 800fb04:	a904      	add	r1, sp, #16
 800fb06:	4638      	mov	r0, r7
 800fb08:	f000 f9d4 	bl	800feb4 <_printf_i>
 800fb0c:	e7eb      	b.n	800fae6 <_svfiprintf_r+0x1c2>
 800fb0e:	bf00      	nop
 800fb10:	080119f0 	.word	0x080119f0
 800fb14:	080119fa 	.word	0x080119fa
 800fb18:	00000000 	.word	0x00000000
 800fb1c:	0800f86d 	.word	0x0800f86d
 800fb20:	080119f6 	.word	0x080119f6

0800fb24 <__sfputc_r>:
 800fb24:	6893      	ldr	r3, [r2, #8]
 800fb26:	3b01      	subs	r3, #1
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	b410      	push	{r4}
 800fb2c:	6093      	str	r3, [r2, #8]
 800fb2e:	da08      	bge.n	800fb42 <__sfputc_r+0x1e>
 800fb30:	6994      	ldr	r4, [r2, #24]
 800fb32:	42a3      	cmp	r3, r4
 800fb34:	db01      	blt.n	800fb3a <__sfputc_r+0x16>
 800fb36:	290a      	cmp	r1, #10
 800fb38:	d103      	bne.n	800fb42 <__sfputc_r+0x1e>
 800fb3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb3e:	f7ff bba9 	b.w	800f294 <__swbuf_r>
 800fb42:	6813      	ldr	r3, [r2, #0]
 800fb44:	1c58      	adds	r0, r3, #1
 800fb46:	6010      	str	r0, [r2, #0]
 800fb48:	7019      	strb	r1, [r3, #0]
 800fb4a:	4608      	mov	r0, r1
 800fb4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb50:	4770      	bx	lr

0800fb52 <__sfputs_r>:
 800fb52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb54:	4606      	mov	r6, r0
 800fb56:	460f      	mov	r7, r1
 800fb58:	4614      	mov	r4, r2
 800fb5a:	18d5      	adds	r5, r2, r3
 800fb5c:	42ac      	cmp	r4, r5
 800fb5e:	d101      	bne.n	800fb64 <__sfputs_r+0x12>
 800fb60:	2000      	movs	r0, #0
 800fb62:	e007      	b.n	800fb74 <__sfputs_r+0x22>
 800fb64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb68:	463a      	mov	r2, r7
 800fb6a:	4630      	mov	r0, r6
 800fb6c:	f7ff ffda 	bl	800fb24 <__sfputc_r>
 800fb70:	1c43      	adds	r3, r0, #1
 800fb72:	d1f3      	bne.n	800fb5c <__sfputs_r+0xa>
 800fb74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fb78 <_vfiprintf_r>:
 800fb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb7c:	460d      	mov	r5, r1
 800fb7e:	b09d      	sub	sp, #116	; 0x74
 800fb80:	4614      	mov	r4, r2
 800fb82:	4698      	mov	r8, r3
 800fb84:	4606      	mov	r6, r0
 800fb86:	b118      	cbz	r0, 800fb90 <_vfiprintf_r+0x18>
 800fb88:	6983      	ldr	r3, [r0, #24]
 800fb8a:	b90b      	cbnz	r3, 800fb90 <_vfiprintf_r+0x18>
 800fb8c:	f7ff fd5c 	bl	800f648 <__sinit>
 800fb90:	4b89      	ldr	r3, [pc, #548]	; (800fdb8 <_vfiprintf_r+0x240>)
 800fb92:	429d      	cmp	r5, r3
 800fb94:	d11b      	bne.n	800fbce <_vfiprintf_r+0x56>
 800fb96:	6875      	ldr	r5, [r6, #4]
 800fb98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fb9a:	07d9      	lsls	r1, r3, #31
 800fb9c:	d405      	bmi.n	800fbaa <_vfiprintf_r+0x32>
 800fb9e:	89ab      	ldrh	r3, [r5, #12]
 800fba0:	059a      	lsls	r2, r3, #22
 800fba2:	d402      	bmi.n	800fbaa <_vfiprintf_r+0x32>
 800fba4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fba6:	f7ff fded 	bl	800f784 <__retarget_lock_acquire_recursive>
 800fbaa:	89ab      	ldrh	r3, [r5, #12]
 800fbac:	071b      	lsls	r3, r3, #28
 800fbae:	d501      	bpl.n	800fbb4 <_vfiprintf_r+0x3c>
 800fbb0:	692b      	ldr	r3, [r5, #16]
 800fbb2:	b9eb      	cbnz	r3, 800fbf0 <_vfiprintf_r+0x78>
 800fbb4:	4629      	mov	r1, r5
 800fbb6:	4630      	mov	r0, r6
 800fbb8:	f7ff fbbe 	bl	800f338 <__swsetup_r>
 800fbbc:	b1c0      	cbz	r0, 800fbf0 <_vfiprintf_r+0x78>
 800fbbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fbc0:	07dc      	lsls	r4, r3, #31
 800fbc2:	d50e      	bpl.n	800fbe2 <_vfiprintf_r+0x6a>
 800fbc4:	f04f 30ff 	mov.w	r0, #4294967295
 800fbc8:	b01d      	add	sp, #116	; 0x74
 800fbca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbce:	4b7b      	ldr	r3, [pc, #492]	; (800fdbc <_vfiprintf_r+0x244>)
 800fbd0:	429d      	cmp	r5, r3
 800fbd2:	d101      	bne.n	800fbd8 <_vfiprintf_r+0x60>
 800fbd4:	68b5      	ldr	r5, [r6, #8]
 800fbd6:	e7df      	b.n	800fb98 <_vfiprintf_r+0x20>
 800fbd8:	4b79      	ldr	r3, [pc, #484]	; (800fdc0 <_vfiprintf_r+0x248>)
 800fbda:	429d      	cmp	r5, r3
 800fbdc:	bf08      	it	eq
 800fbde:	68f5      	ldreq	r5, [r6, #12]
 800fbe0:	e7da      	b.n	800fb98 <_vfiprintf_r+0x20>
 800fbe2:	89ab      	ldrh	r3, [r5, #12]
 800fbe4:	0598      	lsls	r0, r3, #22
 800fbe6:	d4ed      	bmi.n	800fbc4 <_vfiprintf_r+0x4c>
 800fbe8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fbea:	f7ff fdcc 	bl	800f786 <__retarget_lock_release_recursive>
 800fbee:	e7e9      	b.n	800fbc4 <_vfiprintf_r+0x4c>
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	9309      	str	r3, [sp, #36]	; 0x24
 800fbf4:	2320      	movs	r3, #32
 800fbf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fbfa:	f8cd 800c 	str.w	r8, [sp, #12]
 800fbfe:	2330      	movs	r3, #48	; 0x30
 800fc00:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fdc4 <_vfiprintf_r+0x24c>
 800fc04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fc08:	f04f 0901 	mov.w	r9, #1
 800fc0c:	4623      	mov	r3, r4
 800fc0e:	469a      	mov	sl, r3
 800fc10:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc14:	b10a      	cbz	r2, 800fc1a <_vfiprintf_r+0xa2>
 800fc16:	2a25      	cmp	r2, #37	; 0x25
 800fc18:	d1f9      	bne.n	800fc0e <_vfiprintf_r+0x96>
 800fc1a:	ebba 0b04 	subs.w	fp, sl, r4
 800fc1e:	d00b      	beq.n	800fc38 <_vfiprintf_r+0xc0>
 800fc20:	465b      	mov	r3, fp
 800fc22:	4622      	mov	r2, r4
 800fc24:	4629      	mov	r1, r5
 800fc26:	4630      	mov	r0, r6
 800fc28:	f7ff ff93 	bl	800fb52 <__sfputs_r>
 800fc2c:	3001      	adds	r0, #1
 800fc2e:	f000 80aa 	beq.w	800fd86 <_vfiprintf_r+0x20e>
 800fc32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc34:	445a      	add	r2, fp
 800fc36:	9209      	str	r2, [sp, #36]	; 0x24
 800fc38:	f89a 3000 	ldrb.w	r3, [sl]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	f000 80a2 	beq.w	800fd86 <_vfiprintf_r+0x20e>
 800fc42:	2300      	movs	r3, #0
 800fc44:	f04f 32ff 	mov.w	r2, #4294967295
 800fc48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc4c:	f10a 0a01 	add.w	sl, sl, #1
 800fc50:	9304      	str	r3, [sp, #16]
 800fc52:	9307      	str	r3, [sp, #28]
 800fc54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fc58:	931a      	str	r3, [sp, #104]	; 0x68
 800fc5a:	4654      	mov	r4, sl
 800fc5c:	2205      	movs	r2, #5
 800fc5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc62:	4858      	ldr	r0, [pc, #352]	; (800fdc4 <_vfiprintf_r+0x24c>)
 800fc64:	f7f0 facc 	bl	8000200 <memchr>
 800fc68:	9a04      	ldr	r2, [sp, #16]
 800fc6a:	b9d8      	cbnz	r0, 800fca4 <_vfiprintf_r+0x12c>
 800fc6c:	06d1      	lsls	r1, r2, #27
 800fc6e:	bf44      	itt	mi
 800fc70:	2320      	movmi	r3, #32
 800fc72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc76:	0713      	lsls	r3, r2, #28
 800fc78:	bf44      	itt	mi
 800fc7a:	232b      	movmi	r3, #43	; 0x2b
 800fc7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc80:	f89a 3000 	ldrb.w	r3, [sl]
 800fc84:	2b2a      	cmp	r3, #42	; 0x2a
 800fc86:	d015      	beq.n	800fcb4 <_vfiprintf_r+0x13c>
 800fc88:	9a07      	ldr	r2, [sp, #28]
 800fc8a:	4654      	mov	r4, sl
 800fc8c:	2000      	movs	r0, #0
 800fc8e:	f04f 0c0a 	mov.w	ip, #10
 800fc92:	4621      	mov	r1, r4
 800fc94:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc98:	3b30      	subs	r3, #48	; 0x30
 800fc9a:	2b09      	cmp	r3, #9
 800fc9c:	d94e      	bls.n	800fd3c <_vfiprintf_r+0x1c4>
 800fc9e:	b1b0      	cbz	r0, 800fcce <_vfiprintf_r+0x156>
 800fca0:	9207      	str	r2, [sp, #28]
 800fca2:	e014      	b.n	800fcce <_vfiprintf_r+0x156>
 800fca4:	eba0 0308 	sub.w	r3, r0, r8
 800fca8:	fa09 f303 	lsl.w	r3, r9, r3
 800fcac:	4313      	orrs	r3, r2
 800fcae:	9304      	str	r3, [sp, #16]
 800fcb0:	46a2      	mov	sl, r4
 800fcb2:	e7d2      	b.n	800fc5a <_vfiprintf_r+0xe2>
 800fcb4:	9b03      	ldr	r3, [sp, #12]
 800fcb6:	1d19      	adds	r1, r3, #4
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	9103      	str	r1, [sp, #12]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	bfbb      	ittet	lt
 800fcc0:	425b      	neglt	r3, r3
 800fcc2:	f042 0202 	orrlt.w	r2, r2, #2
 800fcc6:	9307      	strge	r3, [sp, #28]
 800fcc8:	9307      	strlt	r3, [sp, #28]
 800fcca:	bfb8      	it	lt
 800fccc:	9204      	strlt	r2, [sp, #16]
 800fcce:	7823      	ldrb	r3, [r4, #0]
 800fcd0:	2b2e      	cmp	r3, #46	; 0x2e
 800fcd2:	d10c      	bne.n	800fcee <_vfiprintf_r+0x176>
 800fcd4:	7863      	ldrb	r3, [r4, #1]
 800fcd6:	2b2a      	cmp	r3, #42	; 0x2a
 800fcd8:	d135      	bne.n	800fd46 <_vfiprintf_r+0x1ce>
 800fcda:	9b03      	ldr	r3, [sp, #12]
 800fcdc:	1d1a      	adds	r2, r3, #4
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	9203      	str	r2, [sp, #12]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	bfb8      	it	lt
 800fce6:	f04f 33ff 	movlt.w	r3, #4294967295
 800fcea:	3402      	adds	r4, #2
 800fcec:	9305      	str	r3, [sp, #20]
 800fcee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fdd4 <_vfiprintf_r+0x25c>
 800fcf2:	7821      	ldrb	r1, [r4, #0]
 800fcf4:	2203      	movs	r2, #3
 800fcf6:	4650      	mov	r0, sl
 800fcf8:	f7f0 fa82 	bl	8000200 <memchr>
 800fcfc:	b140      	cbz	r0, 800fd10 <_vfiprintf_r+0x198>
 800fcfe:	2340      	movs	r3, #64	; 0x40
 800fd00:	eba0 000a 	sub.w	r0, r0, sl
 800fd04:	fa03 f000 	lsl.w	r0, r3, r0
 800fd08:	9b04      	ldr	r3, [sp, #16]
 800fd0a:	4303      	orrs	r3, r0
 800fd0c:	3401      	adds	r4, #1
 800fd0e:	9304      	str	r3, [sp, #16]
 800fd10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd14:	482c      	ldr	r0, [pc, #176]	; (800fdc8 <_vfiprintf_r+0x250>)
 800fd16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fd1a:	2206      	movs	r2, #6
 800fd1c:	f7f0 fa70 	bl	8000200 <memchr>
 800fd20:	2800      	cmp	r0, #0
 800fd22:	d03f      	beq.n	800fda4 <_vfiprintf_r+0x22c>
 800fd24:	4b29      	ldr	r3, [pc, #164]	; (800fdcc <_vfiprintf_r+0x254>)
 800fd26:	bb1b      	cbnz	r3, 800fd70 <_vfiprintf_r+0x1f8>
 800fd28:	9b03      	ldr	r3, [sp, #12]
 800fd2a:	3307      	adds	r3, #7
 800fd2c:	f023 0307 	bic.w	r3, r3, #7
 800fd30:	3308      	adds	r3, #8
 800fd32:	9303      	str	r3, [sp, #12]
 800fd34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd36:	443b      	add	r3, r7
 800fd38:	9309      	str	r3, [sp, #36]	; 0x24
 800fd3a:	e767      	b.n	800fc0c <_vfiprintf_r+0x94>
 800fd3c:	fb0c 3202 	mla	r2, ip, r2, r3
 800fd40:	460c      	mov	r4, r1
 800fd42:	2001      	movs	r0, #1
 800fd44:	e7a5      	b.n	800fc92 <_vfiprintf_r+0x11a>
 800fd46:	2300      	movs	r3, #0
 800fd48:	3401      	adds	r4, #1
 800fd4a:	9305      	str	r3, [sp, #20]
 800fd4c:	4619      	mov	r1, r3
 800fd4e:	f04f 0c0a 	mov.w	ip, #10
 800fd52:	4620      	mov	r0, r4
 800fd54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd58:	3a30      	subs	r2, #48	; 0x30
 800fd5a:	2a09      	cmp	r2, #9
 800fd5c:	d903      	bls.n	800fd66 <_vfiprintf_r+0x1ee>
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d0c5      	beq.n	800fcee <_vfiprintf_r+0x176>
 800fd62:	9105      	str	r1, [sp, #20]
 800fd64:	e7c3      	b.n	800fcee <_vfiprintf_r+0x176>
 800fd66:	fb0c 2101 	mla	r1, ip, r1, r2
 800fd6a:	4604      	mov	r4, r0
 800fd6c:	2301      	movs	r3, #1
 800fd6e:	e7f0      	b.n	800fd52 <_vfiprintf_r+0x1da>
 800fd70:	ab03      	add	r3, sp, #12
 800fd72:	9300      	str	r3, [sp, #0]
 800fd74:	462a      	mov	r2, r5
 800fd76:	4b16      	ldr	r3, [pc, #88]	; (800fdd0 <_vfiprintf_r+0x258>)
 800fd78:	a904      	add	r1, sp, #16
 800fd7a:	4630      	mov	r0, r6
 800fd7c:	f3af 8000 	nop.w
 800fd80:	4607      	mov	r7, r0
 800fd82:	1c78      	adds	r0, r7, #1
 800fd84:	d1d6      	bne.n	800fd34 <_vfiprintf_r+0x1bc>
 800fd86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fd88:	07d9      	lsls	r1, r3, #31
 800fd8a:	d405      	bmi.n	800fd98 <_vfiprintf_r+0x220>
 800fd8c:	89ab      	ldrh	r3, [r5, #12]
 800fd8e:	059a      	lsls	r2, r3, #22
 800fd90:	d402      	bmi.n	800fd98 <_vfiprintf_r+0x220>
 800fd92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fd94:	f7ff fcf7 	bl	800f786 <__retarget_lock_release_recursive>
 800fd98:	89ab      	ldrh	r3, [r5, #12]
 800fd9a:	065b      	lsls	r3, r3, #25
 800fd9c:	f53f af12 	bmi.w	800fbc4 <_vfiprintf_r+0x4c>
 800fda0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fda2:	e711      	b.n	800fbc8 <_vfiprintf_r+0x50>
 800fda4:	ab03      	add	r3, sp, #12
 800fda6:	9300      	str	r3, [sp, #0]
 800fda8:	462a      	mov	r2, r5
 800fdaa:	4b09      	ldr	r3, [pc, #36]	; (800fdd0 <_vfiprintf_r+0x258>)
 800fdac:	a904      	add	r1, sp, #16
 800fdae:	4630      	mov	r0, r6
 800fdb0:	f000 f880 	bl	800feb4 <_printf_i>
 800fdb4:	e7e4      	b.n	800fd80 <_vfiprintf_r+0x208>
 800fdb6:	bf00      	nop
 800fdb8:	080119b0 	.word	0x080119b0
 800fdbc:	080119d0 	.word	0x080119d0
 800fdc0:	08011990 	.word	0x08011990
 800fdc4:	080119f0 	.word	0x080119f0
 800fdc8:	080119fa 	.word	0x080119fa
 800fdcc:	00000000 	.word	0x00000000
 800fdd0:	0800fb53 	.word	0x0800fb53
 800fdd4:	080119f6 	.word	0x080119f6

0800fdd8 <_printf_common>:
 800fdd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fddc:	4616      	mov	r6, r2
 800fdde:	4699      	mov	r9, r3
 800fde0:	688a      	ldr	r2, [r1, #8]
 800fde2:	690b      	ldr	r3, [r1, #16]
 800fde4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fde8:	4293      	cmp	r3, r2
 800fdea:	bfb8      	it	lt
 800fdec:	4613      	movlt	r3, r2
 800fdee:	6033      	str	r3, [r6, #0]
 800fdf0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fdf4:	4607      	mov	r7, r0
 800fdf6:	460c      	mov	r4, r1
 800fdf8:	b10a      	cbz	r2, 800fdfe <_printf_common+0x26>
 800fdfa:	3301      	adds	r3, #1
 800fdfc:	6033      	str	r3, [r6, #0]
 800fdfe:	6823      	ldr	r3, [r4, #0]
 800fe00:	0699      	lsls	r1, r3, #26
 800fe02:	bf42      	ittt	mi
 800fe04:	6833      	ldrmi	r3, [r6, #0]
 800fe06:	3302      	addmi	r3, #2
 800fe08:	6033      	strmi	r3, [r6, #0]
 800fe0a:	6825      	ldr	r5, [r4, #0]
 800fe0c:	f015 0506 	ands.w	r5, r5, #6
 800fe10:	d106      	bne.n	800fe20 <_printf_common+0x48>
 800fe12:	f104 0a19 	add.w	sl, r4, #25
 800fe16:	68e3      	ldr	r3, [r4, #12]
 800fe18:	6832      	ldr	r2, [r6, #0]
 800fe1a:	1a9b      	subs	r3, r3, r2
 800fe1c:	42ab      	cmp	r3, r5
 800fe1e:	dc26      	bgt.n	800fe6e <_printf_common+0x96>
 800fe20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fe24:	1e13      	subs	r3, r2, #0
 800fe26:	6822      	ldr	r2, [r4, #0]
 800fe28:	bf18      	it	ne
 800fe2a:	2301      	movne	r3, #1
 800fe2c:	0692      	lsls	r2, r2, #26
 800fe2e:	d42b      	bmi.n	800fe88 <_printf_common+0xb0>
 800fe30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fe34:	4649      	mov	r1, r9
 800fe36:	4638      	mov	r0, r7
 800fe38:	47c0      	blx	r8
 800fe3a:	3001      	adds	r0, #1
 800fe3c:	d01e      	beq.n	800fe7c <_printf_common+0xa4>
 800fe3e:	6823      	ldr	r3, [r4, #0]
 800fe40:	68e5      	ldr	r5, [r4, #12]
 800fe42:	6832      	ldr	r2, [r6, #0]
 800fe44:	f003 0306 	and.w	r3, r3, #6
 800fe48:	2b04      	cmp	r3, #4
 800fe4a:	bf08      	it	eq
 800fe4c:	1aad      	subeq	r5, r5, r2
 800fe4e:	68a3      	ldr	r3, [r4, #8]
 800fe50:	6922      	ldr	r2, [r4, #16]
 800fe52:	bf0c      	ite	eq
 800fe54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fe58:	2500      	movne	r5, #0
 800fe5a:	4293      	cmp	r3, r2
 800fe5c:	bfc4      	itt	gt
 800fe5e:	1a9b      	subgt	r3, r3, r2
 800fe60:	18ed      	addgt	r5, r5, r3
 800fe62:	2600      	movs	r6, #0
 800fe64:	341a      	adds	r4, #26
 800fe66:	42b5      	cmp	r5, r6
 800fe68:	d11a      	bne.n	800fea0 <_printf_common+0xc8>
 800fe6a:	2000      	movs	r0, #0
 800fe6c:	e008      	b.n	800fe80 <_printf_common+0xa8>
 800fe6e:	2301      	movs	r3, #1
 800fe70:	4652      	mov	r2, sl
 800fe72:	4649      	mov	r1, r9
 800fe74:	4638      	mov	r0, r7
 800fe76:	47c0      	blx	r8
 800fe78:	3001      	adds	r0, #1
 800fe7a:	d103      	bne.n	800fe84 <_printf_common+0xac>
 800fe7c:	f04f 30ff 	mov.w	r0, #4294967295
 800fe80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe84:	3501      	adds	r5, #1
 800fe86:	e7c6      	b.n	800fe16 <_printf_common+0x3e>
 800fe88:	18e1      	adds	r1, r4, r3
 800fe8a:	1c5a      	adds	r2, r3, #1
 800fe8c:	2030      	movs	r0, #48	; 0x30
 800fe8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fe92:	4422      	add	r2, r4
 800fe94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fe98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fe9c:	3302      	adds	r3, #2
 800fe9e:	e7c7      	b.n	800fe30 <_printf_common+0x58>
 800fea0:	2301      	movs	r3, #1
 800fea2:	4622      	mov	r2, r4
 800fea4:	4649      	mov	r1, r9
 800fea6:	4638      	mov	r0, r7
 800fea8:	47c0      	blx	r8
 800feaa:	3001      	adds	r0, #1
 800feac:	d0e6      	beq.n	800fe7c <_printf_common+0xa4>
 800feae:	3601      	adds	r6, #1
 800feb0:	e7d9      	b.n	800fe66 <_printf_common+0x8e>
	...

0800feb4 <_printf_i>:
 800feb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800feb8:	7e0f      	ldrb	r7, [r1, #24]
 800feba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800febc:	2f78      	cmp	r7, #120	; 0x78
 800febe:	4691      	mov	r9, r2
 800fec0:	4680      	mov	r8, r0
 800fec2:	460c      	mov	r4, r1
 800fec4:	469a      	mov	sl, r3
 800fec6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800feca:	d807      	bhi.n	800fedc <_printf_i+0x28>
 800fecc:	2f62      	cmp	r7, #98	; 0x62
 800fece:	d80a      	bhi.n	800fee6 <_printf_i+0x32>
 800fed0:	2f00      	cmp	r7, #0
 800fed2:	f000 80d8 	beq.w	8010086 <_printf_i+0x1d2>
 800fed6:	2f58      	cmp	r7, #88	; 0x58
 800fed8:	f000 80a3 	beq.w	8010022 <_printf_i+0x16e>
 800fedc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fee0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fee4:	e03a      	b.n	800ff5c <_printf_i+0xa8>
 800fee6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800feea:	2b15      	cmp	r3, #21
 800feec:	d8f6      	bhi.n	800fedc <_printf_i+0x28>
 800feee:	a101      	add	r1, pc, #4	; (adr r1, 800fef4 <_printf_i+0x40>)
 800fef0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fef4:	0800ff4d 	.word	0x0800ff4d
 800fef8:	0800ff61 	.word	0x0800ff61
 800fefc:	0800fedd 	.word	0x0800fedd
 800ff00:	0800fedd 	.word	0x0800fedd
 800ff04:	0800fedd 	.word	0x0800fedd
 800ff08:	0800fedd 	.word	0x0800fedd
 800ff0c:	0800ff61 	.word	0x0800ff61
 800ff10:	0800fedd 	.word	0x0800fedd
 800ff14:	0800fedd 	.word	0x0800fedd
 800ff18:	0800fedd 	.word	0x0800fedd
 800ff1c:	0800fedd 	.word	0x0800fedd
 800ff20:	0801006d 	.word	0x0801006d
 800ff24:	0800ff91 	.word	0x0800ff91
 800ff28:	0801004f 	.word	0x0801004f
 800ff2c:	0800fedd 	.word	0x0800fedd
 800ff30:	0800fedd 	.word	0x0800fedd
 800ff34:	0801008f 	.word	0x0801008f
 800ff38:	0800fedd 	.word	0x0800fedd
 800ff3c:	0800ff91 	.word	0x0800ff91
 800ff40:	0800fedd 	.word	0x0800fedd
 800ff44:	0800fedd 	.word	0x0800fedd
 800ff48:	08010057 	.word	0x08010057
 800ff4c:	682b      	ldr	r3, [r5, #0]
 800ff4e:	1d1a      	adds	r2, r3, #4
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	602a      	str	r2, [r5, #0]
 800ff54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ff58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ff5c:	2301      	movs	r3, #1
 800ff5e:	e0a3      	b.n	80100a8 <_printf_i+0x1f4>
 800ff60:	6820      	ldr	r0, [r4, #0]
 800ff62:	6829      	ldr	r1, [r5, #0]
 800ff64:	0606      	lsls	r6, r0, #24
 800ff66:	f101 0304 	add.w	r3, r1, #4
 800ff6a:	d50a      	bpl.n	800ff82 <_printf_i+0xce>
 800ff6c:	680e      	ldr	r6, [r1, #0]
 800ff6e:	602b      	str	r3, [r5, #0]
 800ff70:	2e00      	cmp	r6, #0
 800ff72:	da03      	bge.n	800ff7c <_printf_i+0xc8>
 800ff74:	232d      	movs	r3, #45	; 0x2d
 800ff76:	4276      	negs	r6, r6
 800ff78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff7c:	485e      	ldr	r0, [pc, #376]	; (80100f8 <_printf_i+0x244>)
 800ff7e:	230a      	movs	r3, #10
 800ff80:	e019      	b.n	800ffb6 <_printf_i+0x102>
 800ff82:	680e      	ldr	r6, [r1, #0]
 800ff84:	602b      	str	r3, [r5, #0]
 800ff86:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ff8a:	bf18      	it	ne
 800ff8c:	b236      	sxthne	r6, r6
 800ff8e:	e7ef      	b.n	800ff70 <_printf_i+0xbc>
 800ff90:	682b      	ldr	r3, [r5, #0]
 800ff92:	6820      	ldr	r0, [r4, #0]
 800ff94:	1d19      	adds	r1, r3, #4
 800ff96:	6029      	str	r1, [r5, #0]
 800ff98:	0601      	lsls	r1, r0, #24
 800ff9a:	d501      	bpl.n	800ffa0 <_printf_i+0xec>
 800ff9c:	681e      	ldr	r6, [r3, #0]
 800ff9e:	e002      	b.n	800ffa6 <_printf_i+0xf2>
 800ffa0:	0646      	lsls	r6, r0, #25
 800ffa2:	d5fb      	bpl.n	800ff9c <_printf_i+0xe8>
 800ffa4:	881e      	ldrh	r6, [r3, #0]
 800ffa6:	4854      	ldr	r0, [pc, #336]	; (80100f8 <_printf_i+0x244>)
 800ffa8:	2f6f      	cmp	r7, #111	; 0x6f
 800ffaa:	bf0c      	ite	eq
 800ffac:	2308      	moveq	r3, #8
 800ffae:	230a      	movne	r3, #10
 800ffb0:	2100      	movs	r1, #0
 800ffb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ffb6:	6865      	ldr	r5, [r4, #4]
 800ffb8:	60a5      	str	r5, [r4, #8]
 800ffba:	2d00      	cmp	r5, #0
 800ffbc:	bfa2      	ittt	ge
 800ffbe:	6821      	ldrge	r1, [r4, #0]
 800ffc0:	f021 0104 	bicge.w	r1, r1, #4
 800ffc4:	6021      	strge	r1, [r4, #0]
 800ffc6:	b90e      	cbnz	r6, 800ffcc <_printf_i+0x118>
 800ffc8:	2d00      	cmp	r5, #0
 800ffca:	d04d      	beq.n	8010068 <_printf_i+0x1b4>
 800ffcc:	4615      	mov	r5, r2
 800ffce:	fbb6 f1f3 	udiv	r1, r6, r3
 800ffd2:	fb03 6711 	mls	r7, r3, r1, r6
 800ffd6:	5dc7      	ldrb	r7, [r0, r7]
 800ffd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ffdc:	4637      	mov	r7, r6
 800ffde:	42bb      	cmp	r3, r7
 800ffe0:	460e      	mov	r6, r1
 800ffe2:	d9f4      	bls.n	800ffce <_printf_i+0x11a>
 800ffe4:	2b08      	cmp	r3, #8
 800ffe6:	d10b      	bne.n	8010000 <_printf_i+0x14c>
 800ffe8:	6823      	ldr	r3, [r4, #0]
 800ffea:	07de      	lsls	r6, r3, #31
 800ffec:	d508      	bpl.n	8010000 <_printf_i+0x14c>
 800ffee:	6923      	ldr	r3, [r4, #16]
 800fff0:	6861      	ldr	r1, [r4, #4]
 800fff2:	4299      	cmp	r1, r3
 800fff4:	bfde      	ittt	le
 800fff6:	2330      	movle	r3, #48	; 0x30
 800fff8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fffc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010000:	1b52      	subs	r2, r2, r5
 8010002:	6122      	str	r2, [r4, #16]
 8010004:	f8cd a000 	str.w	sl, [sp]
 8010008:	464b      	mov	r3, r9
 801000a:	aa03      	add	r2, sp, #12
 801000c:	4621      	mov	r1, r4
 801000e:	4640      	mov	r0, r8
 8010010:	f7ff fee2 	bl	800fdd8 <_printf_common>
 8010014:	3001      	adds	r0, #1
 8010016:	d14c      	bne.n	80100b2 <_printf_i+0x1fe>
 8010018:	f04f 30ff 	mov.w	r0, #4294967295
 801001c:	b004      	add	sp, #16
 801001e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010022:	4835      	ldr	r0, [pc, #212]	; (80100f8 <_printf_i+0x244>)
 8010024:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010028:	6829      	ldr	r1, [r5, #0]
 801002a:	6823      	ldr	r3, [r4, #0]
 801002c:	f851 6b04 	ldr.w	r6, [r1], #4
 8010030:	6029      	str	r1, [r5, #0]
 8010032:	061d      	lsls	r5, r3, #24
 8010034:	d514      	bpl.n	8010060 <_printf_i+0x1ac>
 8010036:	07df      	lsls	r7, r3, #31
 8010038:	bf44      	itt	mi
 801003a:	f043 0320 	orrmi.w	r3, r3, #32
 801003e:	6023      	strmi	r3, [r4, #0]
 8010040:	b91e      	cbnz	r6, 801004a <_printf_i+0x196>
 8010042:	6823      	ldr	r3, [r4, #0]
 8010044:	f023 0320 	bic.w	r3, r3, #32
 8010048:	6023      	str	r3, [r4, #0]
 801004a:	2310      	movs	r3, #16
 801004c:	e7b0      	b.n	800ffb0 <_printf_i+0xfc>
 801004e:	6823      	ldr	r3, [r4, #0]
 8010050:	f043 0320 	orr.w	r3, r3, #32
 8010054:	6023      	str	r3, [r4, #0]
 8010056:	2378      	movs	r3, #120	; 0x78
 8010058:	4828      	ldr	r0, [pc, #160]	; (80100fc <_printf_i+0x248>)
 801005a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801005e:	e7e3      	b.n	8010028 <_printf_i+0x174>
 8010060:	0659      	lsls	r1, r3, #25
 8010062:	bf48      	it	mi
 8010064:	b2b6      	uxthmi	r6, r6
 8010066:	e7e6      	b.n	8010036 <_printf_i+0x182>
 8010068:	4615      	mov	r5, r2
 801006a:	e7bb      	b.n	800ffe4 <_printf_i+0x130>
 801006c:	682b      	ldr	r3, [r5, #0]
 801006e:	6826      	ldr	r6, [r4, #0]
 8010070:	6961      	ldr	r1, [r4, #20]
 8010072:	1d18      	adds	r0, r3, #4
 8010074:	6028      	str	r0, [r5, #0]
 8010076:	0635      	lsls	r5, r6, #24
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	d501      	bpl.n	8010080 <_printf_i+0x1cc>
 801007c:	6019      	str	r1, [r3, #0]
 801007e:	e002      	b.n	8010086 <_printf_i+0x1d2>
 8010080:	0670      	lsls	r0, r6, #25
 8010082:	d5fb      	bpl.n	801007c <_printf_i+0x1c8>
 8010084:	8019      	strh	r1, [r3, #0]
 8010086:	2300      	movs	r3, #0
 8010088:	6123      	str	r3, [r4, #16]
 801008a:	4615      	mov	r5, r2
 801008c:	e7ba      	b.n	8010004 <_printf_i+0x150>
 801008e:	682b      	ldr	r3, [r5, #0]
 8010090:	1d1a      	adds	r2, r3, #4
 8010092:	602a      	str	r2, [r5, #0]
 8010094:	681d      	ldr	r5, [r3, #0]
 8010096:	6862      	ldr	r2, [r4, #4]
 8010098:	2100      	movs	r1, #0
 801009a:	4628      	mov	r0, r5
 801009c:	f7f0 f8b0 	bl	8000200 <memchr>
 80100a0:	b108      	cbz	r0, 80100a6 <_printf_i+0x1f2>
 80100a2:	1b40      	subs	r0, r0, r5
 80100a4:	6060      	str	r0, [r4, #4]
 80100a6:	6863      	ldr	r3, [r4, #4]
 80100a8:	6123      	str	r3, [r4, #16]
 80100aa:	2300      	movs	r3, #0
 80100ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80100b0:	e7a8      	b.n	8010004 <_printf_i+0x150>
 80100b2:	6923      	ldr	r3, [r4, #16]
 80100b4:	462a      	mov	r2, r5
 80100b6:	4649      	mov	r1, r9
 80100b8:	4640      	mov	r0, r8
 80100ba:	47d0      	blx	sl
 80100bc:	3001      	adds	r0, #1
 80100be:	d0ab      	beq.n	8010018 <_printf_i+0x164>
 80100c0:	6823      	ldr	r3, [r4, #0]
 80100c2:	079b      	lsls	r3, r3, #30
 80100c4:	d413      	bmi.n	80100ee <_printf_i+0x23a>
 80100c6:	68e0      	ldr	r0, [r4, #12]
 80100c8:	9b03      	ldr	r3, [sp, #12]
 80100ca:	4298      	cmp	r0, r3
 80100cc:	bfb8      	it	lt
 80100ce:	4618      	movlt	r0, r3
 80100d0:	e7a4      	b.n	801001c <_printf_i+0x168>
 80100d2:	2301      	movs	r3, #1
 80100d4:	4632      	mov	r2, r6
 80100d6:	4649      	mov	r1, r9
 80100d8:	4640      	mov	r0, r8
 80100da:	47d0      	blx	sl
 80100dc:	3001      	adds	r0, #1
 80100de:	d09b      	beq.n	8010018 <_printf_i+0x164>
 80100e0:	3501      	adds	r5, #1
 80100e2:	68e3      	ldr	r3, [r4, #12]
 80100e4:	9903      	ldr	r1, [sp, #12]
 80100e6:	1a5b      	subs	r3, r3, r1
 80100e8:	42ab      	cmp	r3, r5
 80100ea:	dcf2      	bgt.n	80100d2 <_printf_i+0x21e>
 80100ec:	e7eb      	b.n	80100c6 <_printf_i+0x212>
 80100ee:	2500      	movs	r5, #0
 80100f0:	f104 0619 	add.w	r6, r4, #25
 80100f4:	e7f5      	b.n	80100e2 <_printf_i+0x22e>
 80100f6:	bf00      	nop
 80100f8:	08011a01 	.word	0x08011a01
 80100fc:	08011a12 	.word	0x08011a12

08010100 <__sread>:
 8010100:	b510      	push	{r4, lr}
 8010102:	460c      	mov	r4, r1
 8010104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010108:	f000 f8de 	bl	80102c8 <_read_r>
 801010c:	2800      	cmp	r0, #0
 801010e:	bfab      	itete	ge
 8010110:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010112:	89a3      	ldrhlt	r3, [r4, #12]
 8010114:	181b      	addge	r3, r3, r0
 8010116:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801011a:	bfac      	ite	ge
 801011c:	6563      	strge	r3, [r4, #84]	; 0x54
 801011e:	81a3      	strhlt	r3, [r4, #12]
 8010120:	bd10      	pop	{r4, pc}

08010122 <__swrite>:
 8010122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010126:	461f      	mov	r7, r3
 8010128:	898b      	ldrh	r3, [r1, #12]
 801012a:	05db      	lsls	r3, r3, #23
 801012c:	4605      	mov	r5, r0
 801012e:	460c      	mov	r4, r1
 8010130:	4616      	mov	r6, r2
 8010132:	d505      	bpl.n	8010140 <__swrite+0x1e>
 8010134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010138:	2302      	movs	r3, #2
 801013a:	2200      	movs	r2, #0
 801013c:	f000 f868 	bl	8010210 <_lseek_r>
 8010140:	89a3      	ldrh	r3, [r4, #12]
 8010142:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010146:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801014a:	81a3      	strh	r3, [r4, #12]
 801014c:	4632      	mov	r2, r6
 801014e:	463b      	mov	r3, r7
 8010150:	4628      	mov	r0, r5
 8010152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010156:	f000 b817 	b.w	8010188 <_write_r>

0801015a <__sseek>:
 801015a:	b510      	push	{r4, lr}
 801015c:	460c      	mov	r4, r1
 801015e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010162:	f000 f855 	bl	8010210 <_lseek_r>
 8010166:	1c43      	adds	r3, r0, #1
 8010168:	89a3      	ldrh	r3, [r4, #12]
 801016a:	bf15      	itete	ne
 801016c:	6560      	strne	r0, [r4, #84]	; 0x54
 801016e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010172:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010176:	81a3      	strheq	r3, [r4, #12]
 8010178:	bf18      	it	ne
 801017a:	81a3      	strhne	r3, [r4, #12]
 801017c:	bd10      	pop	{r4, pc}

0801017e <__sclose>:
 801017e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010182:	f000 b813 	b.w	80101ac <_close_r>
	...

08010188 <_write_r>:
 8010188:	b538      	push	{r3, r4, r5, lr}
 801018a:	4d07      	ldr	r5, [pc, #28]	; (80101a8 <_write_r+0x20>)
 801018c:	4604      	mov	r4, r0
 801018e:	4608      	mov	r0, r1
 8010190:	4611      	mov	r1, r2
 8010192:	2200      	movs	r2, #0
 8010194:	602a      	str	r2, [r5, #0]
 8010196:	461a      	mov	r2, r3
 8010198:	f7f4 fa29 	bl	80045ee <_write>
 801019c:	1c43      	adds	r3, r0, #1
 801019e:	d102      	bne.n	80101a6 <_write_r+0x1e>
 80101a0:	682b      	ldr	r3, [r5, #0]
 80101a2:	b103      	cbz	r3, 80101a6 <_write_r+0x1e>
 80101a4:	6023      	str	r3, [r4, #0]
 80101a6:	bd38      	pop	{r3, r4, r5, pc}
 80101a8:	2001396c 	.word	0x2001396c

080101ac <_close_r>:
 80101ac:	b538      	push	{r3, r4, r5, lr}
 80101ae:	4d06      	ldr	r5, [pc, #24]	; (80101c8 <_close_r+0x1c>)
 80101b0:	2300      	movs	r3, #0
 80101b2:	4604      	mov	r4, r0
 80101b4:	4608      	mov	r0, r1
 80101b6:	602b      	str	r3, [r5, #0]
 80101b8:	f7f4 fa35 	bl	8004626 <_close>
 80101bc:	1c43      	adds	r3, r0, #1
 80101be:	d102      	bne.n	80101c6 <_close_r+0x1a>
 80101c0:	682b      	ldr	r3, [r5, #0]
 80101c2:	b103      	cbz	r3, 80101c6 <_close_r+0x1a>
 80101c4:	6023      	str	r3, [r4, #0]
 80101c6:	bd38      	pop	{r3, r4, r5, pc}
 80101c8:	2001396c 	.word	0x2001396c

080101cc <_fstat_r>:
 80101cc:	b538      	push	{r3, r4, r5, lr}
 80101ce:	4d07      	ldr	r5, [pc, #28]	; (80101ec <_fstat_r+0x20>)
 80101d0:	2300      	movs	r3, #0
 80101d2:	4604      	mov	r4, r0
 80101d4:	4608      	mov	r0, r1
 80101d6:	4611      	mov	r1, r2
 80101d8:	602b      	str	r3, [r5, #0]
 80101da:	f7f4 fa30 	bl	800463e <_fstat>
 80101de:	1c43      	adds	r3, r0, #1
 80101e0:	d102      	bne.n	80101e8 <_fstat_r+0x1c>
 80101e2:	682b      	ldr	r3, [r5, #0]
 80101e4:	b103      	cbz	r3, 80101e8 <_fstat_r+0x1c>
 80101e6:	6023      	str	r3, [r4, #0]
 80101e8:	bd38      	pop	{r3, r4, r5, pc}
 80101ea:	bf00      	nop
 80101ec:	2001396c 	.word	0x2001396c

080101f0 <_isatty_r>:
 80101f0:	b538      	push	{r3, r4, r5, lr}
 80101f2:	4d06      	ldr	r5, [pc, #24]	; (801020c <_isatty_r+0x1c>)
 80101f4:	2300      	movs	r3, #0
 80101f6:	4604      	mov	r4, r0
 80101f8:	4608      	mov	r0, r1
 80101fa:	602b      	str	r3, [r5, #0]
 80101fc:	f7f4 fa2f 	bl	800465e <_isatty>
 8010200:	1c43      	adds	r3, r0, #1
 8010202:	d102      	bne.n	801020a <_isatty_r+0x1a>
 8010204:	682b      	ldr	r3, [r5, #0]
 8010206:	b103      	cbz	r3, 801020a <_isatty_r+0x1a>
 8010208:	6023      	str	r3, [r4, #0]
 801020a:	bd38      	pop	{r3, r4, r5, pc}
 801020c:	2001396c 	.word	0x2001396c

08010210 <_lseek_r>:
 8010210:	b538      	push	{r3, r4, r5, lr}
 8010212:	4d07      	ldr	r5, [pc, #28]	; (8010230 <_lseek_r+0x20>)
 8010214:	4604      	mov	r4, r0
 8010216:	4608      	mov	r0, r1
 8010218:	4611      	mov	r1, r2
 801021a:	2200      	movs	r2, #0
 801021c:	602a      	str	r2, [r5, #0]
 801021e:	461a      	mov	r2, r3
 8010220:	f7f4 fa28 	bl	8004674 <_lseek>
 8010224:	1c43      	adds	r3, r0, #1
 8010226:	d102      	bne.n	801022e <_lseek_r+0x1e>
 8010228:	682b      	ldr	r3, [r5, #0]
 801022a:	b103      	cbz	r3, 801022e <_lseek_r+0x1e>
 801022c:	6023      	str	r3, [r4, #0]
 801022e:	bd38      	pop	{r3, r4, r5, pc}
 8010230:	2001396c 	.word	0x2001396c

08010234 <memmove>:
 8010234:	4288      	cmp	r0, r1
 8010236:	b510      	push	{r4, lr}
 8010238:	eb01 0402 	add.w	r4, r1, r2
 801023c:	d902      	bls.n	8010244 <memmove+0x10>
 801023e:	4284      	cmp	r4, r0
 8010240:	4623      	mov	r3, r4
 8010242:	d807      	bhi.n	8010254 <memmove+0x20>
 8010244:	1e43      	subs	r3, r0, #1
 8010246:	42a1      	cmp	r1, r4
 8010248:	d008      	beq.n	801025c <memmove+0x28>
 801024a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801024e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010252:	e7f8      	b.n	8010246 <memmove+0x12>
 8010254:	4402      	add	r2, r0
 8010256:	4601      	mov	r1, r0
 8010258:	428a      	cmp	r2, r1
 801025a:	d100      	bne.n	801025e <memmove+0x2a>
 801025c:	bd10      	pop	{r4, pc}
 801025e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010262:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010266:	e7f7      	b.n	8010258 <memmove+0x24>

08010268 <_realloc_r>:
 8010268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801026c:	4680      	mov	r8, r0
 801026e:	4614      	mov	r4, r2
 8010270:	460e      	mov	r6, r1
 8010272:	b921      	cbnz	r1, 801027e <_realloc_r+0x16>
 8010274:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010278:	4611      	mov	r1, r2
 801027a:	f7fe bed9 	b.w	800f030 <_malloc_r>
 801027e:	b92a      	cbnz	r2, 801028c <_realloc_r+0x24>
 8010280:	f7fe fe6a 	bl	800ef58 <_free_r>
 8010284:	4625      	mov	r5, r4
 8010286:	4628      	mov	r0, r5
 8010288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801028c:	f000 f82e 	bl	80102ec <_malloc_usable_size_r>
 8010290:	4284      	cmp	r4, r0
 8010292:	4607      	mov	r7, r0
 8010294:	d802      	bhi.n	801029c <_realloc_r+0x34>
 8010296:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801029a:	d812      	bhi.n	80102c2 <_realloc_r+0x5a>
 801029c:	4621      	mov	r1, r4
 801029e:	4640      	mov	r0, r8
 80102a0:	f7fe fec6 	bl	800f030 <_malloc_r>
 80102a4:	4605      	mov	r5, r0
 80102a6:	2800      	cmp	r0, #0
 80102a8:	d0ed      	beq.n	8010286 <_realloc_r+0x1e>
 80102aa:	42bc      	cmp	r4, r7
 80102ac:	4622      	mov	r2, r4
 80102ae:	4631      	mov	r1, r6
 80102b0:	bf28      	it	cs
 80102b2:	463a      	movcs	r2, r7
 80102b4:	f7fe fe3a 	bl	800ef2c <memcpy>
 80102b8:	4631      	mov	r1, r6
 80102ba:	4640      	mov	r0, r8
 80102bc:	f7fe fe4c 	bl	800ef58 <_free_r>
 80102c0:	e7e1      	b.n	8010286 <_realloc_r+0x1e>
 80102c2:	4635      	mov	r5, r6
 80102c4:	e7df      	b.n	8010286 <_realloc_r+0x1e>
	...

080102c8 <_read_r>:
 80102c8:	b538      	push	{r3, r4, r5, lr}
 80102ca:	4d07      	ldr	r5, [pc, #28]	; (80102e8 <_read_r+0x20>)
 80102cc:	4604      	mov	r4, r0
 80102ce:	4608      	mov	r0, r1
 80102d0:	4611      	mov	r1, r2
 80102d2:	2200      	movs	r2, #0
 80102d4:	602a      	str	r2, [r5, #0]
 80102d6:	461a      	mov	r2, r3
 80102d8:	f7f4 f96c 	bl	80045b4 <_read>
 80102dc:	1c43      	adds	r3, r0, #1
 80102de:	d102      	bne.n	80102e6 <_read_r+0x1e>
 80102e0:	682b      	ldr	r3, [r5, #0]
 80102e2:	b103      	cbz	r3, 80102e6 <_read_r+0x1e>
 80102e4:	6023      	str	r3, [r4, #0]
 80102e6:	bd38      	pop	{r3, r4, r5, pc}
 80102e8:	2001396c 	.word	0x2001396c

080102ec <_malloc_usable_size_r>:
 80102ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80102f0:	1f18      	subs	r0, r3, #4
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	bfbc      	itt	lt
 80102f6:	580b      	ldrlt	r3, [r1, r0]
 80102f8:	18c0      	addlt	r0, r0, r3
 80102fa:	4770      	bx	lr

080102fc <pow>:
 80102fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102fe:	ed2d 8b02 	vpush	{d8}
 8010302:	eeb0 8a40 	vmov.f32	s16, s0
 8010306:	eef0 8a60 	vmov.f32	s17, s1
 801030a:	ec55 4b11 	vmov	r4, r5, d1
 801030e:	f000 f893 	bl	8010438 <__ieee754_pow>
 8010312:	4622      	mov	r2, r4
 8010314:	462b      	mov	r3, r5
 8010316:	4620      	mov	r0, r4
 8010318:	4629      	mov	r1, r5
 801031a:	ec57 6b10 	vmov	r6, r7, d0
 801031e:	f7f0 fc15 	bl	8000b4c <__aeabi_dcmpun>
 8010322:	2800      	cmp	r0, #0
 8010324:	d13b      	bne.n	801039e <pow+0xa2>
 8010326:	ec51 0b18 	vmov	r0, r1, d8
 801032a:	2200      	movs	r2, #0
 801032c:	2300      	movs	r3, #0
 801032e:	f7f0 fbdb 	bl	8000ae8 <__aeabi_dcmpeq>
 8010332:	b1b8      	cbz	r0, 8010364 <pow+0x68>
 8010334:	2200      	movs	r2, #0
 8010336:	2300      	movs	r3, #0
 8010338:	4620      	mov	r0, r4
 801033a:	4629      	mov	r1, r5
 801033c:	f7f0 fbd4 	bl	8000ae8 <__aeabi_dcmpeq>
 8010340:	2800      	cmp	r0, #0
 8010342:	d146      	bne.n	80103d2 <pow+0xd6>
 8010344:	ec45 4b10 	vmov	d0, r4, r5
 8010348:	f000 fe8f 	bl	801106a <finite>
 801034c:	b338      	cbz	r0, 801039e <pow+0xa2>
 801034e:	2200      	movs	r2, #0
 8010350:	2300      	movs	r3, #0
 8010352:	4620      	mov	r0, r4
 8010354:	4629      	mov	r1, r5
 8010356:	f7f0 fbd1 	bl	8000afc <__aeabi_dcmplt>
 801035a:	b300      	cbz	r0, 801039e <pow+0xa2>
 801035c:	f7fe fdac 	bl	800eeb8 <__errno>
 8010360:	2322      	movs	r3, #34	; 0x22
 8010362:	e01b      	b.n	801039c <pow+0xa0>
 8010364:	ec47 6b10 	vmov	d0, r6, r7
 8010368:	f000 fe7f 	bl	801106a <finite>
 801036c:	b9e0      	cbnz	r0, 80103a8 <pow+0xac>
 801036e:	eeb0 0a48 	vmov.f32	s0, s16
 8010372:	eef0 0a68 	vmov.f32	s1, s17
 8010376:	f000 fe78 	bl	801106a <finite>
 801037a:	b1a8      	cbz	r0, 80103a8 <pow+0xac>
 801037c:	ec45 4b10 	vmov	d0, r4, r5
 8010380:	f000 fe73 	bl	801106a <finite>
 8010384:	b180      	cbz	r0, 80103a8 <pow+0xac>
 8010386:	4632      	mov	r2, r6
 8010388:	463b      	mov	r3, r7
 801038a:	4630      	mov	r0, r6
 801038c:	4639      	mov	r1, r7
 801038e:	f7f0 fbdd 	bl	8000b4c <__aeabi_dcmpun>
 8010392:	2800      	cmp	r0, #0
 8010394:	d0e2      	beq.n	801035c <pow+0x60>
 8010396:	f7fe fd8f 	bl	800eeb8 <__errno>
 801039a:	2321      	movs	r3, #33	; 0x21
 801039c:	6003      	str	r3, [r0, #0]
 801039e:	ecbd 8b02 	vpop	{d8}
 80103a2:	ec47 6b10 	vmov	d0, r6, r7
 80103a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103a8:	2200      	movs	r2, #0
 80103aa:	2300      	movs	r3, #0
 80103ac:	4630      	mov	r0, r6
 80103ae:	4639      	mov	r1, r7
 80103b0:	f7f0 fb9a 	bl	8000ae8 <__aeabi_dcmpeq>
 80103b4:	2800      	cmp	r0, #0
 80103b6:	d0f2      	beq.n	801039e <pow+0xa2>
 80103b8:	eeb0 0a48 	vmov.f32	s0, s16
 80103bc:	eef0 0a68 	vmov.f32	s1, s17
 80103c0:	f000 fe53 	bl	801106a <finite>
 80103c4:	2800      	cmp	r0, #0
 80103c6:	d0ea      	beq.n	801039e <pow+0xa2>
 80103c8:	ec45 4b10 	vmov	d0, r4, r5
 80103cc:	f000 fe4d 	bl	801106a <finite>
 80103d0:	e7c3      	b.n	801035a <pow+0x5e>
 80103d2:	4f01      	ldr	r7, [pc, #4]	; (80103d8 <pow+0xdc>)
 80103d4:	2600      	movs	r6, #0
 80103d6:	e7e2      	b.n	801039e <pow+0xa2>
 80103d8:	3ff00000 	.word	0x3ff00000

080103dc <sqrt>:
 80103dc:	b538      	push	{r3, r4, r5, lr}
 80103de:	ed2d 8b02 	vpush	{d8}
 80103e2:	ec55 4b10 	vmov	r4, r5, d0
 80103e6:	f000 fd55 	bl	8010e94 <__ieee754_sqrt>
 80103ea:	4622      	mov	r2, r4
 80103ec:	462b      	mov	r3, r5
 80103ee:	4620      	mov	r0, r4
 80103f0:	4629      	mov	r1, r5
 80103f2:	eeb0 8a40 	vmov.f32	s16, s0
 80103f6:	eef0 8a60 	vmov.f32	s17, s1
 80103fa:	f7f0 fba7 	bl	8000b4c <__aeabi_dcmpun>
 80103fe:	b990      	cbnz	r0, 8010426 <sqrt+0x4a>
 8010400:	2200      	movs	r2, #0
 8010402:	2300      	movs	r3, #0
 8010404:	4620      	mov	r0, r4
 8010406:	4629      	mov	r1, r5
 8010408:	f7f0 fb78 	bl	8000afc <__aeabi_dcmplt>
 801040c:	b158      	cbz	r0, 8010426 <sqrt+0x4a>
 801040e:	f7fe fd53 	bl	800eeb8 <__errno>
 8010412:	2321      	movs	r3, #33	; 0x21
 8010414:	6003      	str	r3, [r0, #0]
 8010416:	2200      	movs	r2, #0
 8010418:	2300      	movs	r3, #0
 801041a:	4610      	mov	r0, r2
 801041c:	4619      	mov	r1, r3
 801041e:	f7f0 fa25 	bl	800086c <__aeabi_ddiv>
 8010422:	ec41 0b18 	vmov	d8, r0, r1
 8010426:	eeb0 0a48 	vmov.f32	s0, s16
 801042a:	eef0 0a68 	vmov.f32	s1, s17
 801042e:	ecbd 8b02 	vpop	{d8}
 8010432:	bd38      	pop	{r3, r4, r5, pc}
 8010434:	0000      	movs	r0, r0
	...

08010438 <__ieee754_pow>:
 8010438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801043c:	ed2d 8b06 	vpush	{d8-d10}
 8010440:	b089      	sub	sp, #36	; 0x24
 8010442:	ed8d 1b00 	vstr	d1, [sp]
 8010446:	e9dd 2900 	ldrd	r2, r9, [sp]
 801044a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801044e:	ea58 0102 	orrs.w	r1, r8, r2
 8010452:	ec57 6b10 	vmov	r6, r7, d0
 8010456:	d115      	bne.n	8010484 <__ieee754_pow+0x4c>
 8010458:	19b3      	adds	r3, r6, r6
 801045a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801045e:	4152      	adcs	r2, r2
 8010460:	4299      	cmp	r1, r3
 8010462:	4b89      	ldr	r3, [pc, #548]	; (8010688 <__ieee754_pow+0x250>)
 8010464:	4193      	sbcs	r3, r2
 8010466:	f080 84d2 	bcs.w	8010e0e <__ieee754_pow+0x9d6>
 801046a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801046e:	4630      	mov	r0, r6
 8010470:	4639      	mov	r1, r7
 8010472:	f7ef ff1b 	bl	80002ac <__adddf3>
 8010476:	ec41 0b10 	vmov	d0, r0, r1
 801047a:	b009      	add	sp, #36	; 0x24
 801047c:	ecbd 8b06 	vpop	{d8-d10}
 8010480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010484:	4b81      	ldr	r3, [pc, #516]	; (801068c <__ieee754_pow+0x254>)
 8010486:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801048a:	429c      	cmp	r4, r3
 801048c:	ee10 aa10 	vmov	sl, s0
 8010490:	463d      	mov	r5, r7
 8010492:	dc06      	bgt.n	80104a2 <__ieee754_pow+0x6a>
 8010494:	d101      	bne.n	801049a <__ieee754_pow+0x62>
 8010496:	2e00      	cmp	r6, #0
 8010498:	d1e7      	bne.n	801046a <__ieee754_pow+0x32>
 801049a:	4598      	cmp	r8, r3
 801049c:	dc01      	bgt.n	80104a2 <__ieee754_pow+0x6a>
 801049e:	d10f      	bne.n	80104c0 <__ieee754_pow+0x88>
 80104a0:	b172      	cbz	r2, 80104c0 <__ieee754_pow+0x88>
 80104a2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80104a6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80104aa:	ea55 050a 	orrs.w	r5, r5, sl
 80104ae:	d1dc      	bne.n	801046a <__ieee754_pow+0x32>
 80104b0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80104b4:	18db      	adds	r3, r3, r3
 80104b6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80104ba:	4152      	adcs	r2, r2
 80104bc:	429d      	cmp	r5, r3
 80104be:	e7d0      	b.n	8010462 <__ieee754_pow+0x2a>
 80104c0:	2d00      	cmp	r5, #0
 80104c2:	da3b      	bge.n	801053c <__ieee754_pow+0x104>
 80104c4:	4b72      	ldr	r3, [pc, #456]	; (8010690 <__ieee754_pow+0x258>)
 80104c6:	4598      	cmp	r8, r3
 80104c8:	dc51      	bgt.n	801056e <__ieee754_pow+0x136>
 80104ca:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80104ce:	4598      	cmp	r8, r3
 80104d0:	f340 84ac 	ble.w	8010e2c <__ieee754_pow+0x9f4>
 80104d4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80104d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80104dc:	2b14      	cmp	r3, #20
 80104de:	dd0f      	ble.n	8010500 <__ieee754_pow+0xc8>
 80104e0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80104e4:	fa22 f103 	lsr.w	r1, r2, r3
 80104e8:	fa01 f303 	lsl.w	r3, r1, r3
 80104ec:	4293      	cmp	r3, r2
 80104ee:	f040 849d 	bne.w	8010e2c <__ieee754_pow+0x9f4>
 80104f2:	f001 0101 	and.w	r1, r1, #1
 80104f6:	f1c1 0302 	rsb	r3, r1, #2
 80104fa:	9304      	str	r3, [sp, #16]
 80104fc:	b182      	cbz	r2, 8010520 <__ieee754_pow+0xe8>
 80104fe:	e05f      	b.n	80105c0 <__ieee754_pow+0x188>
 8010500:	2a00      	cmp	r2, #0
 8010502:	d15b      	bne.n	80105bc <__ieee754_pow+0x184>
 8010504:	f1c3 0314 	rsb	r3, r3, #20
 8010508:	fa48 f103 	asr.w	r1, r8, r3
 801050c:	fa01 f303 	lsl.w	r3, r1, r3
 8010510:	4543      	cmp	r3, r8
 8010512:	f040 8488 	bne.w	8010e26 <__ieee754_pow+0x9ee>
 8010516:	f001 0101 	and.w	r1, r1, #1
 801051a:	f1c1 0302 	rsb	r3, r1, #2
 801051e:	9304      	str	r3, [sp, #16]
 8010520:	4b5c      	ldr	r3, [pc, #368]	; (8010694 <__ieee754_pow+0x25c>)
 8010522:	4598      	cmp	r8, r3
 8010524:	d132      	bne.n	801058c <__ieee754_pow+0x154>
 8010526:	f1b9 0f00 	cmp.w	r9, #0
 801052a:	f280 8478 	bge.w	8010e1e <__ieee754_pow+0x9e6>
 801052e:	4959      	ldr	r1, [pc, #356]	; (8010694 <__ieee754_pow+0x25c>)
 8010530:	4632      	mov	r2, r6
 8010532:	463b      	mov	r3, r7
 8010534:	2000      	movs	r0, #0
 8010536:	f7f0 f999 	bl	800086c <__aeabi_ddiv>
 801053a:	e79c      	b.n	8010476 <__ieee754_pow+0x3e>
 801053c:	2300      	movs	r3, #0
 801053e:	9304      	str	r3, [sp, #16]
 8010540:	2a00      	cmp	r2, #0
 8010542:	d13d      	bne.n	80105c0 <__ieee754_pow+0x188>
 8010544:	4b51      	ldr	r3, [pc, #324]	; (801068c <__ieee754_pow+0x254>)
 8010546:	4598      	cmp	r8, r3
 8010548:	d1ea      	bne.n	8010520 <__ieee754_pow+0xe8>
 801054a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801054e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010552:	ea53 030a 	orrs.w	r3, r3, sl
 8010556:	f000 845a 	beq.w	8010e0e <__ieee754_pow+0x9d6>
 801055a:	4b4f      	ldr	r3, [pc, #316]	; (8010698 <__ieee754_pow+0x260>)
 801055c:	429c      	cmp	r4, r3
 801055e:	dd08      	ble.n	8010572 <__ieee754_pow+0x13a>
 8010560:	f1b9 0f00 	cmp.w	r9, #0
 8010564:	f2c0 8457 	blt.w	8010e16 <__ieee754_pow+0x9de>
 8010568:	e9dd 0100 	ldrd	r0, r1, [sp]
 801056c:	e783      	b.n	8010476 <__ieee754_pow+0x3e>
 801056e:	2302      	movs	r3, #2
 8010570:	e7e5      	b.n	801053e <__ieee754_pow+0x106>
 8010572:	f1b9 0f00 	cmp.w	r9, #0
 8010576:	f04f 0000 	mov.w	r0, #0
 801057a:	f04f 0100 	mov.w	r1, #0
 801057e:	f6bf af7a 	bge.w	8010476 <__ieee754_pow+0x3e>
 8010582:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010586:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801058a:	e774      	b.n	8010476 <__ieee754_pow+0x3e>
 801058c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010590:	d106      	bne.n	80105a0 <__ieee754_pow+0x168>
 8010592:	4632      	mov	r2, r6
 8010594:	463b      	mov	r3, r7
 8010596:	4630      	mov	r0, r6
 8010598:	4639      	mov	r1, r7
 801059a:	f7f0 f83d 	bl	8000618 <__aeabi_dmul>
 801059e:	e76a      	b.n	8010476 <__ieee754_pow+0x3e>
 80105a0:	4b3e      	ldr	r3, [pc, #248]	; (801069c <__ieee754_pow+0x264>)
 80105a2:	4599      	cmp	r9, r3
 80105a4:	d10c      	bne.n	80105c0 <__ieee754_pow+0x188>
 80105a6:	2d00      	cmp	r5, #0
 80105a8:	db0a      	blt.n	80105c0 <__ieee754_pow+0x188>
 80105aa:	ec47 6b10 	vmov	d0, r6, r7
 80105ae:	b009      	add	sp, #36	; 0x24
 80105b0:	ecbd 8b06 	vpop	{d8-d10}
 80105b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105b8:	f000 bc6c 	b.w	8010e94 <__ieee754_sqrt>
 80105bc:	2300      	movs	r3, #0
 80105be:	9304      	str	r3, [sp, #16]
 80105c0:	ec47 6b10 	vmov	d0, r6, r7
 80105c4:	f000 fd48 	bl	8011058 <fabs>
 80105c8:	ec51 0b10 	vmov	r0, r1, d0
 80105cc:	f1ba 0f00 	cmp.w	sl, #0
 80105d0:	d129      	bne.n	8010626 <__ieee754_pow+0x1ee>
 80105d2:	b124      	cbz	r4, 80105de <__ieee754_pow+0x1a6>
 80105d4:	4b2f      	ldr	r3, [pc, #188]	; (8010694 <__ieee754_pow+0x25c>)
 80105d6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80105da:	429a      	cmp	r2, r3
 80105dc:	d123      	bne.n	8010626 <__ieee754_pow+0x1ee>
 80105de:	f1b9 0f00 	cmp.w	r9, #0
 80105e2:	da05      	bge.n	80105f0 <__ieee754_pow+0x1b8>
 80105e4:	4602      	mov	r2, r0
 80105e6:	460b      	mov	r3, r1
 80105e8:	2000      	movs	r0, #0
 80105ea:	492a      	ldr	r1, [pc, #168]	; (8010694 <__ieee754_pow+0x25c>)
 80105ec:	f7f0 f93e 	bl	800086c <__aeabi_ddiv>
 80105f0:	2d00      	cmp	r5, #0
 80105f2:	f6bf af40 	bge.w	8010476 <__ieee754_pow+0x3e>
 80105f6:	9b04      	ldr	r3, [sp, #16]
 80105f8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80105fc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010600:	4323      	orrs	r3, r4
 8010602:	d108      	bne.n	8010616 <__ieee754_pow+0x1de>
 8010604:	4602      	mov	r2, r0
 8010606:	460b      	mov	r3, r1
 8010608:	4610      	mov	r0, r2
 801060a:	4619      	mov	r1, r3
 801060c:	f7ef fe4c 	bl	80002a8 <__aeabi_dsub>
 8010610:	4602      	mov	r2, r0
 8010612:	460b      	mov	r3, r1
 8010614:	e78f      	b.n	8010536 <__ieee754_pow+0xfe>
 8010616:	9b04      	ldr	r3, [sp, #16]
 8010618:	2b01      	cmp	r3, #1
 801061a:	f47f af2c 	bne.w	8010476 <__ieee754_pow+0x3e>
 801061e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010622:	4619      	mov	r1, r3
 8010624:	e727      	b.n	8010476 <__ieee754_pow+0x3e>
 8010626:	0feb      	lsrs	r3, r5, #31
 8010628:	3b01      	subs	r3, #1
 801062a:	9306      	str	r3, [sp, #24]
 801062c:	9a06      	ldr	r2, [sp, #24]
 801062e:	9b04      	ldr	r3, [sp, #16]
 8010630:	4313      	orrs	r3, r2
 8010632:	d102      	bne.n	801063a <__ieee754_pow+0x202>
 8010634:	4632      	mov	r2, r6
 8010636:	463b      	mov	r3, r7
 8010638:	e7e6      	b.n	8010608 <__ieee754_pow+0x1d0>
 801063a:	4b19      	ldr	r3, [pc, #100]	; (80106a0 <__ieee754_pow+0x268>)
 801063c:	4598      	cmp	r8, r3
 801063e:	f340 80fb 	ble.w	8010838 <__ieee754_pow+0x400>
 8010642:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010646:	4598      	cmp	r8, r3
 8010648:	4b13      	ldr	r3, [pc, #76]	; (8010698 <__ieee754_pow+0x260>)
 801064a:	dd0c      	ble.n	8010666 <__ieee754_pow+0x22e>
 801064c:	429c      	cmp	r4, r3
 801064e:	dc0f      	bgt.n	8010670 <__ieee754_pow+0x238>
 8010650:	f1b9 0f00 	cmp.w	r9, #0
 8010654:	da0f      	bge.n	8010676 <__ieee754_pow+0x23e>
 8010656:	2000      	movs	r0, #0
 8010658:	b009      	add	sp, #36	; 0x24
 801065a:	ecbd 8b06 	vpop	{d8-d10}
 801065e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010662:	f000 bcf0 	b.w	8011046 <__math_oflow>
 8010666:	429c      	cmp	r4, r3
 8010668:	dbf2      	blt.n	8010650 <__ieee754_pow+0x218>
 801066a:	4b0a      	ldr	r3, [pc, #40]	; (8010694 <__ieee754_pow+0x25c>)
 801066c:	429c      	cmp	r4, r3
 801066e:	dd19      	ble.n	80106a4 <__ieee754_pow+0x26c>
 8010670:	f1b9 0f00 	cmp.w	r9, #0
 8010674:	dcef      	bgt.n	8010656 <__ieee754_pow+0x21e>
 8010676:	2000      	movs	r0, #0
 8010678:	b009      	add	sp, #36	; 0x24
 801067a:	ecbd 8b06 	vpop	{d8-d10}
 801067e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010682:	f000 bcd7 	b.w	8011034 <__math_uflow>
 8010686:	bf00      	nop
 8010688:	fff00000 	.word	0xfff00000
 801068c:	7ff00000 	.word	0x7ff00000
 8010690:	433fffff 	.word	0x433fffff
 8010694:	3ff00000 	.word	0x3ff00000
 8010698:	3fefffff 	.word	0x3fefffff
 801069c:	3fe00000 	.word	0x3fe00000
 80106a0:	41e00000 	.word	0x41e00000
 80106a4:	4b60      	ldr	r3, [pc, #384]	; (8010828 <__ieee754_pow+0x3f0>)
 80106a6:	2200      	movs	r2, #0
 80106a8:	f7ef fdfe 	bl	80002a8 <__aeabi_dsub>
 80106ac:	a354      	add	r3, pc, #336	; (adr r3, 8010800 <__ieee754_pow+0x3c8>)
 80106ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106b2:	4604      	mov	r4, r0
 80106b4:	460d      	mov	r5, r1
 80106b6:	f7ef ffaf 	bl	8000618 <__aeabi_dmul>
 80106ba:	a353      	add	r3, pc, #332	; (adr r3, 8010808 <__ieee754_pow+0x3d0>)
 80106bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106c0:	4606      	mov	r6, r0
 80106c2:	460f      	mov	r7, r1
 80106c4:	4620      	mov	r0, r4
 80106c6:	4629      	mov	r1, r5
 80106c8:	f7ef ffa6 	bl	8000618 <__aeabi_dmul>
 80106cc:	4b57      	ldr	r3, [pc, #348]	; (801082c <__ieee754_pow+0x3f4>)
 80106ce:	4682      	mov	sl, r0
 80106d0:	468b      	mov	fp, r1
 80106d2:	2200      	movs	r2, #0
 80106d4:	4620      	mov	r0, r4
 80106d6:	4629      	mov	r1, r5
 80106d8:	f7ef ff9e 	bl	8000618 <__aeabi_dmul>
 80106dc:	4602      	mov	r2, r0
 80106de:	460b      	mov	r3, r1
 80106e0:	a14b      	add	r1, pc, #300	; (adr r1, 8010810 <__ieee754_pow+0x3d8>)
 80106e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80106e6:	f7ef fddf 	bl	80002a8 <__aeabi_dsub>
 80106ea:	4622      	mov	r2, r4
 80106ec:	462b      	mov	r3, r5
 80106ee:	f7ef ff93 	bl	8000618 <__aeabi_dmul>
 80106f2:	4602      	mov	r2, r0
 80106f4:	460b      	mov	r3, r1
 80106f6:	2000      	movs	r0, #0
 80106f8:	494d      	ldr	r1, [pc, #308]	; (8010830 <__ieee754_pow+0x3f8>)
 80106fa:	f7ef fdd5 	bl	80002a8 <__aeabi_dsub>
 80106fe:	4622      	mov	r2, r4
 8010700:	4680      	mov	r8, r0
 8010702:	4689      	mov	r9, r1
 8010704:	462b      	mov	r3, r5
 8010706:	4620      	mov	r0, r4
 8010708:	4629      	mov	r1, r5
 801070a:	f7ef ff85 	bl	8000618 <__aeabi_dmul>
 801070e:	4602      	mov	r2, r0
 8010710:	460b      	mov	r3, r1
 8010712:	4640      	mov	r0, r8
 8010714:	4649      	mov	r1, r9
 8010716:	f7ef ff7f 	bl	8000618 <__aeabi_dmul>
 801071a:	a33f      	add	r3, pc, #252	; (adr r3, 8010818 <__ieee754_pow+0x3e0>)
 801071c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010720:	f7ef ff7a 	bl	8000618 <__aeabi_dmul>
 8010724:	4602      	mov	r2, r0
 8010726:	460b      	mov	r3, r1
 8010728:	4650      	mov	r0, sl
 801072a:	4659      	mov	r1, fp
 801072c:	f7ef fdbc 	bl	80002a8 <__aeabi_dsub>
 8010730:	4602      	mov	r2, r0
 8010732:	460b      	mov	r3, r1
 8010734:	4680      	mov	r8, r0
 8010736:	4689      	mov	r9, r1
 8010738:	4630      	mov	r0, r6
 801073a:	4639      	mov	r1, r7
 801073c:	f7ef fdb6 	bl	80002ac <__adddf3>
 8010740:	2000      	movs	r0, #0
 8010742:	4632      	mov	r2, r6
 8010744:	463b      	mov	r3, r7
 8010746:	4604      	mov	r4, r0
 8010748:	460d      	mov	r5, r1
 801074a:	f7ef fdad 	bl	80002a8 <__aeabi_dsub>
 801074e:	4602      	mov	r2, r0
 8010750:	460b      	mov	r3, r1
 8010752:	4640      	mov	r0, r8
 8010754:	4649      	mov	r1, r9
 8010756:	f7ef fda7 	bl	80002a8 <__aeabi_dsub>
 801075a:	9b04      	ldr	r3, [sp, #16]
 801075c:	9a06      	ldr	r2, [sp, #24]
 801075e:	3b01      	subs	r3, #1
 8010760:	4313      	orrs	r3, r2
 8010762:	4682      	mov	sl, r0
 8010764:	468b      	mov	fp, r1
 8010766:	f040 81e7 	bne.w	8010b38 <__ieee754_pow+0x700>
 801076a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8010820 <__ieee754_pow+0x3e8>
 801076e:	eeb0 8a47 	vmov.f32	s16, s14
 8010772:	eef0 8a67 	vmov.f32	s17, s15
 8010776:	e9dd 6700 	ldrd	r6, r7, [sp]
 801077a:	2600      	movs	r6, #0
 801077c:	4632      	mov	r2, r6
 801077e:	463b      	mov	r3, r7
 8010780:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010784:	f7ef fd90 	bl	80002a8 <__aeabi_dsub>
 8010788:	4622      	mov	r2, r4
 801078a:	462b      	mov	r3, r5
 801078c:	f7ef ff44 	bl	8000618 <__aeabi_dmul>
 8010790:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010794:	4680      	mov	r8, r0
 8010796:	4689      	mov	r9, r1
 8010798:	4650      	mov	r0, sl
 801079a:	4659      	mov	r1, fp
 801079c:	f7ef ff3c 	bl	8000618 <__aeabi_dmul>
 80107a0:	4602      	mov	r2, r0
 80107a2:	460b      	mov	r3, r1
 80107a4:	4640      	mov	r0, r8
 80107a6:	4649      	mov	r1, r9
 80107a8:	f7ef fd80 	bl	80002ac <__adddf3>
 80107ac:	4632      	mov	r2, r6
 80107ae:	463b      	mov	r3, r7
 80107b0:	4680      	mov	r8, r0
 80107b2:	4689      	mov	r9, r1
 80107b4:	4620      	mov	r0, r4
 80107b6:	4629      	mov	r1, r5
 80107b8:	f7ef ff2e 	bl	8000618 <__aeabi_dmul>
 80107bc:	460b      	mov	r3, r1
 80107be:	4604      	mov	r4, r0
 80107c0:	460d      	mov	r5, r1
 80107c2:	4602      	mov	r2, r0
 80107c4:	4649      	mov	r1, r9
 80107c6:	4640      	mov	r0, r8
 80107c8:	f7ef fd70 	bl	80002ac <__adddf3>
 80107cc:	4b19      	ldr	r3, [pc, #100]	; (8010834 <__ieee754_pow+0x3fc>)
 80107ce:	4299      	cmp	r1, r3
 80107d0:	ec45 4b19 	vmov	d9, r4, r5
 80107d4:	4606      	mov	r6, r0
 80107d6:	460f      	mov	r7, r1
 80107d8:	468b      	mov	fp, r1
 80107da:	f340 82f1 	ble.w	8010dc0 <__ieee754_pow+0x988>
 80107de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80107e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80107e6:	4303      	orrs	r3, r0
 80107e8:	f000 81e4 	beq.w	8010bb4 <__ieee754_pow+0x77c>
 80107ec:	ec51 0b18 	vmov	r0, r1, d8
 80107f0:	2200      	movs	r2, #0
 80107f2:	2300      	movs	r3, #0
 80107f4:	f7f0 f982 	bl	8000afc <__aeabi_dcmplt>
 80107f8:	3800      	subs	r0, #0
 80107fa:	bf18      	it	ne
 80107fc:	2001      	movne	r0, #1
 80107fe:	e72b      	b.n	8010658 <__ieee754_pow+0x220>
 8010800:	60000000 	.word	0x60000000
 8010804:	3ff71547 	.word	0x3ff71547
 8010808:	f85ddf44 	.word	0xf85ddf44
 801080c:	3e54ae0b 	.word	0x3e54ae0b
 8010810:	55555555 	.word	0x55555555
 8010814:	3fd55555 	.word	0x3fd55555
 8010818:	652b82fe 	.word	0x652b82fe
 801081c:	3ff71547 	.word	0x3ff71547
 8010820:	00000000 	.word	0x00000000
 8010824:	bff00000 	.word	0xbff00000
 8010828:	3ff00000 	.word	0x3ff00000
 801082c:	3fd00000 	.word	0x3fd00000
 8010830:	3fe00000 	.word	0x3fe00000
 8010834:	408fffff 	.word	0x408fffff
 8010838:	4bd5      	ldr	r3, [pc, #852]	; (8010b90 <__ieee754_pow+0x758>)
 801083a:	402b      	ands	r3, r5
 801083c:	2200      	movs	r2, #0
 801083e:	b92b      	cbnz	r3, 801084c <__ieee754_pow+0x414>
 8010840:	4bd4      	ldr	r3, [pc, #848]	; (8010b94 <__ieee754_pow+0x75c>)
 8010842:	f7ef fee9 	bl	8000618 <__aeabi_dmul>
 8010846:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801084a:	460c      	mov	r4, r1
 801084c:	1523      	asrs	r3, r4, #20
 801084e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010852:	4413      	add	r3, r2
 8010854:	9305      	str	r3, [sp, #20]
 8010856:	4bd0      	ldr	r3, [pc, #832]	; (8010b98 <__ieee754_pow+0x760>)
 8010858:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801085c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010860:	429c      	cmp	r4, r3
 8010862:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010866:	dd08      	ble.n	801087a <__ieee754_pow+0x442>
 8010868:	4bcc      	ldr	r3, [pc, #816]	; (8010b9c <__ieee754_pow+0x764>)
 801086a:	429c      	cmp	r4, r3
 801086c:	f340 8162 	ble.w	8010b34 <__ieee754_pow+0x6fc>
 8010870:	9b05      	ldr	r3, [sp, #20]
 8010872:	3301      	adds	r3, #1
 8010874:	9305      	str	r3, [sp, #20]
 8010876:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801087a:	2400      	movs	r4, #0
 801087c:	00e3      	lsls	r3, r4, #3
 801087e:	9307      	str	r3, [sp, #28]
 8010880:	4bc7      	ldr	r3, [pc, #796]	; (8010ba0 <__ieee754_pow+0x768>)
 8010882:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010886:	ed93 7b00 	vldr	d7, [r3]
 801088a:	4629      	mov	r1, r5
 801088c:	ec53 2b17 	vmov	r2, r3, d7
 8010890:	eeb0 9a47 	vmov.f32	s18, s14
 8010894:	eef0 9a67 	vmov.f32	s19, s15
 8010898:	4682      	mov	sl, r0
 801089a:	f7ef fd05 	bl	80002a8 <__aeabi_dsub>
 801089e:	4652      	mov	r2, sl
 80108a0:	4606      	mov	r6, r0
 80108a2:	460f      	mov	r7, r1
 80108a4:	462b      	mov	r3, r5
 80108a6:	ec51 0b19 	vmov	r0, r1, d9
 80108aa:	f7ef fcff 	bl	80002ac <__adddf3>
 80108ae:	4602      	mov	r2, r0
 80108b0:	460b      	mov	r3, r1
 80108b2:	2000      	movs	r0, #0
 80108b4:	49bb      	ldr	r1, [pc, #748]	; (8010ba4 <__ieee754_pow+0x76c>)
 80108b6:	f7ef ffd9 	bl	800086c <__aeabi_ddiv>
 80108ba:	ec41 0b1a 	vmov	d10, r0, r1
 80108be:	4602      	mov	r2, r0
 80108c0:	460b      	mov	r3, r1
 80108c2:	4630      	mov	r0, r6
 80108c4:	4639      	mov	r1, r7
 80108c6:	f7ef fea7 	bl	8000618 <__aeabi_dmul>
 80108ca:	2300      	movs	r3, #0
 80108cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80108d0:	9302      	str	r3, [sp, #8]
 80108d2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80108d6:	46ab      	mov	fp, r5
 80108d8:	106d      	asrs	r5, r5, #1
 80108da:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80108de:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80108e2:	ec41 0b18 	vmov	d8, r0, r1
 80108e6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80108ea:	2200      	movs	r2, #0
 80108ec:	4640      	mov	r0, r8
 80108ee:	4649      	mov	r1, r9
 80108f0:	4614      	mov	r4, r2
 80108f2:	461d      	mov	r5, r3
 80108f4:	f7ef fe90 	bl	8000618 <__aeabi_dmul>
 80108f8:	4602      	mov	r2, r0
 80108fa:	460b      	mov	r3, r1
 80108fc:	4630      	mov	r0, r6
 80108fe:	4639      	mov	r1, r7
 8010900:	f7ef fcd2 	bl	80002a8 <__aeabi_dsub>
 8010904:	ec53 2b19 	vmov	r2, r3, d9
 8010908:	4606      	mov	r6, r0
 801090a:	460f      	mov	r7, r1
 801090c:	4620      	mov	r0, r4
 801090e:	4629      	mov	r1, r5
 8010910:	f7ef fcca 	bl	80002a8 <__aeabi_dsub>
 8010914:	4602      	mov	r2, r0
 8010916:	460b      	mov	r3, r1
 8010918:	4650      	mov	r0, sl
 801091a:	4659      	mov	r1, fp
 801091c:	f7ef fcc4 	bl	80002a8 <__aeabi_dsub>
 8010920:	4642      	mov	r2, r8
 8010922:	464b      	mov	r3, r9
 8010924:	f7ef fe78 	bl	8000618 <__aeabi_dmul>
 8010928:	4602      	mov	r2, r0
 801092a:	460b      	mov	r3, r1
 801092c:	4630      	mov	r0, r6
 801092e:	4639      	mov	r1, r7
 8010930:	f7ef fcba 	bl	80002a8 <__aeabi_dsub>
 8010934:	ec53 2b1a 	vmov	r2, r3, d10
 8010938:	f7ef fe6e 	bl	8000618 <__aeabi_dmul>
 801093c:	ec53 2b18 	vmov	r2, r3, d8
 8010940:	ec41 0b19 	vmov	d9, r0, r1
 8010944:	ec51 0b18 	vmov	r0, r1, d8
 8010948:	f7ef fe66 	bl	8000618 <__aeabi_dmul>
 801094c:	a37c      	add	r3, pc, #496	; (adr r3, 8010b40 <__ieee754_pow+0x708>)
 801094e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010952:	4604      	mov	r4, r0
 8010954:	460d      	mov	r5, r1
 8010956:	f7ef fe5f 	bl	8000618 <__aeabi_dmul>
 801095a:	a37b      	add	r3, pc, #492	; (adr r3, 8010b48 <__ieee754_pow+0x710>)
 801095c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010960:	f7ef fca4 	bl	80002ac <__adddf3>
 8010964:	4622      	mov	r2, r4
 8010966:	462b      	mov	r3, r5
 8010968:	f7ef fe56 	bl	8000618 <__aeabi_dmul>
 801096c:	a378      	add	r3, pc, #480	; (adr r3, 8010b50 <__ieee754_pow+0x718>)
 801096e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010972:	f7ef fc9b 	bl	80002ac <__adddf3>
 8010976:	4622      	mov	r2, r4
 8010978:	462b      	mov	r3, r5
 801097a:	f7ef fe4d 	bl	8000618 <__aeabi_dmul>
 801097e:	a376      	add	r3, pc, #472	; (adr r3, 8010b58 <__ieee754_pow+0x720>)
 8010980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010984:	f7ef fc92 	bl	80002ac <__adddf3>
 8010988:	4622      	mov	r2, r4
 801098a:	462b      	mov	r3, r5
 801098c:	f7ef fe44 	bl	8000618 <__aeabi_dmul>
 8010990:	a373      	add	r3, pc, #460	; (adr r3, 8010b60 <__ieee754_pow+0x728>)
 8010992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010996:	f7ef fc89 	bl	80002ac <__adddf3>
 801099a:	4622      	mov	r2, r4
 801099c:	462b      	mov	r3, r5
 801099e:	f7ef fe3b 	bl	8000618 <__aeabi_dmul>
 80109a2:	a371      	add	r3, pc, #452	; (adr r3, 8010b68 <__ieee754_pow+0x730>)
 80109a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109a8:	f7ef fc80 	bl	80002ac <__adddf3>
 80109ac:	4622      	mov	r2, r4
 80109ae:	4606      	mov	r6, r0
 80109b0:	460f      	mov	r7, r1
 80109b2:	462b      	mov	r3, r5
 80109b4:	4620      	mov	r0, r4
 80109b6:	4629      	mov	r1, r5
 80109b8:	f7ef fe2e 	bl	8000618 <__aeabi_dmul>
 80109bc:	4602      	mov	r2, r0
 80109be:	460b      	mov	r3, r1
 80109c0:	4630      	mov	r0, r6
 80109c2:	4639      	mov	r1, r7
 80109c4:	f7ef fe28 	bl	8000618 <__aeabi_dmul>
 80109c8:	4642      	mov	r2, r8
 80109ca:	4604      	mov	r4, r0
 80109cc:	460d      	mov	r5, r1
 80109ce:	464b      	mov	r3, r9
 80109d0:	ec51 0b18 	vmov	r0, r1, d8
 80109d4:	f7ef fc6a 	bl	80002ac <__adddf3>
 80109d8:	ec53 2b19 	vmov	r2, r3, d9
 80109dc:	f7ef fe1c 	bl	8000618 <__aeabi_dmul>
 80109e0:	4622      	mov	r2, r4
 80109e2:	462b      	mov	r3, r5
 80109e4:	f7ef fc62 	bl	80002ac <__adddf3>
 80109e8:	4642      	mov	r2, r8
 80109ea:	4682      	mov	sl, r0
 80109ec:	468b      	mov	fp, r1
 80109ee:	464b      	mov	r3, r9
 80109f0:	4640      	mov	r0, r8
 80109f2:	4649      	mov	r1, r9
 80109f4:	f7ef fe10 	bl	8000618 <__aeabi_dmul>
 80109f8:	4b6b      	ldr	r3, [pc, #428]	; (8010ba8 <__ieee754_pow+0x770>)
 80109fa:	2200      	movs	r2, #0
 80109fc:	4606      	mov	r6, r0
 80109fe:	460f      	mov	r7, r1
 8010a00:	f7ef fc54 	bl	80002ac <__adddf3>
 8010a04:	4652      	mov	r2, sl
 8010a06:	465b      	mov	r3, fp
 8010a08:	f7ef fc50 	bl	80002ac <__adddf3>
 8010a0c:	2000      	movs	r0, #0
 8010a0e:	4604      	mov	r4, r0
 8010a10:	460d      	mov	r5, r1
 8010a12:	4602      	mov	r2, r0
 8010a14:	460b      	mov	r3, r1
 8010a16:	4640      	mov	r0, r8
 8010a18:	4649      	mov	r1, r9
 8010a1a:	f7ef fdfd 	bl	8000618 <__aeabi_dmul>
 8010a1e:	4b62      	ldr	r3, [pc, #392]	; (8010ba8 <__ieee754_pow+0x770>)
 8010a20:	4680      	mov	r8, r0
 8010a22:	4689      	mov	r9, r1
 8010a24:	2200      	movs	r2, #0
 8010a26:	4620      	mov	r0, r4
 8010a28:	4629      	mov	r1, r5
 8010a2a:	f7ef fc3d 	bl	80002a8 <__aeabi_dsub>
 8010a2e:	4632      	mov	r2, r6
 8010a30:	463b      	mov	r3, r7
 8010a32:	f7ef fc39 	bl	80002a8 <__aeabi_dsub>
 8010a36:	4602      	mov	r2, r0
 8010a38:	460b      	mov	r3, r1
 8010a3a:	4650      	mov	r0, sl
 8010a3c:	4659      	mov	r1, fp
 8010a3e:	f7ef fc33 	bl	80002a8 <__aeabi_dsub>
 8010a42:	ec53 2b18 	vmov	r2, r3, d8
 8010a46:	f7ef fde7 	bl	8000618 <__aeabi_dmul>
 8010a4a:	4622      	mov	r2, r4
 8010a4c:	4606      	mov	r6, r0
 8010a4e:	460f      	mov	r7, r1
 8010a50:	462b      	mov	r3, r5
 8010a52:	ec51 0b19 	vmov	r0, r1, d9
 8010a56:	f7ef fddf 	bl	8000618 <__aeabi_dmul>
 8010a5a:	4602      	mov	r2, r0
 8010a5c:	460b      	mov	r3, r1
 8010a5e:	4630      	mov	r0, r6
 8010a60:	4639      	mov	r1, r7
 8010a62:	f7ef fc23 	bl	80002ac <__adddf3>
 8010a66:	4606      	mov	r6, r0
 8010a68:	460f      	mov	r7, r1
 8010a6a:	4602      	mov	r2, r0
 8010a6c:	460b      	mov	r3, r1
 8010a6e:	4640      	mov	r0, r8
 8010a70:	4649      	mov	r1, r9
 8010a72:	f7ef fc1b 	bl	80002ac <__adddf3>
 8010a76:	a33e      	add	r3, pc, #248	; (adr r3, 8010b70 <__ieee754_pow+0x738>)
 8010a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a7c:	2000      	movs	r0, #0
 8010a7e:	4604      	mov	r4, r0
 8010a80:	460d      	mov	r5, r1
 8010a82:	f7ef fdc9 	bl	8000618 <__aeabi_dmul>
 8010a86:	4642      	mov	r2, r8
 8010a88:	ec41 0b18 	vmov	d8, r0, r1
 8010a8c:	464b      	mov	r3, r9
 8010a8e:	4620      	mov	r0, r4
 8010a90:	4629      	mov	r1, r5
 8010a92:	f7ef fc09 	bl	80002a8 <__aeabi_dsub>
 8010a96:	4602      	mov	r2, r0
 8010a98:	460b      	mov	r3, r1
 8010a9a:	4630      	mov	r0, r6
 8010a9c:	4639      	mov	r1, r7
 8010a9e:	f7ef fc03 	bl	80002a8 <__aeabi_dsub>
 8010aa2:	a335      	add	r3, pc, #212	; (adr r3, 8010b78 <__ieee754_pow+0x740>)
 8010aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aa8:	f7ef fdb6 	bl	8000618 <__aeabi_dmul>
 8010aac:	a334      	add	r3, pc, #208	; (adr r3, 8010b80 <__ieee754_pow+0x748>)
 8010aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ab2:	4606      	mov	r6, r0
 8010ab4:	460f      	mov	r7, r1
 8010ab6:	4620      	mov	r0, r4
 8010ab8:	4629      	mov	r1, r5
 8010aba:	f7ef fdad 	bl	8000618 <__aeabi_dmul>
 8010abe:	4602      	mov	r2, r0
 8010ac0:	460b      	mov	r3, r1
 8010ac2:	4630      	mov	r0, r6
 8010ac4:	4639      	mov	r1, r7
 8010ac6:	f7ef fbf1 	bl	80002ac <__adddf3>
 8010aca:	9a07      	ldr	r2, [sp, #28]
 8010acc:	4b37      	ldr	r3, [pc, #220]	; (8010bac <__ieee754_pow+0x774>)
 8010ace:	4413      	add	r3, r2
 8010ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ad4:	f7ef fbea 	bl	80002ac <__adddf3>
 8010ad8:	4682      	mov	sl, r0
 8010ada:	9805      	ldr	r0, [sp, #20]
 8010adc:	468b      	mov	fp, r1
 8010ade:	f7ef fd31 	bl	8000544 <__aeabi_i2d>
 8010ae2:	9a07      	ldr	r2, [sp, #28]
 8010ae4:	4b32      	ldr	r3, [pc, #200]	; (8010bb0 <__ieee754_pow+0x778>)
 8010ae6:	4413      	add	r3, r2
 8010ae8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010aec:	4606      	mov	r6, r0
 8010aee:	460f      	mov	r7, r1
 8010af0:	4652      	mov	r2, sl
 8010af2:	465b      	mov	r3, fp
 8010af4:	ec51 0b18 	vmov	r0, r1, d8
 8010af8:	f7ef fbd8 	bl	80002ac <__adddf3>
 8010afc:	4642      	mov	r2, r8
 8010afe:	464b      	mov	r3, r9
 8010b00:	f7ef fbd4 	bl	80002ac <__adddf3>
 8010b04:	4632      	mov	r2, r6
 8010b06:	463b      	mov	r3, r7
 8010b08:	f7ef fbd0 	bl	80002ac <__adddf3>
 8010b0c:	2000      	movs	r0, #0
 8010b0e:	4632      	mov	r2, r6
 8010b10:	463b      	mov	r3, r7
 8010b12:	4604      	mov	r4, r0
 8010b14:	460d      	mov	r5, r1
 8010b16:	f7ef fbc7 	bl	80002a8 <__aeabi_dsub>
 8010b1a:	4642      	mov	r2, r8
 8010b1c:	464b      	mov	r3, r9
 8010b1e:	f7ef fbc3 	bl	80002a8 <__aeabi_dsub>
 8010b22:	ec53 2b18 	vmov	r2, r3, d8
 8010b26:	f7ef fbbf 	bl	80002a8 <__aeabi_dsub>
 8010b2a:	4602      	mov	r2, r0
 8010b2c:	460b      	mov	r3, r1
 8010b2e:	4650      	mov	r0, sl
 8010b30:	4659      	mov	r1, fp
 8010b32:	e610      	b.n	8010756 <__ieee754_pow+0x31e>
 8010b34:	2401      	movs	r4, #1
 8010b36:	e6a1      	b.n	801087c <__ieee754_pow+0x444>
 8010b38:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8010b88 <__ieee754_pow+0x750>
 8010b3c:	e617      	b.n	801076e <__ieee754_pow+0x336>
 8010b3e:	bf00      	nop
 8010b40:	4a454eef 	.word	0x4a454eef
 8010b44:	3fca7e28 	.word	0x3fca7e28
 8010b48:	93c9db65 	.word	0x93c9db65
 8010b4c:	3fcd864a 	.word	0x3fcd864a
 8010b50:	a91d4101 	.word	0xa91d4101
 8010b54:	3fd17460 	.word	0x3fd17460
 8010b58:	518f264d 	.word	0x518f264d
 8010b5c:	3fd55555 	.word	0x3fd55555
 8010b60:	db6fabff 	.word	0xdb6fabff
 8010b64:	3fdb6db6 	.word	0x3fdb6db6
 8010b68:	33333303 	.word	0x33333303
 8010b6c:	3fe33333 	.word	0x3fe33333
 8010b70:	e0000000 	.word	0xe0000000
 8010b74:	3feec709 	.word	0x3feec709
 8010b78:	dc3a03fd 	.word	0xdc3a03fd
 8010b7c:	3feec709 	.word	0x3feec709
 8010b80:	145b01f5 	.word	0x145b01f5
 8010b84:	be3e2fe0 	.word	0xbe3e2fe0
 8010b88:	00000000 	.word	0x00000000
 8010b8c:	3ff00000 	.word	0x3ff00000
 8010b90:	7ff00000 	.word	0x7ff00000
 8010b94:	43400000 	.word	0x43400000
 8010b98:	0003988e 	.word	0x0003988e
 8010b9c:	000bb679 	.word	0x000bb679
 8010ba0:	08011a28 	.word	0x08011a28
 8010ba4:	3ff00000 	.word	0x3ff00000
 8010ba8:	40080000 	.word	0x40080000
 8010bac:	08011a48 	.word	0x08011a48
 8010bb0:	08011a38 	.word	0x08011a38
 8010bb4:	a3b5      	add	r3, pc, #724	; (adr r3, 8010e8c <__ieee754_pow+0xa54>)
 8010bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bba:	4640      	mov	r0, r8
 8010bbc:	4649      	mov	r1, r9
 8010bbe:	f7ef fb75 	bl	80002ac <__adddf3>
 8010bc2:	4622      	mov	r2, r4
 8010bc4:	ec41 0b1a 	vmov	d10, r0, r1
 8010bc8:	462b      	mov	r3, r5
 8010bca:	4630      	mov	r0, r6
 8010bcc:	4639      	mov	r1, r7
 8010bce:	f7ef fb6b 	bl	80002a8 <__aeabi_dsub>
 8010bd2:	4602      	mov	r2, r0
 8010bd4:	460b      	mov	r3, r1
 8010bd6:	ec51 0b1a 	vmov	r0, r1, d10
 8010bda:	f7ef ffad 	bl	8000b38 <__aeabi_dcmpgt>
 8010bde:	2800      	cmp	r0, #0
 8010be0:	f47f ae04 	bne.w	80107ec <__ieee754_pow+0x3b4>
 8010be4:	4aa4      	ldr	r2, [pc, #656]	; (8010e78 <__ieee754_pow+0xa40>)
 8010be6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010bea:	4293      	cmp	r3, r2
 8010bec:	f340 8108 	ble.w	8010e00 <__ieee754_pow+0x9c8>
 8010bf0:	151b      	asrs	r3, r3, #20
 8010bf2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8010bf6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8010bfa:	fa4a f303 	asr.w	r3, sl, r3
 8010bfe:	445b      	add	r3, fp
 8010c00:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8010c04:	4e9d      	ldr	r6, [pc, #628]	; (8010e7c <__ieee754_pow+0xa44>)
 8010c06:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8010c0a:	4116      	asrs	r6, r2
 8010c0c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8010c10:	2000      	movs	r0, #0
 8010c12:	ea23 0106 	bic.w	r1, r3, r6
 8010c16:	f1c2 0214 	rsb	r2, r2, #20
 8010c1a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8010c1e:	fa4a fa02 	asr.w	sl, sl, r2
 8010c22:	f1bb 0f00 	cmp.w	fp, #0
 8010c26:	4602      	mov	r2, r0
 8010c28:	460b      	mov	r3, r1
 8010c2a:	4620      	mov	r0, r4
 8010c2c:	4629      	mov	r1, r5
 8010c2e:	bfb8      	it	lt
 8010c30:	f1ca 0a00 	rsblt	sl, sl, #0
 8010c34:	f7ef fb38 	bl	80002a8 <__aeabi_dsub>
 8010c38:	ec41 0b19 	vmov	d9, r0, r1
 8010c3c:	4642      	mov	r2, r8
 8010c3e:	464b      	mov	r3, r9
 8010c40:	ec51 0b19 	vmov	r0, r1, d9
 8010c44:	f7ef fb32 	bl	80002ac <__adddf3>
 8010c48:	a37b      	add	r3, pc, #492	; (adr r3, 8010e38 <__ieee754_pow+0xa00>)
 8010c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c4e:	2000      	movs	r0, #0
 8010c50:	4604      	mov	r4, r0
 8010c52:	460d      	mov	r5, r1
 8010c54:	f7ef fce0 	bl	8000618 <__aeabi_dmul>
 8010c58:	ec53 2b19 	vmov	r2, r3, d9
 8010c5c:	4606      	mov	r6, r0
 8010c5e:	460f      	mov	r7, r1
 8010c60:	4620      	mov	r0, r4
 8010c62:	4629      	mov	r1, r5
 8010c64:	f7ef fb20 	bl	80002a8 <__aeabi_dsub>
 8010c68:	4602      	mov	r2, r0
 8010c6a:	460b      	mov	r3, r1
 8010c6c:	4640      	mov	r0, r8
 8010c6e:	4649      	mov	r1, r9
 8010c70:	f7ef fb1a 	bl	80002a8 <__aeabi_dsub>
 8010c74:	a372      	add	r3, pc, #456	; (adr r3, 8010e40 <__ieee754_pow+0xa08>)
 8010c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c7a:	f7ef fccd 	bl	8000618 <__aeabi_dmul>
 8010c7e:	a372      	add	r3, pc, #456	; (adr r3, 8010e48 <__ieee754_pow+0xa10>)
 8010c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c84:	4680      	mov	r8, r0
 8010c86:	4689      	mov	r9, r1
 8010c88:	4620      	mov	r0, r4
 8010c8a:	4629      	mov	r1, r5
 8010c8c:	f7ef fcc4 	bl	8000618 <__aeabi_dmul>
 8010c90:	4602      	mov	r2, r0
 8010c92:	460b      	mov	r3, r1
 8010c94:	4640      	mov	r0, r8
 8010c96:	4649      	mov	r1, r9
 8010c98:	f7ef fb08 	bl	80002ac <__adddf3>
 8010c9c:	4604      	mov	r4, r0
 8010c9e:	460d      	mov	r5, r1
 8010ca0:	4602      	mov	r2, r0
 8010ca2:	460b      	mov	r3, r1
 8010ca4:	4630      	mov	r0, r6
 8010ca6:	4639      	mov	r1, r7
 8010ca8:	f7ef fb00 	bl	80002ac <__adddf3>
 8010cac:	4632      	mov	r2, r6
 8010cae:	463b      	mov	r3, r7
 8010cb0:	4680      	mov	r8, r0
 8010cb2:	4689      	mov	r9, r1
 8010cb4:	f7ef faf8 	bl	80002a8 <__aeabi_dsub>
 8010cb8:	4602      	mov	r2, r0
 8010cba:	460b      	mov	r3, r1
 8010cbc:	4620      	mov	r0, r4
 8010cbe:	4629      	mov	r1, r5
 8010cc0:	f7ef faf2 	bl	80002a8 <__aeabi_dsub>
 8010cc4:	4642      	mov	r2, r8
 8010cc6:	4606      	mov	r6, r0
 8010cc8:	460f      	mov	r7, r1
 8010cca:	464b      	mov	r3, r9
 8010ccc:	4640      	mov	r0, r8
 8010cce:	4649      	mov	r1, r9
 8010cd0:	f7ef fca2 	bl	8000618 <__aeabi_dmul>
 8010cd4:	a35e      	add	r3, pc, #376	; (adr r3, 8010e50 <__ieee754_pow+0xa18>)
 8010cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cda:	4604      	mov	r4, r0
 8010cdc:	460d      	mov	r5, r1
 8010cde:	f7ef fc9b 	bl	8000618 <__aeabi_dmul>
 8010ce2:	a35d      	add	r3, pc, #372	; (adr r3, 8010e58 <__ieee754_pow+0xa20>)
 8010ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ce8:	f7ef fade 	bl	80002a8 <__aeabi_dsub>
 8010cec:	4622      	mov	r2, r4
 8010cee:	462b      	mov	r3, r5
 8010cf0:	f7ef fc92 	bl	8000618 <__aeabi_dmul>
 8010cf4:	a35a      	add	r3, pc, #360	; (adr r3, 8010e60 <__ieee754_pow+0xa28>)
 8010cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cfa:	f7ef fad7 	bl	80002ac <__adddf3>
 8010cfe:	4622      	mov	r2, r4
 8010d00:	462b      	mov	r3, r5
 8010d02:	f7ef fc89 	bl	8000618 <__aeabi_dmul>
 8010d06:	a358      	add	r3, pc, #352	; (adr r3, 8010e68 <__ieee754_pow+0xa30>)
 8010d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d0c:	f7ef facc 	bl	80002a8 <__aeabi_dsub>
 8010d10:	4622      	mov	r2, r4
 8010d12:	462b      	mov	r3, r5
 8010d14:	f7ef fc80 	bl	8000618 <__aeabi_dmul>
 8010d18:	a355      	add	r3, pc, #340	; (adr r3, 8010e70 <__ieee754_pow+0xa38>)
 8010d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d1e:	f7ef fac5 	bl	80002ac <__adddf3>
 8010d22:	4622      	mov	r2, r4
 8010d24:	462b      	mov	r3, r5
 8010d26:	f7ef fc77 	bl	8000618 <__aeabi_dmul>
 8010d2a:	4602      	mov	r2, r0
 8010d2c:	460b      	mov	r3, r1
 8010d2e:	4640      	mov	r0, r8
 8010d30:	4649      	mov	r1, r9
 8010d32:	f7ef fab9 	bl	80002a8 <__aeabi_dsub>
 8010d36:	4604      	mov	r4, r0
 8010d38:	460d      	mov	r5, r1
 8010d3a:	4602      	mov	r2, r0
 8010d3c:	460b      	mov	r3, r1
 8010d3e:	4640      	mov	r0, r8
 8010d40:	4649      	mov	r1, r9
 8010d42:	f7ef fc69 	bl	8000618 <__aeabi_dmul>
 8010d46:	2200      	movs	r2, #0
 8010d48:	ec41 0b19 	vmov	d9, r0, r1
 8010d4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010d50:	4620      	mov	r0, r4
 8010d52:	4629      	mov	r1, r5
 8010d54:	f7ef faa8 	bl	80002a8 <__aeabi_dsub>
 8010d58:	4602      	mov	r2, r0
 8010d5a:	460b      	mov	r3, r1
 8010d5c:	ec51 0b19 	vmov	r0, r1, d9
 8010d60:	f7ef fd84 	bl	800086c <__aeabi_ddiv>
 8010d64:	4632      	mov	r2, r6
 8010d66:	4604      	mov	r4, r0
 8010d68:	460d      	mov	r5, r1
 8010d6a:	463b      	mov	r3, r7
 8010d6c:	4640      	mov	r0, r8
 8010d6e:	4649      	mov	r1, r9
 8010d70:	f7ef fc52 	bl	8000618 <__aeabi_dmul>
 8010d74:	4632      	mov	r2, r6
 8010d76:	463b      	mov	r3, r7
 8010d78:	f7ef fa98 	bl	80002ac <__adddf3>
 8010d7c:	4602      	mov	r2, r0
 8010d7e:	460b      	mov	r3, r1
 8010d80:	4620      	mov	r0, r4
 8010d82:	4629      	mov	r1, r5
 8010d84:	f7ef fa90 	bl	80002a8 <__aeabi_dsub>
 8010d88:	4642      	mov	r2, r8
 8010d8a:	464b      	mov	r3, r9
 8010d8c:	f7ef fa8c 	bl	80002a8 <__aeabi_dsub>
 8010d90:	460b      	mov	r3, r1
 8010d92:	4602      	mov	r2, r0
 8010d94:	493a      	ldr	r1, [pc, #232]	; (8010e80 <__ieee754_pow+0xa48>)
 8010d96:	2000      	movs	r0, #0
 8010d98:	f7ef fa86 	bl	80002a8 <__aeabi_dsub>
 8010d9c:	ec41 0b10 	vmov	d0, r0, r1
 8010da0:	ee10 3a90 	vmov	r3, s1
 8010da4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8010da8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010dac:	da2b      	bge.n	8010e06 <__ieee754_pow+0x9ce>
 8010dae:	4650      	mov	r0, sl
 8010db0:	f000 f966 	bl	8011080 <scalbn>
 8010db4:	ec51 0b10 	vmov	r0, r1, d0
 8010db8:	ec53 2b18 	vmov	r2, r3, d8
 8010dbc:	f7ff bbed 	b.w	801059a <__ieee754_pow+0x162>
 8010dc0:	4b30      	ldr	r3, [pc, #192]	; (8010e84 <__ieee754_pow+0xa4c>)
 8010dc2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8010dc6:	429e      	cmp	r6, r3
 8010dc8:	f77f af0c 	ble.w	8010be4 <__ieee754_pow+0x7ac>
 8010dcc:	4b2e      	ldr	r3, [pc, #184]	; (8010e88 <__ieee754_pow+0xa50>)
 8010dce:	440b      	add	r3, r1
 8010dd0:	4303      	orrs	r3, r0
 8010dd2:	d009      	beq.n	8010de8 <__ieee754_pow+0x9b0>
 8010dd4:	ec51 0b18 	vmov	r0, r1, d8
 8010dd8:	2200      	movs	r2, #0
 8010dda:	2300      	movs	r3, #0
 8010ddc:	f7ef fe8e 	bl	8000afc <__aeabi_dcmplt>
 8010de0:	3800      	subs	r0, #0
 8010de2:	bf18      	it	ne
 8010de4:	2001      	movne	r0, #1
 8010de6:	e447      	b.n	8010678 <__ieee754_pow+0x240>
 8010de8:	4622      	mov	r2, r4
 8010dea:	462b      	mov	r3, r5
 8010dec:	f7ef fa5c 	bl	80002a8 <__aeabi_dsub>
 8010df0:	4642      	mov	r2, r8
 8010df2:	464b      	mov	r3, r9
 8010df4:	f7ef fe96 	bl	8000b24 <__aeabi_dcmpge>
 8010df8:	2800      	cmp	r0, #0
 8010dfa:	f43f aef3 	beq.w	8010be4 <__ieee754_pow+0x7ac>
 8010dfe:	e7e9      	b.n	8010dd4 <__ieee754_pow+0x99c>
 8010e00:	f04f 0a00 	mov.w	sl, #0
 8010e04:	e71a      	b.n	8010c3c <__ieee754_pow+0x804>
 8010e06:	ec51 0b10 	vmov	r0, r1, d0
 8010e0a:	4619      	mov	r1, r3
 8010e0c:	e7d4      	b.n	8010db8 <__ieee754_pow+0x980>
 8010e0e:	491c      	ldr	r1, [pc, #112]	; (8010e80 <__ieee754_pow+0xa48>)
 8010e10:	2000      	movs	r0, #0
 8010e12:	f7ff bb30 	b.w	8010476 <__ieee754_pow+0x3e>
 8010e16:	2000      	movs	r0, #0
 8010e18:	2100      	movs	r1, #0
 8010e1a:	f7ff bb2c 	b.w	8010476 <__ieee754_pow+0x3e>
 8010e1e:	4630      	mov	r0, r6
 8010e20:	4639      	mov	r1, r7
 8010e22:	f7ff bb28 	b.w	8010476 <__ieee754_pow+0x3e>
 8010e26:	9204      	str	r2, [sp, #16]
 8010e28:	f7ff bb7a 	b.w	8010520 <__ieee754_pow+0xe8>
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	f7ff bb64 	b.w	80104fa <__ieee754_pow+0xc2>
 8010e32:	bf00      	nop
 8010e34:	f3af 8000 	nop.w
 8010e38:	00000000 	.word	0x00000000
 8010e3c:	3fe62e43 	.word	0x3fe62e43
 8010e40:	fefa39ef 	.word	0xfefa39ef
 8010e44:	3fe62e42 	.word	0x3fe62e42
 8010e48:	0ca86c39 	.word	0x0ca86c39
 8010e4c:	be205c61 	.word	0xbe205c61
 8010e50:	72bea4d0 	.word	0x72bea4d0
 8010e54:	3e663769 	.word	0x3e663769
 8010e58:	c5d26bf1 	.word	0xc5d26bf1
 8010e5c:	3ebbbd41 	.word	0x3ebbbd41
 8010e60:	af25de2c 	.word	0xaf25de2c
 8010e64:	3f11566a 	.word	0x3f11566a
 8010e68:	16bebd93 	.word	0x16bebd93
 8010e6c:	3f66c16c 	.word	0x3f66c16c
 8010e70:	5555553e 	.word	0x5555553e
 8010e74:	3fc55555 	.word	0x3fc55555
 8010e78:	3fe00000 	.word	0x3fe00000
 8010e7c:	000fffff 	.word	0x000fffff
 8010e80:	3ff00000 	.word	0x3ff00000
 8010e84:	4090cbff 	.word	0x4090cbff
 8010e88:	3f6f3400 	.word	0x3f6f3400
 8010e8c:	652b82fe 	.word	0x652b82fe
 8010e90:	3c971547 	.word	0x3c971547

08010e94 <__ieee754_sqrt>:
 8010e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e98:	ec55 4b10 	vmov	r4, r5, d0
 8010e9c:	4e55      	ldr	r6, [pc, #340]	; (8010ff4 <__ieee754_sqrt+0x160>)
 8010e9e:	43ae      	bics	r6, r5
 8010ea0:	ee10 0a10 	vmov	r0, s0
 8010ea4:	ee10 3a10 	vmov	r3, s0
 8010ea8:	462a      	mov	r2, r5
 8010eaa:	4629      	mov	r1, r5
 8010eac:	d110      	bne.n	8010ed0 <__ieee754_sqrt+0x3c>
 8010eae:	ee10 2a10 	vmov	r2, s0
 8010eb2:	462b      	mov	r3, r5
 8010eb4:	f7ef fbb0 	bl	8000618 <__aeabi_dmul>
 8010eb8:	4602      	mov	r2, r0
 8010eba:	460b      	mov	r3, r1
 8010ebc:	4620      	mov	r0, r4
 8010ebe:	4629      	mov	r1, r5
 8010ec0:	f7ef f9f4 	bl	80002ac <__adddf3>
 8010ec4:	4604      	mov	r4, r0
 8010ec6:	460d      	mov	r5, r1
 8010ec8:	ec45 4b10 	vmov	d0, r4, r5
 8010ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ed0:	2d00      	cmp	r5, #0
 8010ed2:	dc10      	bgt.n	8010ef6 <__ieee754_sqrt+0x62>
 8010ed4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010ed8:	4330      	orrs	r0, r6
 8010eda:	d0f5      	beq.n	8010ec8 <__ieee754_sqrt+0x34>
 8010edc:	b15d      	cbz	r5, 8010ef6 <__ieee754_sqrt+0x62>
 8010ede:	ee10 2a10 	vmov	r2, s0
 8010ee2:	462b      	mov	r3, r5
 8010ee4:	ee10 0a10 	vmov	r0, s0
 8010ee8:	f7ef f9de 	bl	80002a8 <__aeabi_dsub>
 8010eec:	4602      	mov	r2, r0
 8010eee:	460b      	mov	r3, r1
 8010ef0:	f7ef fcbc 	bl	800086c <__aeabi_ddiv>
 8010ef4:	e7e6      	b.n	8010ec4 <__ieee754_sqrt+0x30>
 8010ef6:	1512      	asrs	r2, r2, #20
 8010ef8:	d074      	beq.n	8010fe4 <__ieee754_sqrt+0x150>
 8010efa:	07d4      	lsls	r4, r2, #31
 8010efc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010f00:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8010f04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010f08:	bf5e      	ittt	pl
 8010f0a:	0fda      	lsrpl	r2, r3, #31
 8010f0c:	005b      	lslpl	r3, r3, #1
 8010f0e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8010f12:	2400      	movs	r4, #0
 8010f14:	0fda      	lsrs	r2, r3, #31
 8010f16:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8010f1a:	107f      	asrs	r7, r7, #1
 8010f1c:	005b      	lsls	r3, r3, #1
 8010f1e:	2516      	movs	r5, #22
 8010f20:	4620      	mov	r0, r4
 8010f22:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8010f26:	1886      	adds	r6, r0, r2
 8010f28:	428e      	cmp	r6, r1
 8010f2a:	bfde      	ittt	le
 8010f2c:	1b89      	suble	r1, r1, r6
 8010f2e:	18b0      	addle	r0, r6, r2
 8010f30:	18a4      	addle	r4, r4, r2
 8010f32:	0049      	lsls	r1, r1, #1
 8010f34:	3d01      	subs	r5, #1
 8010f36:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8010f3a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8010f3e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010f42:	d1f0      	bne.n	8010f26 <__ieee754_sqrt+0x92>
 8010f44:	462a      	mov	r2, r5
 8010f46:	f04f 0e20 	mov.w	lr, #32
 8010f4a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8010f4e:	4281      	cmp	r1, r0
 8010f50:	eb06 0c05 	add.w	ip, r6, r5
 8010f54:	dc02      	bgt.n	8010f5c <__ieee754_sqrt+0xc8>
 8010f56:	d113      	bne.n	8010f80 <__ieee754_sqrt+0xec>
 8010f58:	459c      	cmp	ip, r3
 8010f5a:	d811      	bhi.n	8010f80 <__ieee754_sqrt+0xec>
 8010f5c:	f1bc 0f00 	cmp.w	ip, #0
 8010f60:	eb0c 0506 	add.w	r5, ip, r6
 8010f64:	da43      	bge.n	8010fee <__ieee754_sqrt+0x15a>
 8010f66:	2d00      	cmp	r5, #0
 8010f68:	db41      	blt.n	8010fee <__ieee754_sqrt+0x15a>
 8010f6a:	f100 0801 	add.w	r8, r0, #1
 8010f6e:	1a09      	subs	r1, r1, r0
 8010f70:	459c      	cmp	ip, r3
 8010f72:	bf88      	it	hi
 8010f74:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8010f78:	eba3 030c 	sub.w	r3, r3, ip
 8010f7c:	4432      	add	r2, r6
 8010f7e:	4640      	mov	r0, r8
 8010f80:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8010f84:	f1be 0e01 	subs.w	lr, lr, #1
 8010f88:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8010f8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010f90:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8010f94:	d1db      	bne.n	8010f4e <__ieee754_sqrt+0xba>
 8010f96:	430b      	orrs	r3, r1
 8010f98:	d006      	beq.n	8010fa8 <__ieee754_sqrt+0x114>
 8010f9a:	1c50      	adds	r0, r2, #1
 8010f9c:	bf13      	iteet	ne
 8010f9e:	3201      	addne	r2, #1
 8010fa0:	3401      	addeq	r4, #1
 8010fa2:	4672      	moveq	r2, lr
 8010fa4:	f022 0201 	bicne.w	r2, r2, #1
 8010fa8:	1063      	asrs	r3, r4, #1
 8010faa:	0852      	lsrs	r2, r2, #1
 8010fac:	07e1      	lsls	r1, r4, #31
 8010fae:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8010fb2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8010fb6:	bf48      	it	mi
 8010fb8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8010fbc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8010fc0:	4614      	mov	r4, r2
 8010fc2:	e781      	b.n	8010ec8 <__ieee754_sqrt+0x34>
 8010fc4:	0ad9      	lsrs	r1, r3, #11
 8010fc6:	3815      	subs	r0, #21
 8010fc8:	055b      	lsls	r3, r3, #21
 8010fca:	2900      	cmp	r1, #0
 8010fcc:	d0fa      	beq.n	8010fc4 <__ieee754_sqrt+0x130>
 8010fce:	02cd      	lsls	r5, r1, #11
 8010fd0:	d50a      	bpl.n	8010fe8 <__ieee754_sqrt+0x154>
 8010fd2:	f1c2 0420 	rsb	r4, r2, #32
 8010fd6:	fa23 f404 	lsr.w	r4, r3, r4
 8010fda:	1e55      	subs	r5, r2, #1
 8010fdc:	4093      	lsls	r3, r2
 8010fde:	4321      	orrs	r1, r4
 8010fe0:	1b42      	subs	r2, r0, r5
 8010fe2:	e78a      	b.n	8010efa <__ieee754_sqrt+0x66>
 8010fe4:	4610      	mov	r0, r2
 8010fe6:	e7f0      	b.n	8010fca <__ieee754_sqrt+0x136>
 8010fe8:	0049      	lsls	r1, r1, #1
 8010fea:	3201      	adds	r2, #1
 8010fec:	e7ef      	b.n	8010fce <__ieee754_sqrt+0x13a>
 8010fee:	4680      	mov	r8, r0
 8010ff0:	e7bd      	b.n	8010f6e <__ieee754_sqrt+0xda>
 8010ff2:	bf00      	nop
 8010ff4:	7ff00000 	.word	0x7ff00000

08010ff8 <with_errno>:
 8010ff8:	b570      	push	{r4, r5, r6, lr}
 8010ffa:	4604      	mov	r4, r0
 8010ffc:	460d      	mov	r5, r1
 8010ffe:	4616      	mov	r6, r2
 8011000:	f7fd ff5a 	bl	800eeb8 <__errno>
 8011004:	4629      	mov	r1, r5
 8011006:	6006      	str	r6, [r0, #0]
 8011008:	4620      	mov	r0, r4
 801100a:	bd70      	pop	{r4, r5, r6, pc}

0801100c <xflow>:
 801100c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801100e:	4614      	mov	r4, r2
 8011010:	461d      	mov	r5, r3
 8011012:	b108      	cbz	r0, 8011018 <xflow+0xc>
 8011014:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011018:	e9cd 2300 	strd	r2, r3, [sp]
 801101c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011020:	4620      	mov	r0, r4
 8011022:	4629      	mov	r1, r5
 8011024:	f7ef faf8 	bl	8000618 <__aeabi_dmul>
 8011028:	2222      	movs	r2, #34	; 0x22
 801102a:	b003      	add	sp, #12
 801102c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011030:	f7ff bfe2 	b.w	8010ff8 <with_errno>

08011034 <__math_uflow>:
 8011034:	b508      	push	{r3, lr}
 8011036:	2200      	movs	r2, #0
 8011038:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801103c:	f7ff ffe6 	bl	801100c <xflow>
 8011040:	ec41 0b10 	vmov	d0, r0, r1
 8011044:	bd08      	pop	{r3, pc}

08011046 <__math_oflow>:
 8011046:	b508      	push	{r3, lr}
 8011048:	2200      	movs	r2, #0
 801104a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801104e:	f7ff ffdd 	bl	801100c <xflow>
 8011052:	ec41 0b10 	vmov	d0, r0, r1
 8011056:	bd08      	pop	{r3, pc}

08011058 <fabs>:
 8011058:	ec51 0b10 	vmov	r0, r1, d0
 801105c:	ee10 2a10 	vmov	r2, s0
 8011060:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011064:	ec43 2b10 	vmov	d0, r2, r3
 8011068:	4770      	bx	lr

0801106a <finite>:
 801106a:	b082      	sub	sp, #8
 801106c:	ed8d 0b00 	vstr	d0, [sp]
 8011070:	9801      	ldr	r0, [sp, #4]
 8011072:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8011076:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801107a:	0fc0      	lsrs	r0, r0, #31
 801107c:	b002      	add	sp, #8
 801107e:	4770      	bx	lr

08011080 <scalbn>:
 8011080:	b570      	push	{r4, r5, r6, lr}
 8011082:	ec55 4b10 	vmov	r4, r5, d0
 8011086:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801108a:	4606      	mov	r6, r0
 801108c:	462b      	mov	r3, r5
 801108e:	b99a      	cbnz	r2, 80110b8 <scalbn+0x38>
 8011090:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011094:	4323      	orrs	r3, r4
 8011096:	d036      	beq.n	8011106 <scalbn+0x86>
 8011098:	4b39      	ldr	r3, [pc, #228]	; (8011180 <scalbn+0x100>)
 801109a:	4629      	mov	r1, r5
 801109c:	ee10 0a10 	vmov	r0, s0
 80110a0:	2200      	movs	r2, #0
 80110a2:	f7ef fab9 	bl	8000618 <__aeabi_dmul>
 80110a6:	4b37      	ldr	r3, [pc, #220]	; (8011184 <scalbn+0x104>)
 80110a8:	429e      	cmp	r6, r3
 80110aa:	4604      	mov	r4, r0
 80110ac:	460d      	mov	r5, r1
 80110ae:	da10      	bge.n	80110d2 <scalbn+0x52>
 80110b0:	a32b      	add	r3, pc, #172	; (adr r3, 8011160 <scalbn+0xe0>)
 80110b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110b6:	e03a      	b.n	801112e <scalbn+0xae>
 80110b8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80110bc:	428a      	cmp	r2, r1
 80110be:	d10c      	bne.n	80110da <scalbn+0x5a>
 80110c0:	ee10 2a10 	vmov	r2, s0
 80110c4:	4620      	mov	r0, r4
 80110c6:	4629      	mov	r1, r5
 80110c8:	f7ef f8f0 	bl	80002ac <__adddf3>
 80110cc:	4604      	mov	r4, r0
 80110ce:	460d      	mov	r5, r1
 80110d0:	e019      	b.n	8011106 <scalbn+0x86>
 80110d2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80110d6:	460b      	mov	r3, r1
 80110d8:	3a36      	subs	r2, #54	; 0x36
 80110da:	4432      	add	r2, r6
 80110dc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80110e0:	428a      	cmp	r2, r1
 80110e2:	dd08      	ble.n	80110f6 <scalbn+0x76>
 80110e4:	2d00      	cmp	r5, #0
 80110e6:	a120      	add	r1, pc, #128	; (adr r1, 8011168 <scalbn+0xe8>)
 80110e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80110ec:	da1c      	bge.n	8011128 <scalbn+0xa8>
 80110ee:	a120      	add	r1, pc, #128	; (adr r1, 8011170 <scalbn+0xf0>)
 80110f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80110f4:	e018      	b.n	8011128 <scalbn+0xa8>
 80110f6:	2a00      	cmp	r2, #0
 80110f8:	dd08      	ble.n	801110c <scalbn+0x8c>
 80110fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80110fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011102:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011106:	ec45 4b10 	vmov	d0, r4, r5
 801110a:	bd70      	pop	{r4, r5, r6, pc}
 801110c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011110:	da19      	bge.n	8011146 <scalbn+0xc6>
 8011112:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011116:	429e      	cmp	r6, r3
 8011118:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801111c:	dd0a      	ble.n	8011134 <scalbn+0xb4>
 801111e:	a112      	add	r1, pc, #72	; (adr r1, 8011168 <scalbn+0xe8>)
 8011120:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d1e2      	bne.n	80110ee <scalbn+0x6e>
 8011128:	a30f      	add	r3, pc, #60	; (adr r3, 8011168 <scalbn+0xe8>)
 801112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801112e:	f7ef fa73 	bl	8000618 <__aeabi_dmul>
 8011132:	e7cb      	b.n	80110cc <scalbn+0x4c>
 8011134:	a10a      	add	r1, pc, #40	; (adr r1, 8011160 <scalbn+0xe0>)
 8011136:	e9d1 0100 	ldrd	r0, r1, [r1]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d0b8      	beq.n	80110b0 <scalbn+0x30>
 801113e:	a10e      	add	r1, pc, #56	; (adr r1, 8011178 <scalbn+0xf8>)
 8011140:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011144:	e7b4      	b.n	80110b0 <scalbn+0x30>
 8011146:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801114a:	3236      	adds	r2, #54	; 0x36
 801114c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011150:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011154:	4620      	mov	r0, r4
 8011156:	4b0c      	ldr	r3, [pc, #48]	; (8011188 <scalbn+0x108>)
 8011158:	2200      	movs	r2, #0
 801115a:	e7e8      	b.n	801112e <scalbn+0xae>
 801115c:	f3af 8000 	nop.w
 8011160:	c2f8f359 	.word	0xc2f8f359
 8011164:	01a56e1f 	.word	0x01a56e1f
 8011168:	8800759c 	.word	0x8800759c
 801116c:	7e37e43c 	.word	0x7e37e43c
 8011170:	8800759c 	.word	0x8800759c
 8011174:	fe37e43c 	.word	0xfe37e43c
 8011178:	c2f8f359 	.word	0xc2f8f359
 801117c:	81a56e1f 	.word	0x81a56e1f
 8011180:	43500000 	.word	0x43500000
 8011184:	ffff3cb0 	.word	0xffff3cb0
 8011188:	3c900000 	.word	0x3c900000

0801118c <_init>:
 801118c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801118e:	bf00      	nop
 8011190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011192:	bc08      	pop	{r3}
 8011194:	469e      	mov	lr, r3
 8011196:	4770      	bx	lr

08011198 <_fini>:
 8011198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801119a:	bf00      	nop
 801119c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801119e:	bc08      	pop	{r3}
 80111a0:	469e      	mov	lr, r3
 80111a2:	4770      	bx	lr
